/** @file
 *
 * @defgroup bl_side_firmware_update Firmware Update module
 * @{
 *
 * @brief	This module provides the functions required to enable the application to be able to handle Firmware Update
 *          requests via ETX OTA Protocol and to install either a Bootloader or an Application Firmware Image in our
 *          MCU/MPU if requested by using a desired Hardware Protocol from our MCU/MPU's as a communication channel.
 *
 * @note    For more details on the available Hardware Protocol, see @ref ETX_OTA_hw_Protocol .
 *
 * @details	The ETX OTA process sends/receives data through Packets.
 * @details There 4 types of Packets:
 *          <ol>
 *              <li>Command Type Packets</li>
 *              <li>Header Type Packets</li>
 *              <li>Data Type Packets</li>
 *              <li>Response Type Packets</li>
 *          </ol>
 *          where it is suggested to see @ref ETX_OTA_Packet_t for more details.
 * @details The General Data Format for all types of Packets is the following set of bytes:
 *          <ol>
 *              <li>Start of Frame (SOF): 1 byte</li>
 *              <li>Packet Type: 1 byte</li>
 *              <li>Data Length: 2 bytes</li>
 *              <li>Data: 1 up to 1024 bytes (size must be perfectly divisible by 4 bytes)</li>
 *              <li>CRC32: 4 bytes</li>
 *              <li>End of Frame (EOF): 1 byte</li>
 *          </ol>
 *          but for finer details on the Data Format for each type of ETX OTA Packet, see @ref ETX_OTA_Command_Packet_t ,
 *          @ref ETX_OTA_Header_Packet_t , @ref ETX_OTA_Data_Packet_t and @ref ETX_OTA_Response_Packet_t .
 * @details On the other hand, the ETX OTA Protocol has 5 different states that indicate the part of the process at which
 *          we are located at with respect to a single Firmware Update process, which are given by the following in that
 *          order:
 *          <ol>
 *              <li>ETX OTA Idle State</li>
 *              <li>ETX OTA Start State</li>
 *              <li>ETX OTA Header State</li>
 *              <li>ETX OTA Data State</li>
 *              <li>ETX OTA End State</li>
 *          </ol>
 *          where it is suggested to see @ref ETX_OTA_State for more details.
 * @details Finally, the way our MCU/MPU will interact with a host is that the host will send a single packet for each
 * 			ETX OTA State, except maybe in the Data State since multiple packets are allowed there. Nonetheless, our
 * 			MCU/MPU will expect the ETX OTA States to transition in the order previously shown and our MCU/MPU will
 * 			also both validate the received data and, if it is successful on that, it will always respond back to the
 * 			host with an ETX OTA Response Type Packet to let it know whether or not our MCU/MPU was able to successfully
 * 			get and process the data of the each Packet by sending an ACK, or otherwise with a NACK.
 *
 * @author 	EmbeTronicX (<a href=https://github.com/Embetronicx/STM32-Bootloader/tree/ETX_Bootloader_3.0>STM32-Bootloader GitHub Repository under ETX_Bootloader_3.0 branch</a>)
 * @author 	Cesar Miranda Meza (cmirandameza3@hotmail.com)
 * @date	November 14, 2023.
 */
#include <stdint.h>
#include "firmware_update_config.h" // We call the library that holds the Firmware Update Configurations sub-module.

#ifndef BL_SIDE_FIRMWARE_UPDATE_H_
#define BL_SIDE_FIRMWARE_UPDATE_H_

/**@brief	ETX OTA Exception codes.
 *
 * @details	These Exception Codes are returned by the functions of the @ref bl_side_firmware_update module to indicate the
 *          resulting status of having executed the process contained in each of those functions. For example, to
 *          indicate that the process executed by a certain function was successful or that it has failed.
 */
typedef enum
{
	ETX_OTA_EC_OK       = 0U,    //!< ETX OTA Protocol was successful. @note The code from the @ref HAL_ret_handler function contemplates that this value will match the one given for \c HAL_OK from @ref HAL_StatusTypeDef .
	ETX_OTA_EC_STOP     = 1U,    //!< ETX OTA Protocol has been stopped.
	ETX_OTA_EC_NR		= 2U,	 //!< ETX OTA Protocol has concluded with no response from Host.
	ETX_OTA_EC_NA       = 3U,    //!< ETX OTA Payload received or to be received Not Applicable.
	ETX_OTA_EC_ERR      = 4U,    //!< ETX OTA Protocol has failed.
    ETX_OTA_EC_NTU      = 18U    //!< ETX OTA Protocol Process concluded with no Firmware Image available to update.
} ETX_OTA_Status;

/**@brief	ETX OTA Hardware Protocol definitions.
 *
 * @details	These definitions define the available ETX OTA <u>Hardware Protocols</u> that our MCU can use to establish a
 *          "physical" connection with a host machine, in which both ends will communicate with each other by using the
 *          ETX OTA <u>Software Protocol</u> for interpreting the data send/received on both sides.
 */
typedef enum
{
    ETX_OTA_hw_Protocol_UART    = 0U,    //!< UART Hardware Protocol to be used for the ETX OTA Protocol. @details The default expected UART configuration settings are 115'200 baud rate, 8 data-bits, no parity, 1 stop-bit and no Flow Control. However, these can be changed as long as these configurations are also changed on the host app, where it is indispensable that they match.
    ETX_OTA_hw_Protocol_BLE     = 1U     //!< BLE Hardware Protocol to be used for the ETX OTA Protocol. @details The expected BLE module for our MCU to use is the HM-10 Clone BLE Device via the @ref hm10_ble_clone , which our MCU communicates with via UART under the default expected configuration settings of 9600 baud rate, 8 data-bits, no parity, 1 stop-bit and no Flow Control. However, these can be changed as long as these configurations are also changed on the HM-10 Clone BLE Device, where it is indispensable that they match.
} ETX_OTA_hw_Protocol;

/**@brief   Attempts to receive and install an Application Firmware Image into our MCU/MPU.
 *
 * @details The Applicaiton Firmware Image is expected to be received from a certain host via the initialized Hardware
 *          Protocol (see @ref init_firmware_update_module function) and by using the ETX OTA Communication Protocol.
 *
 * @note    For more details on how the ETX OTA Protocol works, see the @ref bl_side_firmware_update module.
 * @note	This function expects that the @ref firmware_update_config has already been initialized via the
 *          @ref firmware_update_configurations_init function.
 *
 * @retval  ETX_OTA_EC_OK
 * @retval	ETX_OTA_EC_STOP
 * @retval	ETX_OTA_EC_NR
 * @retval	ETX_OTA_EC_NA
 * @retval	ETX_OTA_EC_ERR
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @author 	EmbeTronicX (<a href=https://github.com/Embetronicx/STM32-Bootloader/tree/ETX_Bootloader_3.0>STM32-Bootloader GitHub Repository under ETX_Bootloader_3.0 branch</a>)
 * @date    November 14, 2023.
 */
ETX_OTA_Status firmware_image_download_and_install();

/**@brief   Attempts to install a Bootloader Firmware Image that is pending to be installed into our MCU/MPU in case
 *          that there is a pending installing for that type of Firmware Image.
 *
 * @details This function will first check if there is a Bootloader Firmware Image pending to be installed. If true,
 *          then it will validate its 32-bit CRC. If this Firmware Image is a valid one, only then will this function
 *          attempt to install it into our MCU/MPU.
 *
 * @note	This function expects that the @ref firmware_update_config has already been initialized via the
 *          @ref firmware_update_configurations_init function.
 * @note    This function also expects the implementer to call it once after initializing the
 *          @ref bl_side_firmware_update and before using any other of the functions available in that module.
 *
 * @retval  ETX_OTA_EC_OK   if there was a Bootloader Firmware Image pending to be installed and if that Firmware
 *                          Image was successfully validated and installed into our MCU/MPU.
 * @retval	ETX_OTA_EC_NR   if there was no response from the HAL of our MCU/MPU whenever either attempting to
 *                          unlock/lock the HAL FLASH or; to erase/write in the Flash Memory designated to the
 *                          Bootloader Firmware Image of our MCU/MPU.
 * @retval  ETX_OTA_EC_NTU  if there is no Bootloader Firmware Image pending to be installed into our MCU/MPU.
 * @retval	ETX_OTA_EC_ERR  otherwise.
 *
 * @note    The implementer can safely use all the other functions available in the @ref bl_side_firmware_update as long
 *          as this function returns either \c ETX_OTA_EC_OK or \c ETX_OTA_EC_NTU . If the contrary gives place, then
 *          those other functions are also safely to be used only in the case that our MCU/MPU is currently running its
 *          Bootloader Firmware at its designated Flash Memory location address (i.e., at @ref ETX_BL_FLASH_ADDR ).
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @date    November 17, 2023.
 */
ETX_OTA_Status install_bl_stored_in_app_fw();

/**@brief   Initializes the @ref bl_side_firmware_update in order to be able to use its provided functions.
 *
 * @details This function will update several of its Global Static Pointers and Variables that are used in the
 *          @ref bl_side_firmware_update and will then validate the requested Hardware Protocol into which it is desired
 *          to apply the ETX OTA Protocol.
 * @details After the validation process mentioned, this function will not do anything else in the case that the UART
 *          Hardware Protocol is chosen. However, if the BLE Hardware Protocol is selected instead, then this function
 *          will initialize the HM-10 Clone BLE Device whose UART peripheral connection is indicated via the \p huart
 *          param.
 *
 * @note    This function updates the following Global Static Pointers and variables:<br>
 *          - The @ref ETX_OTA_hardware_protocol Global Static Variable with the value of the \p hardware_protocol
 *            param.
 *          - The @ref p_huart Global Static Pointer to point to the address towards which the \p huart param points.
 *          - The @ref p_fw_config Global Static Pointer to point to the address towards which the \p fw_config param
 *            points.
 *          - The @ref p_GPIO_is_hm10_default_settings_Pin Global Static Pointer to point to the address towards which
 *            the \p GPIO_is_hm10_default_settings_Pin param points.
 *          - The @ref p_GPIO_hm10_state_Pin Global Static Pointer to point to the address towards which the
 *            \p GPIO_hm10_state_Pin param points.
 *
 * @param hardware_protocol                     The Hardware Protocol into which it is desired to use the ETX OTA
 *                                              Protocol.
 * @param[in] huart	                            Pointer to the UART Handle Structure of the UART that it is desired to
 *                                              use for the requested \p hardware_protocol .
 * @param[in,out] fw_config                     Pointer to the struct that should already contain the latest data of the
 *                                              @ref firmware_update_config .
 *
 * @note	This function expects that the \p p_fw_config pointer points to an already initialized
 *          firmware_update_config_data_t type structure via the @ref firmware_update_configurations_init function of
 *          the @ref firmware_update_config .
 *
 * @param[in] GPIO_hm10_VCC                     Pointer to the GPIO Definition Type of the GPIO Pin that is connected to
 *                                              the Transistor that connects or disconnects the Power Supply from the
 *                                              HM-10 Clone BLE Device. However, if the UART Hardware Protocol is
 *                                              selected (via the \p hardware_protocol param), then this param will not
 *                                              be used and, in that case, it is recommended to set its value to
 *                                              \c NULL.
 *
 * @note    The Output Mode GPIO of the GPIO Definition Type towards which the \p GPIO_hm10_VCC param points to, will be
 *          used to electrically disconnect and then to reconnect the Power Supply of the HM-10 Clone BLE Device in
 *          order to force it to disconnect from a BLE Connection.
 * @note    The following are the possible values of the GPIO Pin designated here:<br><br>* 0 (i.e., Low State) = The
 *          Power Supply of the HM-10 Clone BLE Device is not connected.<br>* 1 (i.e., High State) = The Power Supply of
 *          the HM-10 Clone BLE Device is connected.
 *
 * @param[in] GPIO_is_hm10_default_settings     Pointer to the GPIO Definition Type of the GPIO Pin from which it can be
 *                                              requested to reset the Configuration Settings of the HM-10 Clone BLE
 *                                              Device to its default settings. However, if the UART Hardware Protocol
 *                                              is selected (via the \p hardware_protocol param), then this param will
 *                                              not be used and, in that case, it is recommended to set its value to
 *                                              \c NULL.
 *
 * @note    The Input Mode GPIO of the GPIO Definition Type towards which the \p GPIO_is_hm10_default_settings param
 *          points to, will be used so that our MCU can know whether the user wants it to set the default configuration
 *          settings in the HM-10 Clone BLE Device.
 * @note    The following are the possible values of the GPIO Pin designated here:<br><br>* 0 (i.e., Low State) = Do not
 *          reset/change the configuration settings of the HM-10 Clone BLE Device.<br>* 1 (i.e., High State) = User
 *          requests to reset the configuration settings of the HM-10 Clone BLE Device to its default settings.
 * @param[in] GPIO_hm10_state                   Pointer to the STATE Pin of the HM-10 Clone BLE Device Hardware.
 *                                              However, if the UART Hardware Protocol is selected (via the
 *                                              \p hardware_protocol param), then this param will not be used and, in
 *                                              that case, it is recommended to set its value to \c NULL.
 *
 * @note    The Input Mode GPIO of the GPIO Definition Type towards which the \p GPIO_hm10_state param points to,
 *          will be used to read the STATE Pin of the HM-10 Clone BLE Device.
 * @note    The following are the possible values of that STATE Pin:<br><br>* 0 (i.e., Low State) = The HM-10 Clone BLE
 *          Device is not connected with an external BLE Device.<br>* 1 (i.e., High State) = The HM-10 Clone BLE Device
 *          is currently connected with an external BLE Device.
 *
 * @retval  ETX_OTA_EC_OK   if the Firmware Update Module has been successfully initialized.
 * @retval  ETX_OTA_EC_ERR  <ul>
 *                              <li>
 *                                  If the \p hardware_protocol param requests to use an invalid Hardware Protocol.
 *                              </li>
 *                              <li>
 *                                  If, after the Hardware Protocol Validation process and whenever choosing the BLE
 *                                  Hardware Protocol, there is an error/problem that impedes initializing or resetting
 *                                  all the configuration settings of the HM-10 Clone BLE Device to its Default
 *                                  Settings.
 *                              </li>
 *                          </ul>
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @date    October 30, 2023.
 */
ETX_OTA_Status init_firmware_update_module(ETX_OTA_hw_Protocol hardware_protocol,
                                           UART_HandleTypeDef *huart,
                                           firmware_update_config_data_t *fw_config,
                                           GPIO_def_t *GPIO_hm10_VCC,
                                           GPIO_def_t *GPIO_is_hm10_default_settings,
                                           GPIO_def_t *GPIO_hm10_state);

#endif /* BL_SIDE_FIRMWARE_UPDATE_H_ */

/** @} */
