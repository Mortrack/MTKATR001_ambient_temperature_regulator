
Custom_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001800  08001800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001800  08001800  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001800  08001800  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08001814  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001814  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000037b4  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000142c  00000000  00000000  0002382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00024c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003bd  00000000  00000000  00025188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a93  00000000  00000000  00025545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000665d  00000000  00000000  0003bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000800bc  00000000  00000000  00042635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001278  00000000  00000000  000c26f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000c396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080013c4 	.word	0x080013c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080013c4 	.word	0x080013c4

0800014c <CRC32>:
 */

#include "crc32_mpeg2.h"

uint32_t CRC32(uint8_t *p_data, uint32_t DataLength)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    /** <b>Local variable checksum:</b> Will hold the resulting checksum of the 32-bit CRC Hash Function to be calculated. @note A checksum is any sort of mathematical operation that it is performed on data to represent its number of bits in a transmission message. This is usually used by programmers to detect high-level errors within data transmissions. The way this is used is prior to transmission, such that every piece of data or file can be assigned a checksum value after running a cryptographic has function, which in this particular case, the has function is 32-bit CRC. */
    uint32_t checksum = 0xFFFFFFFF;
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	617b      	str	r3, [r7, #20]

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<DataLength; i++)
 800015c:	2300      	movs	r3, #0
 800015e:	613b      	str	r3, [r7, #16]
 8000160:	e014      	b.n	800018c <CRC32+0x40>
    {
        uint8_t top = (uint8_t) (checksum >> 24);
 8000162:	697b      	ldr	r3, [r7, #20]
 8000164:	0e1b      	lsrs	r3, r3, #24
 8000166:	73fb      	strb	r3, [r7, #15]
        top ^= p_data[i];
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	693b      	ldr	r3, [r7, #16]
 800016c:	4413      	add	r3, r2
 800016e:	781a      	ldrb	r2, [r3, #0]
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	4053      	eors	r3, r2
 8000174:	73fb      	strb	r3, [r7, #15]
        checksum = (checksum << 8) ^ crc_table[top];
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	021a      	lsls	r2, r3, #8
 800017a:	7bfb      	ldrb	r3, [r7, #15]
 800017c:	4908      	ldr	r1, [pc, #32]	; (80001a0 <CRC32+0x54>)
 800017e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000182:	4053      	eors	r3, r2
 8000184:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i<DataLength; i++)
 8000186:	693b      	ldr	r3, [r7, #16]
 8000188:	3301      	adds	r3, #1
 800018a:	613b      	str	r3, [r7, #16]
 800018c:	693a      	ldr	r2, [r7, #16]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d3e6      	bcc.n	8000162 <CRC32+0x16>
    }
    return checksum;
 8000194:	697b      	ldr	r3, [r7, #20]
}
 8000196:	4618      	mov	r0, r3
 8000198:	371c      	adds	r7, #28
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	080013dc 	.word	0x080013dc

080001a4 <firmware_update_configurations_init>:
 * @date September 26, 2023.
 */
static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

FirmUpdConf_Status firmware_update_configurations_init()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Data Block to which the @ref p_most_recent_val pointer points to. */
	uint32_t cal_crc;
	/** <b>Local variable p_next_val:</b> Firmware Update Configurations Block pointer that should point to the Firmware Update Configurations Block located right after the one with the most recently written value (i.e., right after the Data Block to which the @ref p_most_recent_val pointer points to). */
	firmware_update_config_t *p_next_val;

	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80001aa:	4b27      	ldr	r3, [pc, #156]	; (8000248 <firmware_update_configurations_init+0xa4>)
 80001ac:	4a27      	ldr	r2, [pc, #156]	; (800024c <firmware_update_configurations_init+0xa8>)
 80001ae:	601a      	str	r2, [r3, #0]

	/* Cycle through flash until an erased value is found. */
	#if ETX_OTA_VERBOSE
		printf("Initializing Firmware Update Configurations sub-module...\r\n");
	#endif
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80001b0:	4b27      	ldr	r3, [pc, #156]	; (8000250 <firmware_update_configurations_init+0xac>)
 80001b2:	60fb      	str	r3, [r7, #12]
 80001b4:	e02b      	b.n	800020e <firmware_update_configurations_init+0x6a>
	{
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	7fdb      	ldrb	r3, [r3, #31]
 80001ba:	2bff      	cmp	r3, #255	; 0xff
 80001bc:	d121      	bne.n	8000202 <firmware_update_configurations_init+0x5e>
		{
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 80001be:	4b22      	ldr	r3, [pc, #136]	; (8000248 <firmware_update_configurations_init+0xa4>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	7fdb      	ldrb	r3, [r3, #31]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d11c      	bne.n	8000202 <firmware_update_configurations_init+0x5e>
			{
				/* Calculate and verify the 32-bit CRC of @ref p_most_recent_val . If validation is successful, then proceed normally. Otherwise, ignore the current Data Block that @ref p_most_recent_val is pointing towards to and keep searching. */
				cal_crc = CRC32((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 80001c8:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <firmware_update_configurations_init+0xa4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3304      	adds	r3, #4
 80001ce:	221c      	movs	r2, #28
 80001d0:	4611      	mov	r1, r2
 80001d2:	4618      	mov	r0, r3
 80001d4:	f7ff ffba 	bl	800014c <CRC32>
 80001d8:	60b8      	str	r0, [r7, #8]
				if(cal_crc != p_most_recent_val->crc32)
 80001da:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <firmware_update_configurations_init+0xa4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	68ba      	ldr	r2, [r7, #8]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d018      	beq.n	8000218 <firmware_update_configurations_init+0x74>
				{
					/* Since the Flash Memory has been identified to be corrupted, erase the contents of the two Flash Memory pages of the Firmware Update Configurations sub-module. */
					#if ETX_OTA_VERBOSE
						printf("WARNING: One of the Flash Memory pages designated to the Firmware Update Configurations sub-module has been identified to be corrupted.\r\n");
					#endif
					ret = restore_firm_updt_config_flash_memory();
 80001e6:	f000 f853 	bl	8000290 <restore_firm_updt_config_flash_memory>
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
					if (ret != FIRM_UPDT_CONF_EC_OK)
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <firmware_update_configurations_init+0x54>
					{
						#if ETX_OTA_VERBOSE
							printf("ERROR: The Firmware Update Configurations sub-module could not be initialized.\r\n");
						#endif
						return FIRM_UPDT_CONF_EC_CRPT;
 80001f4:	2305      	movs	r3, #5
 80001f6:	e022      	b.n	800023e <firmware_update_configurations_init+0x9a>
					}

					/* We define that there is no data in the Flash Memory pages of the Firmware Update Configurations sub-module. */
					p_most_recent_val = NULL;
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <firmware_update_configurations_init+0xa4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]

					#if ETX_OTA_VERBOSE
						printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
					#endif
					return FIRM_UPDT_CONF_EC_OK;
 80001fe:	2300      	movs	r3, #0
 8000200:	e01d      	b.n	800023e <firmware_update_configurations_init+0x9a>
				}
				break;
			}
		}
		p_most_recent_val = p_next_val;
 8000202:	4a11      	ldr	r2, [pc, #68]	; (8000248 <firmware_update_configurations_init+0xa4>)
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	6013      	str	r3, [r2, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	3320      	adds	r3, #32
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	4a10      	ldr	r2, [pc, #64]	; (8000254 <firmware_update_configurations_init+0xb0>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d3cf      	bcc.n	80001b6 <firmware_update_configurations_init+0x12>
 8000216:	e000      	b.n	800021a <firmware_update_configurations_init+0x76>
				break;
 8000218:	bf00      	nop
	}

	/* If the end of the for-loop is reached and if last location is erased, then there is currently no data in the Firmware Update Configuration's designated Flash Memory pages. */
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <firmware_update_configurations_init+0xb0>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d107      	bne.n	8000232 <firmware_update_configurations_init+0x8e>
	{
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <firmware_update_configurations_init+0xa4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	7fdb      	ldrb	r3, [r3, #31]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d102      	bne.n	8000232 <firmware_update_configurations_init+0x8e>
		{
			p_most_recent_val = NULL;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <firmware_update_configurations_init+0xa4>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
		}
	}

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8000232:	f000 f84d 	bl	80002d0 <prep_page_swap>
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
		#endif
	}

	return ret;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	b2db      	uxtb	r3, r3
}
 800023e:	4618      	mov	r0, r3
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c
 800024c:	0801efe0 	.word	0x0801efe0
 8000250:	0801e000 	.word	0x0801e000
 8000254:	0801f000 	.word	0x0801f000

08000258 <firmware_update_configurations_read>:

FirmUpdConf_Status firmware_update_configurations_read(firmware_update_config_data_t *p_data)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	firmware_update_config_t *p_current_val = p_most_recent_val;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <firmware_update_configurations_read+0x30>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	60fb      	str	r3, [r7, #12]
	if (p_current_val == NULL)
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d101      	bne.n	8000270 <firmware_update_configurations_read+0x18>
	{
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <firmware_update_configurations_read+0x34>)
 800026e:	60fb      	str	r3, [r7, #12]
	}

	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	3304      	adds	r3, #4
 8000274:	2218      	movs	r2, #24
 8000276:	4619      	mov	r1, r3
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f001 f895 	bl	80013a8 <memcpy>

	return FIRM_UPDT_CONF_EC_OK;
 800027e:	2300      	movs	r3, #0
}
 8000280:	4618      	mov	r0, r3
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000002c 	.word	0x2000002c
 800028c:	0801e000 	.word	0x0801e000

08000290 <restore_firm_updt_config_flash_memory>:
	#endif
	return ret;
}

static FirmUpdConf_Status restore_firm_updt_config_flash_memory()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	uint16_t ret;

	#if ETX_OTA_VERBOSE
		printf("Erasing all Flash Memory pages from the Firmware Update Configurations sub-module to restore their functionalities...\r\n");
	#endif
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8000296:	480c      	ldr	r0, [pc, #48]	; (80002c8 <restore_firm_updt_config_flash_memory+0x38>)
 8000298:	f000 f84e 	bl	8000338 <page_erase>
 800029c:	4603      	mov	r3, r0
 800029e:	80fb      	strh	r3, [r7, #6]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 80002a0:	88fb      	ldrh	r3, [r7, #6]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d002      	beq.n	80002ac <restore_firm_updt_config_flash_memory+0x1c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 1 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	e009      	b.n	80002c0 <restore_firm_updt_config_flash_memory+0x30>
	}
	page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 80002ac:	4807      	ldr	r0, [pc, #28]	; (80002cc <restore_firm_updt_config_flash_memory+0x3c>)
 80002ae:	f000 f843 	bl	8000338 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <restore_firm_updt_config_flash_memory+0x2e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 2 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	e000      	b.n	80002c0 <restore_firm_updt_config_flash_memory+0x30>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The Flash Memory pages from the Firmware Update Configurations sub-module have been restored to its original factory form.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	0801e000 	.word	0x0801e000
 80002cc:	0801e800 	.word	0x0801e800

080002d0 <prep_page_swap>:

static FirmUpdConf_Status prep_page_swap()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	#if ETX_OTA_VERBOSE
		printf("Preparing the Firmware Update Configurations sub-module for a possible future page swap...\r\n");
	#endif

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <prep_page_swap+0x58>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <prep_page_swap+0x5c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d109      	bne.n	80002f4 <prep_page_swap+0x24>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <prep_page_swap+0x60>)
 80002e2:	7fdb      	ldrb	r3, [r3, #31]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d105      	bne.n	80002f4 <prep_page_swap+0x24>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 2...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 80002e8:	4812      	ldr	r0, [pc, #72]	; (8000334 <prep_page_swap+0x64>)
 80002ea:	f000 f825 	bl	8000338 <page_erase>
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 80002f2:	e012      	b.n	800031a <prep_page_swap+0x4a>
			#if ETX_OTA_VERBOSE
				printf("DONE: The Firmware Update Configuration's page 2 was successfully erased.\r\n");
			#endif
		}
	}
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <prep_page_swap+0x58>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <prep_page_swap+0x64>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d10b      	bne.n	8000316 <prep_page_swap+0x46>
			(p_most_recent_val-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <prep_page_swap+0x58>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3b20      	subs	r3, #32
 8000304:	7fdb      	ldrb	r3, [r3, #31]
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8000306:	2b00      	cmp	r3, #0
 8000308:	d105      	bne.n	8000316 <prep_page_swap+0x46>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 1...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <prep_page_swap+0x5c>)
 800030c:	f000 f814 	bl	8000338 <page_erase>
 8000310:	4603      	mov	r3, r0
 8000312:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 8000314:	e001      	b.n	800031a <prep_page_swap+0x4a>
			#endif
		}
	}
	else
	{
		ret = FIRM_UPDT_CONF_EC_OK;
 8000316:	2300      	movs	r3, #0
 8000318:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: No page swap preparations required at the moment.\r\n");
		#endif
	}

	return ret;
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	b2db      	uxtb	r3, r3
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000002c 	.word	0x2000002c
 800032c:	0801e000 	.word	0x0801e000
 8000330:	0801efe0 	.word	0x0801efe0
 8000334:	0801e800 	.word	0x0801e800

08000338 <page_erase>:

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
		printf("Erasing the Flash memory page that starts at address 0x%08X...\r\n", (unsigned int) page_start_addr);
	#endif
	HAL_StatusTypeDef ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 8000340:	f000 fab4 	bl	80008ac <HAL_FLASH_Unlock>
 8000344:	4603      	mov	r3, r0
 8000346:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8000348:	7ffb      	ldrb	r3, [r7, #31]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f838 	bl	80003c0 <HAL_ret_handler>
 8000350:	4603      	mov	r3, r0
 8000352:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8000354:	7ffb      	ldrb	r3, [r7, #31]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <page_erase+0x26>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 800035a:	7ffb      	ldrb	r3, [r7, #31]
 800035c:	e02c      	b.n	80003b8 <page_erase+0x80>
	}

	/* Erase desired Flash Memory page. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8000362:	2301      	movs	r3, #1
 8000364:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = 1U;
 800036a:	2301      	movs	r3, #1
 800036c:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 800036e:	f107 0208 	add.w	r2, r7, #8
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	4611      	mov	r1, r2
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fb63 	bl	8000a44 <HAL_FLASHEx_Erase>
 800037e:	4603      	mov	r3, r0
 8000380:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8000382:	7ffb      	ldrb	r3, [r7, #31]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f81b 	bl	80003c0 <HAL_ret_handler>
 800038a:	4603      	mov	r3, r0
 800038c:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 800038e:	7ffb      	ldrb	r3, [r7, #31]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <page_erase+0x60>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested Flash Memory page at address 0x%08X could not be erased; Firmware Update Configurations Exception code %d.\r\n", (unsigned int) page_start_addr, ret);
		#endif
		return ret;
 8000394:	7ffb      	ldrb	r3, [r7, #31]
 8000396:	e00f      	b.n	80003b8 <page_erase+0x80>
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8000398:	f000 faae 	bl	80008f8 <HAL_FLASH_Lock>
 800039c:	4603      	mov	r3, r0
 800039e:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 80003a0:	7ffb      	ldrb	r3, [r7, #31]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f80c 	bl	80003c0 <HAL_ret_handler>
 80003a8:	4603      	mov	r3, r0
 80003aa:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 80003ac:	7ffb      	ldrb	r3, [r7, #31]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <page_erase+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 80003b2:	7ffb      	ldrb	r3, [r7, #31]
 80003b4:	e000      	b.n	80003b8 <page_erase+0x80>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested Flash Memory page was successfully erased.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <HAL_ret_handler>:

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d006      	beq.n	80003de <HAL_ret_handler+0x1e>
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dd06      	ble.n	80003e2 <HAL_ret_handler+0x22>
 80003d4:	3b02      	subs	r3, #2
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d803      	bhi.n	80003e2 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 80003da:	2302      	movs	r3, #2
 80003dc:	e002      	b.n	80003e4 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 80003de:	2304      	movs	r3, #4
 80003e0:	e000      	b.n	80003e4 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 80003e2:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f000 f914 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f80d 	bl	8000416 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f846 	bl	800048c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /** <b>Local variable is_app_fw_validation_ok:</b> Flag used to indicate whether the Application Firmware has been successfully validated via its CRC with a \c 1 or, otherwise with a \c 0 . */
  uint8_t is_app_fw_validation_ok = 1;
 8000400:	2301      	movs	r3, #1
 8000402:	71fb      	strb	r3, [r7, #7]
  /** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref HM10_Clone_Status function type. */
  uint8_t ret;

  /* We initialize the Firmware Update Configurations sub-module to be able to write and read data from it. */
  ret = custom_firmware_update_config_init();
 8000404:	f000 f858 	bl	80004b8 <custom_firmware_update_config_init>
 8000408:	4603      	mov	r3, r0
 800040a:	71bb      	strb	r3, [r7, #6]
  if (ret != FIRM_UPDT_CONF_EC_OK)
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d000      	beq.n	8000414 <main+0x26>
  {
	  while (1);
 8000412:	e7fe      	b.n	8000412 <main+0x24>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	e7fe      	b.n	8000414 <main+0x26>

08000416 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b090      	sub	sp, #64	; 0x40
 800041a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	2228      	movs	r2, #40	; 0x28
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f000 ff93 	bl	8001350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000438:	2301      	movs	r3, #1
 800043a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000440:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000442:	2300      	movs	r3, #0
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fba2 	bl	8000b94 <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000456:	f000 f867 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800045e:	2301      	movs	r3, #1
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000462:	2390      	movs	r3, #144	; 0x90
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fe10 	bl	8001098 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800047e:	f000 f853 	bl	8000528 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	; 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_GPIO_Init+0x28>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <MX_GPIO_Init+0x28>)
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <MX_GPIO_Init+0x28>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <custom_firmware_update_config_init>:

/* USER CODE BEGIN 4 */

static FirmUpdConf_Status custom_firmware_update_config_init()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
	int16_t ret;
	/** <b>Local static variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
	static uint8_t attempts = 0;
	/** <b>Local variable end_tick:</b> Defines the HAL Tick that our MCU/MPU needs to reach so that 0.5 seconds have passed with respect to the moment that this function is called. */
	uint32_t end_tick = HAL_GetTick() + 500;
 80004be:	f000 f907 	bl	80006d0 <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80004c8:	60bb      	str	r3, [r7, #8]
	/** <b>Local variable current_tick:</b> Current HAL Tick in our MCU/MPU. */
	uint32_t current_tick;

	if (attempts > 2)
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <custom_firmware_update_config_init+0x68>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d904      	bls.n	80004dc <custom_firmware_update_config_init+0x24>
	{
		return FIRM_UPDT_CONF_EC_ERR;
 80004d2:	2304      	movs	r3, #4
 80004d4:	e01f      	b.n	8000516 <custom_firmware_update_config_init+0x5e>
	}

	/* Delay of 500 milliseconds. */
	while (current_tick < end_tick)
	{
		current_tick = HAL_GetTick();
 80004d6:	f000 f8fb 	bl	80006d0 <HAL_GetTick>
 80004da:	60f8      	str	r0, [r7, #12]
	while (current_tick < end_tick)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d3f8      	bcc.n	80004d6 <custom_firmware_update_config_init+0x1e>
	}

	/* We initialize the Firmware Update Configurations sub-module. */
	ret = firmware_update_configurations_init();
 80004e4:	f7ff fe5e 	bl	80001a4 <firmware_update_configurations_init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	80fb      	strh	r3, [r7, #6]
    attempts++;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <custom_firmware_update_config_init+0x68>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <custom_firmware_update_config_init+0x68>)
 80004f6:	701a      	strb	r2, [r3, #0]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 80004f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d006      	beq.n	800050e <custom_firmware_update_config_init+0x56>
	{
		ret = custom_firmware_update_config_init();
 8000500:	f7ff ffda 	bl	80004b8 <custom_firmware_update_config_init>
 8000504:	4603      	mov	r3, r0
 8000506:	80fb      	strh	r3, [r7, #6]
        return ret;
 8000508:	88fb      	ldrh	r3, [r7, #6]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	e003      	b.n	8000516 <custom_firmware_update_config_init+0x5e>
	}

	/* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
	firmware_update_configurations_read(&p_fw_config);
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <custom_firmware_update_config_init+0x6c>)
 8000510:	f7ff fea2 	bl	8000258 <firmware_update_configurations_read>

	return FIRM_UPDT_CONF_EC_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000048 	.word	0x20000048
 8000524:	20000030 	.word	0x20000030

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_MspInit+0x40>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <HAL_MspInit+0x40>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_MspInit+0x40>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_MspInit+0x40>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_MspInit+0x40>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_MspInit+0x40>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f875 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff fff7 	bl	80005c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005da:	490c      	ldr	r1, [pc, #48]	; (800060c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f0:	4c09      	ldr	r4, [pc, #36]	; (8000618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f000 feaf 	bl	8001360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fef4 	bl	80003ee <main>
  bx lr
 8000606:	4770      	bx	lr
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000610:	08001808 	.word	0x08001808
  ldr r2, =_sbss
 8000614:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000618:	20000070 	.word	0x20000070

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_Init+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_Init+0x28>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f907 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	200f      	movs	r0, #15
 8000638:	f000 f808 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff ff7a 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x54>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x58>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	fbb3 f3f1 	udiv	r3, r3, r1
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f911 	bl	8000892 <HAL_SYSTICK_Config>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e00e      	b.n	8000698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b0f      	cmp	r3, #15
 800067e:	d80a      	bhi.n	8000696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000680:	2200      	movs	r2, #0
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	f000 f8e7 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_InitTick+0x5c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x1c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x20>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <HAL_IncTick+0x20>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000008 	.word	0x20000008
 80006cc:	2000004c 	.word	0x2000004c

080006d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <HAL_GetTick+0x10>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	2000004c 	.word	0x2000004c

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f7ff ff90 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff49 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5e 	bl	800072c <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff90 	bl	800079c <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5f 	bl	8000748 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_FLASH_Unlock+0x40>)
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00d      	beq.n	80008de <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_FLASH_Unlock+0x40>)
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_FLASH_Unlock+0x44>)
 80008c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_FLASH_Unlock+0x40>)
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_FLASH_Unlock+0x48>)
 80008cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_FLASH_Unlock+0x40>)
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80008de:	79fb      	ldrb	r3, [r7, #7]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000
 80008f0:	45670123 	.word	0x45670123
 80008f4:	cdef89ab 	.word	0xcdef89ab

080008f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_FLASH_Lock+0x1c>)
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_FLASH_Lock+0x1c>)
 8000902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000906:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff fed6 	bl	80006d0 <HAL_GetTick>
 8000924:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000926:	e010      	b.n	800094a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d00c      	beq.n	800094a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d007      	beq.n	8000946 <FLASH_WaitForLastOperation+0x2e>
 8000936:	f7ff fecb 	bl	80006d0 <HAL_GetTick>
 800093a:	4602      	mov	r2, r0
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	d201      	bcs.n	800094a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e025      	b.n	8000996 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1e8      	bne.n	8000928 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 8000964:	2220      	movs	r2, #32
 8000966:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10b      	bne.n	800098c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800097c:	2b00      	cmp	r3, #0
 800097e:	d105      	bne.n	800098c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <FLASH_WaitForLastOperation+0x88>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800098c:	f000 f80a 	bl	80009a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d009      	beq.n	80009ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 80009c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d009      	beq.n	80009ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 80009e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <FLASH_SetErrorCode+0x9c>)
 8000a04:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f240 1201 	movw	r2, #257	; 0x101
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <FLASH_SetErrorCode+0x86>
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	61d3      	str	r3, [r2, #28]
}  
 8000a28:	e002      	b.n	8000a30 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <FLASH_SetErrorCode+0x98>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60d3      	str	r3, [r2, #12]
}  
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	20000050 	.word	0x20000050

08000a44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <HAL_FLASHEx_Erase+0xd0>)
 8000a58:	7e1b      	ldrb	r3, [r3, #24]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d101      	bne.n	8000a62 <HAL_FLASHEx_Erase+0x1e>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e053      	b.n	8000b0a <HAL_FLASHEx_Erase+0xc6>
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_FLASHEx_Erase+0xd0>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d116      	bne.n	8000a9e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a74:	f7ff ff50 	bl	8000918 <FLASH_WaitForLastOperation>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d141      	bne.n	8000b02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 f84c 	bl	8000b1c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a88:	f7ff ff46 	bl	8000918 <FLASH_WaitForLastOperation>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_FLASHEx_Erase+0xd4>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <HAL_FLASHEx_Erase+0xd4>)
 8000a96:	f023 0304 	bic.w	r3, r3, #4
 8000a9a:	6113      	str	r3, [r2, #16]
 8000a9c:	e031      	b.n	8000b02 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aa2:	f7ff ff39 	bl	8000918 <FLASH_WaitForLastOperation>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d12a      	bne.n	8000b02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	e019      	b.n	8000af0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f000 f849 	bl	8000b54 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ac6:	f7ff ff27 	bl	8000918 <FLASH_WaitForLastOperation>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_FLASHEx_Erase+0xd4>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_FLASHEx_Erase+0xd4>)
 8000ad4:	f023 0302 	bic.w	r3, r3, #2
 8000ad8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	601a      	str	r2, [r3, #0]
            break;
 8000ae6:	e00c      	b.n	8000b02 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	029a      	lsls	r2, r3, #10
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4413      	add	r3, r2
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3dc      	bcc.n	8000abc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <HAL_FLASHEx_Erase+0xd0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]

  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000050 	.word	0x20000050
 8000b18:	40022000 	.word	0x40022000

08000b1c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <FLASH_MassErase+0x30>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <FLASH_MassErase+0x34>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <FLASH_MassErase+0x34>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <FLASH_MassErase+0x34>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <FLASH_MassErase+0x34>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000050 	.word	0x20000050
 8000b50:	40022000 	.word	0x40022000

08000b54 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <FLASH_PageErase+0x38>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <FLASH_PageErase+0x3c>)
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <FLASH_PageErase+0x3c>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <FLASH_PageErase+0x3c>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <FLASH_PageErase+0x3c>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <FLASH_PageErase+0x3c>)
 8000b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000050 	.word	0x20000050
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e272      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8087 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb4:	4b92      	ldr	r3, [pc, #584]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d00c      	beq.n	8000bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4b8f      	ldr	r3, [pc, #572]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d112      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	4b89      	ldr	r3, [pc, #548]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d06c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d168      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e24c      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x76>
 8000bfc:	4b80      	ldr	r3, [pc, #512]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a7f      	ldr	r2, [pc, #508]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e02e      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x98>
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0xbc>
 8000c36:	4b72      	ldr	r3, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b6f      	ldr	r3, [pc, #444]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a6e      	ldr	r2, [pc, #440]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a6a      	ldr	r2, [pc, #424]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd2e 	bl	80006d0 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd2a 	bl	80006d0 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e200      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe4>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fd1a 	bl	80006d0 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fd16 	bl	80006d0 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1ec      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x10c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cce:	4b4c      	ldr	r3, [pc, #304]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c0      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4939      	ldr	r1, [pc, #228]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fccf 	bl	80006d0 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fccb 	bl	80006d0 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4927      	ldr	r1, [pc, #156]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fcae 	bl	80006d0 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fcaa 	bl	80006d0 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e180      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d019      	beq.n	8000dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc8e 	bl	80006d0 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc8a 	bl	80006d0 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e160      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 fa9c 	bl	8001314 <RCC_Delay>
 8000ddc:	e01c      	b.n	8000e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc74 	bl	80006d0 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc70 	bl	80006d0 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d908      	bls.n	8000e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e146      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b92      	ldr	r3, [pc, #584]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e9      	bne.n	8000dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a6 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a87      	ldr	r2, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b82      	ldr	r3, [pc, #520]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7e      	ldr	r2, [pc, #504]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fc31 	bl	80006d0 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fc2d 	bl	80006d0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e103      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x312>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e02d      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x334>
 8000eae:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x356>
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a60      	ldr	r2, [pc, #384]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000eea:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a5a      	ldr	r2, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a57      	ldr	r2, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fbe1 	bl	80006d0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fbdd 	bl	80006d0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0b1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ee      	beq.n	8000f12 <HAL_RCC_OscConfig+0x37e>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fbcb 	bl	80006d0 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fbc7 	bl	80006d0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4b40      	ldr	r3, [pc, #256]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d105      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d061      	beq.n	800104c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d146      	bne.n	800101e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb9b 	bl	80006d0 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fb97 	bl	80006d0 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e06d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4921      	ldr	r1, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a19      	ldr	r1, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	491b      	ldr	r1, [pc, #108]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb6b 	bl	80006d0 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb67 	bl	80006d0 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fb54 	bl	80006d0 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb50 	bl	80006d0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x498>
 800104a:	e01e      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e019      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0d0      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d910      	bls.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4965      	ldr	r1, [pc, #404]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b8      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	494d      	ldr	r1, [pc, #308]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d040      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e073      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff faa2 	bl	80006d0 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa9e 	bl	80006d0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e053      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d210      	bcs.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e032      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4916      	ldr	r1, [pc, #88]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f000 f821 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	490a      	ldr	r1, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 8001240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x1d0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fa00 	bl	800064c <HAL_InitTick>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	080017dc 	.word	0x080017dc
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d002      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x30>
 8001296:	2b08      	cmp	r3, #8
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x36>
 800129a:	e027      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 800129e:	613b      	str	r3, [r7, #16]
      break;
 80012a0:	e027      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0c5b      	lsrs	r3, r3, #17
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	fb03 f202 	mul.w	r2, r3, r2
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e004      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
      break;
 80012ea:	e002      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f2:	693b      	ldr	r3, [r7, #16]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	007a1200 	.word	0x007a1200
 8001308:	080017ec 	.word	0x080017ec
 800130c:	080017fc 	.word	0x080017fc
 8001310:	003d0900 	.word	0x003d0900

08001314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <RCC_Delay+0x34>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <RCC_Delay+0x38>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0a5b      	lsrs	r3, r3, #9
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001330:	bf00      	nop
  }
  while (Delay --);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	60fa      	str	r2, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <RCC_Delay+0x1c>
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000000 	.word	0x20000000
 800134c:	10624dd3 	.word	0x10624dd3

08001350 <memset>:
 8001350:	4603      	mov	r3, r0
 8001352:	4402      	add	r2, r0
 8001354:	4293      	cmp	r3, r2
 8001356:	d100      	bne.n	800135a <memset+0xa>
 8001358:	4770      	bx	lr
 800135a:	f803 1b01 	strb.w	r1, [r3], #1
 800135e:	e7f9      	b.n	8001354 <memset+0x4>

08001360 <__libc_init_array>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	2600      	movs	r6, #0
 8001364:	4d0c      	ldr	r5, [pc, #48]	; (8001398 <__libc_init_array+0x38>)
 8001366:	4c0d      	ldr	r4, [pc, #52]	; (800139c <__libc_init_array+0x3c>)
 8001368:	1b64      	subs	r4, r4, r5
 800136a:	10a4      	asrs	r4, r4, #2
 800136c:	42a6      	cmp	r6, r4
 800136e:	d109      	bne.n	8001384 <__libc_init_array+0x24>
 8001370:	f000 f828 	bl	80013c4 <_init>
 8001374:	2600      	movs	r6, #0
 8001376:	4d0a      	ldr	r5, [pc, #40]	; (80013a0 <__libc_init_array+0x40>)
 8001378:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <__libc_init_array+0x44>)
 800137a:	1b64      	subs	r4, r4, r5
 800137c:	10a4      	asrs	r4, r4, #2
 800137e:	42a6      	cmp	r6, r4
 8001380:	d105      	bne.n	800138e <__libc_init_array+0x2e>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	f855 3b04 	ldr.w	r3, [r5], #4
 8001388:	4798      	blx	r3
 800138a:	3601      	adds	r6, #1
 800138c:	e7ee      	b.n	800136c <__libc_init_array+0xc>
 800138e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001392:	4798      	blx	r3
 8001394:	3601      	adds	r6, #1
 8001396:	e7f2      	b.n	800137e <__libc_init_array+0x1e>
 8001398:	08001800 	.word	0x08001800
 800139c:	08001800 	.word	0x08001800
 80013a0:	08001800 	.word	0x08001800
 80013a4:	08001804 	.word	0x08001804

080013a8 <memcpy>:
 80013a8:	440a      	add	r2, r1
 80013aa:	4291      	cmp	r1, r2
 80013ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80013b0:	d100      	bne.n	80013b4 <memcpy+0xc>
 80013b2:	4770      	bx	lr
 80013b4:	b510      	push	{r4, lr}
 80013b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013ba:	4291      	cmp	r1, r2
 80013bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013c0:	d1f9      	bne.n	80013b6 <memcpy+0xe>
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <_init>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr

080013d0 <_fini>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	bf00      	nop
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr
