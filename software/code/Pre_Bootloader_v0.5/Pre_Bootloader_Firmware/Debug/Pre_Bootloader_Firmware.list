
Pre_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08001184  08001184  00011184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a8  080015a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015a8  080015a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015a8  080015a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a8  080015a8  000115a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015ac  080015ac  000115ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  080015bc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080015bc  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004d1d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b21  00000000  00000000  00024d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000019aa  00000000  00000000  000268b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000418  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ba  00000000  00000000  00028678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016a72  00000000  00000000  00028c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007f94  00000000  00000000  0003f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008005d  00000000  00000000  00047638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000960  00000000  00000000  000c7698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ba  00000000  00000000  000c7ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800116c 	.word	0x0800116c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800116c 	.word	0x0800116c

0800014c <crc32_mpeg2>:
    {
    	return checksum;
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 800014c:	1e4b      	subs	r3, r1, #1
 800014e:	3303      	adds	r3, #3
 8000150:	d813      	bhi.n	800017a <crc32_mpeg2+0x2e>
 8000152:	4602      	mov	r2, r0
    uint32_t checksum = 0xFFFFFFFF;
 8000154:	f04f 30ff 	mov.w	r0, #4294967295
 8000158:	4411      	add	r1, r2
{
 800015a:	b410      	push	{r4}
 800015c:	4c08      	ldr	r4, [pc, #32]	; (8000180 <crc32_mpeg2+0x34>)
 800015e:	4402      	add	r2, r0
 8000160:	4401      	add	r1, r0
    {
        uint8_t top = (uint8_t) (checksum >> 24);
        top ^= p_data[i];
 8000162:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        checksum = (checksum << 8) ^ crc_table[top];
 8000166:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
 800016a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    for (unsigned int i=0; i<data_length; i++)
 800016e:	4291      	cmp	r1, r2
        checksum = (checksum << 8) ^ crc_table[top];
 8000170:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
    for (unsigned int i=0; i<data_length; i++)
 8000174:	d1f5      	bne.n	8000162 <crc32_mpeg2+0x16>
    }
    return checksum;
}
 8000176:	bc10      	pop	{r4}
 8000178:	4770      	bx	lr
    uint32_t checksum = 0xFFFFFFFF;
 800017a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800017e:	4770      	bx	lr
 8000180:	08001184 	.word	0x08001184

08000184 <page_erase>:

	return ret;
}

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8000184:	b5d0      	push	{r4, r6, r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	4604      	mov	r4, r0
	HAL_StatusTypeDef ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 800018a:	f000 fb39 	bl	8000800 <HAL_FLASH_Unlock>
	return FIRM_UPDT_CONF_EC_OK;
}

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 800018e:	2801      	cmp	r0, #1
 8000190:	d006      	beq.n	80001a0 <page_erase+0x1c>
 8000192:	1e83      	subs	r3, r0, #2
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b01      	cmp	r3, #1
 8000198:	d805      	bhi.n	80001a6 <page_erase+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 800019a:	2002      	movs	r0, #2
}
 800019c:	b006      	add	sp, #24
 800019e:	bdd0      	pop	{r4, r6, r7, pc}
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 80001a0:	2004      	movs	r0, #4
}
 80001a2:	b006      	add	sp, #24
 80001a4:	bdd0      	pop	{r4, r6, r7, pc}
	if (ret != HAL_OK)
 80001a6:	2800      	cmp	r0, #0
 80001a8:	d1f8      	bne.n	800019c <page_erase+0x18>
	EraseInitStruct.NbPages      = 1U;
 80001aa:	2301      	movs	r3, #1
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80001ac:	2600      	movs	r6, #0
 80001ae:	2701      	movs	r7, #1
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80001b0:	a901      	add	r1, sp, #4
 80001b2:	a802      	add	r0, sp, #8
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80001b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 80001b8:	9404      	str	r4, [sp, #16]
	EraseInitStruct.NbPages      = 1U;
 80001ba:	9305      	str	r3, [sp, #20]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80001bc:	f000 fc96 	bl	8000aec <HAL_FLASHEx_Erase>
  switch (HAL_status)
 80001c0:	2801      	cmp	r0, #1
 80001c2:	d0ed      	beq.n	80001a0 <page_erase+0x1c>
 80001c4:	1e83      	subs	r3, r0, #2
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d9e6      	bls.n	800019a <page_erase+0x16>
	if (ret != HAL_OK)
 80001cc:	2800      	cmp	r0, #0
 80001ce:	d1e5      	bne.n	800019c <page_erase+0x18>
	ret = HAL_FLASH_Lock();
 80001d0:	f000 fc2c 	bl	8000a2c <HAL_FLASH_Lock>
  switch (HAL_status)
 80001d4:	2801      	cmp	r0, #1
 80001d6:	d0e3      	beq.n	80001a0 <page_erase+0x1c>
 80001d8:	1e83      	subs	r3, r0, #2
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d9dc      	bls.n	800019a <page_erase+0x16>
 80001e0:	e7dc      	b.n	800019c <page_erase+0x18>
 80001e2:	bf00      	nop

080001e4 <firmware_update_configurations_init>:
{
 80001e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80001e6:	4b2e      	ldr	r3, [pc, #184]	; (80002a0 <firmware_update_configurations_init+0xbc>)
 80001e8:	4f2e      	ldr	r7, [pc, #184]	; (80002a4 <firmware_update_configurations_init+0xc0>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80001ee:	4c2e      	ldr	r4, [pc, #184]	; (80002a8 <firmware_update_configurations_init+0xc4>)
 80001f0:	4d2e      	ldr	r5, [pc, #184]	; (80002ac <firmware_update_configurations_init+0xc8>)
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80001f2:	603b      	str	r3, [r7, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80001f4:	e005      	b.n	8000202 <firmware_update_configurations_init+0x1e>
 80001f6:	42ab      	cmp	r3, r5
 80001f8:	4620      	mov	r0, r4
 80001fa:	f04f 0101 	mov.w	r1, #1
 80001fe:	d02c      	beq.n	800025a <firmware_update_configurations_init+0x76>
 8000200:	461c      	mov	r4, r3
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8000202:	7fe2      	ldrb	r2, [r4, #31]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8000204:	f104 0320 	add.w	r3, r4, #32
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8000208:	2aff      	cmp	r2, #255	; 0xff
 800020a:	d1f4      	bne.n	80001f6 <firmware_update_configurations_init+0x12>
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 800020c:	7fc6      	ldrb	r6, [r0, #31]
 800020e:	2e00      	cmp	r6, #0
 8000210:	d1f1      	bne.n	80001f6 <firmware_update_configurations_init+0x12>
 8000212:	b101      	cbz	r1, 8000216 <firmware_update_configurations_init+0x32>
 8000214:	6038      	str	r0, [r7, #0]
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8000216:	211c      	movs	r1, #28
 8000218:	3004      	adds	r0, #4
 800021a:	f7ff ff97 	bl	800014c <crc32_mpeg2>
				if(cal_crc != p_most_recent_val->crc32)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	4282      	cmp	r2, r0
 8000224:	d10b      	bne.n	800023e <firmware_update_configurations_init+0x5a>
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8000226:	4a21      	ldr	r2, [pc, #132]	; (80002ac <firmware_update_configurations_init+0xc8>)
 8000228:	4294      	cmp	r4, r2
 800022a:	d032      	beq.n	8000292 <firmware_update_configurations_init+0xae>
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <firmware_update_configurations_init+0xc4>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d025      	beq.n	800027e <firmware_update_configurations_init+0x9a>
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8000232:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <firmware_update_configurations_init+0xcc>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d019      	beq.n	800026c <firmware_update_configurations_init+0x88>
 8000238:	2600      	movs	r6, #0
}
 800023a:	4630      	mov	r0, r6
 800023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <firmware_update_configurations_init+0xc4>)
 8000240:	f7ff ffa0 	bl	8000184 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8000244:	4606      	mov	r6, r0
 8000246:	b110      	cbz	r0, 800024e <firmware_update_configurations_init+0x6a>
						return FIRM_UPDT_CONF_EC_CRPT;
 8000248:	2605      	movs	r6, #5
}
 800024a:	4630      	mov	r0, r6
 800024c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 800024e:	4818      	ldr	r0, [pc, #96]	; (80002b0 <firmware_update_configurations_init+0xcc>)
 8000250:	f7ff ff98 	bl	8000184 <page_erase>
}
 8000254:	4630      	mov	r0, r6
					p_most_recent_val = NULL;
 8000256:	603e      	str	r6, [r7, #0]
}
 8000258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <firmware_update_configurations_init+0xd0>)
 800025c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d019      	beq.n	8000298 <firmware_update_configurations_init+0xb4>
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <firmware_update_configurations_init+0xbc>)
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <firmware_update_configurations_init+0xcc>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d1e5      	bne.n	8000238 <firmware_update_configurations_init+0x54>
 800026c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1e1      	bne.n	8000238 <firmware_update_configurations_init+0x54>
}
 8000274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <firmware_update_configurations_init+0xc4>)
 800027a:	f7ff bf83 	b.w	8000184 <page_erase>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <firmware_update_configurations_init+0xd0>)
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8000280:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1d8      	bne.n	800023a <firmware_update_configurations_init+0x56>
}
 8000288:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 800028c:	4808      	ldr	r0, [pc, #32]	; (80002b0 <firmware_update_configurations_init+0xcc>)
 800028e:	f7ff bf79 	b.w	8000184 <page_erase>
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8000292:	7fda      	ldrb	r2, [r3, #31]
 8000294:	2aff      	cmp	r2, #255	; 0xff
 8000296:	d1c9      	bne.n	800022c <firmware_update_configurations_init+0x48>
			p_most_recent_val = NULL;
 8000298:	2300      	movs	r3, #0
 800029a:	461e      	mov	r6, r3
 800029c:	603b      	str	r3, [r7, #0]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 800029e:	e7cc      	b.n	800023a <firmware_update_configurations_init+0x56>
 80002a0:	0801efe0 	.word	0x0801efe0
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	0801e000 	.word	0x0801e000
 80002ac:	0801f000 	.word	0x0801f000
 80002b0:	0801e800 	.word	0x0801e800
 80002b4:	0801ef00 	.word	0x0801ef00

080002b8 <firmware_update_configurations_read>:
	firmware_update_config_t *p_current_val = p_most_recent_val;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <firmware_update_configurations_read+0x38>)
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 80002ba:	490e      	ldr	r1, [pc, #56]	; (80002f4 <firmware_update_configurations_read+0x3c>)
	firmware_update_config_t *p_current_val = p_most_recent_val;
 80002bc:	681b      	ldr	r3, [r3, #0]
{
 80002be:	4602      	mov	r2, r0
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	bf08      	it	eq
 80002c4:	460b      	moveq	r3, r1
{
 80002c6:	b510      	push	{r4, lr}
	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 80002c8:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80002cc:	6899      	ldr	r1, [r3, #8]
 80002ce:	68dc      	ldr	r4, [r3, #12]
 80002d0:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80002d4:	f8c2 c000 	str.w	ip, [r2]
 80002d8:	6051      	str	r1, [r2, #4]
 80002da:	6094      	str	r4, [r2, #8]
 80002dc:	f8c2 e00c 	str.w	lr, [r2, #12]
 80002e0:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80002e4:	6999      	ldr	r1, [r3, #24]
 80002e6:	f8c2 c010 	str.w	ip, [r2, #16]
 80002ea:	6151      	str	r1, [r2, #20]
}
 80002ec:	2000      	movs	r0, #0
 80002ee:	bd10      	pop	{r4, pc}
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	0801e000 	.word	0x0801e000

080002f8 <firmware_update_configurations_write>:
{
 80002f8:	4684      	mov	ip, r0
	p_data->reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002fe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
{
 8000302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000306:	b088      	sub	sp, #32
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8000308:	6800      	ldr	r0, [r0, #0]
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 800030a:	9207      	str	r2, [sp, #28]
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 800030c:	f8dc 1004 	ldr.w	r1, [ip, #4]
	p_data->reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8000310:	f88c 3010 	strb.w	r3, [ip, #16]
 8000314:	f88c 3011 	strb.w	r3, [ip, #17]
 8000318:	f88c 3012 	strb.w	r3, [ip, #18]
 800031c:	f88c 3013 	strb.w	r3, [ip, #19]
	p_data->reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8000320:	f88c 3014 	strb.w	r3, [ip, #20]
 8000324:	f88c 3015 	strb.w	r3, [ip, #21]
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8000328:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800032c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000330:	f10d 0e04 	add.w	lr, sp, #4
 8000334:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000338:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800033c:	f8dc 1014 	ldr.w	r1, [ip, #20]
	if (p_most_recent_val != NULL)
 8000340:	4d2f      	ldr	r5, [pc, #188]	; (8000400 <firmware_update_configurations_write+0x108>)
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8000342:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8000346:	211c      	movs	r1, #28
 8000348:	a801      	add	r0, sp, #4
 800034a:	f7ff feff 	bl	800014c <crc32_mpeg2>
	if (p_most_recent_val != NULL)
 800034e:	682c      	ldr	r4, [r5, #0]
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8000350:	9000      	str	r0, [sp, #0]
	if (p_most_recent_val != NULL)
 8000352:	2c00      	cmp	r4, #0
 8000354:	d047      	beq.n	80003e6 <firmware_update_configurations_write+0xee>
		if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8000356:	4a2b      	ldr	r2, [pc, #172]	; (8000404 <firmware_update_configurations_write+0x10c>)
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8000358:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <firmware_update_configurations_write+0x110>)
		p_next_val = p_most_recent_val + 1;
 800035a:	3420      	adds	r4, #32
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 800035c:	4294      	cmp	r4, r2
 800035e:	bf08      	it	eq
 8000360:	461c      	moveq	r4, r3
	ret = HAL_FLASH_Unlock();
 8000362:	f000 fa4d 	bl	8000800 <HAL_FLASH_Unlock>
  switch (HAL_status)
 8000366:	2801      	cmp	r0, #1
 8000368:	d019      	beq.n	800039e <firmware_update_configurations_write+0xa6>
 800036a:	1e82      	subs	r2, r0, #2
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	2a01      	cmp	r2, #1
 8000370:	d803      	bhi.n	800037a <firmware_update_configurations_write+0x82>
		return FIRM_UPDT_CONF_EC_NR;
 8000372:	2002      	movs	r0, #2
}
 8000374:	b008      	add	sp, #32
 8000376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ret != HAL_OK)
 800037a:	2800      	cmp	r0, #0
 800037c:	d1fa      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
 800037e:	4627      	mov	r7, r4
 8000380:	f1ad 0604 	sub.w	r6, sp, #4
 8000384:	f10d 081c 	add.w	r8, sp, #28
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000388:	2300      	movs	r3, #0
 800038a:	4639      	mov	r1, r7
 800038c:	2002      	movs	r0, #2
 800038e:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8000392:	f000 fa5b 	bl	800084c <HAL_FLASH_Program>
  switch (HAL_status)
 8000396:	1e83      	subs	r3, r0, #2
 8000398:	2801      	cmp	r0, #1
 800039a:	b2db      	uxtb	r3, r3
 800039c:	d103      	bne.n	80003a6 <firmware_update_configurations_write+0xae>
		return FIRM_UPDT_CONF_EC_ERR;
 800039e:	2004      	movs	r0, #4
}
 80003a0:	b008      	add	sp, #32
 80003a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (HAL_status)
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d9e3      	bls.n	8000372 <firmware_update_configurations_write+0x7a>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 80003aa:	3704      	adds	r7, #4
		if (ret != HAL_OK)
 80003ac:	2800      	cmp	r0, #0
 80003ae:	d1e1      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 80003b0:	4546      	cmp	r6, r8
 80003b2:	d1e9      	bne.n	8000388 <firmware_update_configurations_write+0x90>
	ret = HAL_FLASH_Lock();
 80003b4:	f000 fb3a 	bl	8000a2c <HAL_FLASH_Lock>
  switch (HAL_status)
 80003b8:	2801      	cmp	r0, #1
 80003ba:	d0f0      	beq.n	800039e <firmware_update_configurations_write+0xa6>
 80003bc:	1e83      	subs	r3, r0, #2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d9d6      	bls.n	8000372 <firmware_update_configurations_write+0x7a>
	if (ret != HAL_OK)
 80003c4:	2800      	cmp	r0, #0
 80003c6:	d1d5      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <firmware_update_configurations_write+0x110>)
	p_most_recent_val = p_next_val;
 80003ca:	602c      	str	r4, [r5, #0]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 80003cc:	429c      	cmp	r4, r3
 80003ce:	d00c      	beq.n	80003ea <firmware_update_configurations_write+0xf2>
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <firmware_update_configurations_write+0x114>)
 80003d2:	429c      	cmp	r4, r3
 80003d4:	d1ce      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
 80003d6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1ca      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 80003de:	480a      	ldr	r0, [pc, #40]	; (8000408 <firmware_update_configurations_write+0x110>)
 80003e0:	f7ff fed0 	bl	8000184 <page_erase>
	return ret;
 80003e4:	e7c6      	b.n	8000374 <firmware_update_configurations_write+0x7c>
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 80003e6:	4c08      	ldr	r4, [pc, #32]	; (8000408 <firmware_update_configurations_write+0x110>)
 80003e8:	e7bb      	b.n	8000362 <firmware_update_configurations_write+0x6a>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 80003ea:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 80003ee:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1be      	bne.n	8000374 <firmware_update_configurations_write+0x7c>
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <firmware_update_configurations_write+0x114>)
 80003f8:	f7ff fec4 	bl	8000184 <page_erase>
 80003fc:	e7ba      	b.n	8000374 <firmware_update_configurations_write+0x7c>
 80003fe:	bf00      	nop
 8000400:	2000002c 	.word	0x2000002c
 8000404:	0801f000 	.word	0x0801f000
 8000408:	0801e000 	.word	0x0801e000
 800040c:	0801e800 	.word	0x0801e800

08000410 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	2220      	movs	r2, #32
{
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	2100      	movs	r1, #0
 8000418:	eb0d 0002 	add.w	r0, sp, r2
 800041c:	f000 fe7a 	bl	8001114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000420:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000422:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000424:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000432:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000436:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f000 fbba 	bl	8000bb0 <HAL_RCC_OscConfig>
 800043c:	b108      	cbz	r0, 8000442 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	4601      	mov	r1, r0
 8000444:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000446:	2201      	movs	r2, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000448:	2390      	movs	r3, #144	; 0x90
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000450:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000454:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000456:	f000 fd9b 	bl	8000f90 <HAL_RCC_ClockConfig>
 800045a:	b108      	cbz	r0, 8000460 <SystemClock_Config+0x50>
 800045c:	b672      	cpsid	i
  while (1)
 800045e:	e7fe      	b.n	800045e <SystemClock_Config+0x4e>
}
 8000460:	b011      	add	sp, #68	; 0x44
 8000462:	bd30      	pop	{r4, r5, pc}

08000464 <main>:
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b083      	sub	sp, #12
  HAL_Init();
 8000468:	f000 f92c 	bl	80006c4 <HAL_Init>
  SystemClock_Config();
 800046c:	f7ff ffd0 	bl	8000410 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <main+0xa0>)
 8000472:	4d25      	ldr	r5, [pc, #148]	; (8000508 <main+0xa4>)
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	f042 0220 	orr.w	r2, r2, #32
 800047a:	619a      	str	r2, [r3, #24]
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0320 	and.w	r3, r3, #32
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	9b01      	ldr	r3, [sp, #4]
	uint32_t end_tick = HAL_GetTick() + 500;
 8000486:	f000 f93b 	bl	8000700 <HAL_GetTick>
	if (attempts > 2)
 800048a:	782b      	ldrb	r3, [r5, #0]
	uint32_t end_tick = HAL_GetTick() + 500;
 800048c:	f500 74fa 	add.w	r4, r0, #500	; 0x1f4
	if (attempts > 2)
 8000490:	2b02      	cmp	r3, #2
 8000492:	d817      	bhi.n	80004c4 <main+0x60>
	while (current_tick < end_tick)
 8000494:	b11c      	cbz	r4, 800049e <main+0x3a>
		current_tick = HAL_GetTick();
 8000496:	f000 f933 	bl	8000700 <HAL_GetTick>
	while (current_tick < end_tick)
 800049a:	4284      	cmp	r4, r0
 800049c:	d8fb      	bhi.n	8000496 <main+0x32>
	ret = firmware_update_configurations_init();
 800049e:	f7ff fea1 	bl	80001e4 <firmware_update_configurations_init>
    attempts++;
 80004a2:	782b      	ldrb	r3, [r5, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	702b      	strb	r3, [r5, #0]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d1ec      	bne.n	8000486 <main+0x22>
	firmware_update_configurations_read(&fw_config);
 80004ac:	4c17      	ldr	r4, [pc, #92]	; (800050c <main+0xa8>)
 80004ae:	4620      	mov	r0, r4
 80004b0:	f7ff ff02 	bl	80002b8 <firmware_update_configurations_read>
  switch (fw_config.is_bl_fw_install_pending)
 80004b4:	7de3      	ldrb	r3, [r4, #23]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d009      	beq.n	80004ce <main+0x6a>
 80004ba:	3b01      	subs	r3, #1
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2bfd      	cmp	r3, #253	; 0xfd
 80004c0:	d801      	bhi.n	80004c6 <main+0x62>
		  while (1);
 80004c2:	e7fe      	b.n	80004c2 <main+0x5e>
	  while (1);
 80004c4:	e7fe      	b.n	80004c4 <main+0x60>
	void (*bl_reset_handler) (void) = (void*) (*(volatile uint32_t *) (BOOTLOADER_FIRMWARE_RESET_HANDLER_ADDRESS));
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <main+0xac>)
 80004c8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
	bl_reset_handler();
 80004cc:	4798      	blx	r3
    if ((fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 80004ce:	68a1      	ldr	r1, [r4, #8]
 80004d0:	1e4b      	subs	r3, r1, #1
 80004d2:	3303      	adds	r3, #3
 80004d4:	d80b      	bhi.n	80004ee <main+0x8a>
    if (fw_config.App_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
 80004d6:	68e3      	ldr	r3, [r4, #12]
 80004d8:	3301      	adds	r3, #1
 80004da:	d008      	beq.n	80004ee <main+0x8a>
	uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <main+0xb0>)
 80004de:	f7ff fe35 	bl	800014c <crc32_mpeg2>
    if (cal_crc != fw_config.App_fw_rec_crc)
 80004e2:	68e3      	ldr	r3, [r4, #12]
 80004e4:	4298      	cmp	r0, r3
 80004e6:	d102      	bne.n	80004ee <main+0x8a>
		  if ((validate_application_firmware()!=PRE_BL_EC_OK) || (fw_config.is_bl_fw_stored_in_app_fw!=BT_FW_STORED_IN_APP_FW))
 80004e8:	7da3      	ldrb	r3, [r4, #22]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d003      	beq.n	80004f6 <main+0x92>
	void (*bl_reset_handler) (void) = (void*) (*(volatile uint32_t *) (BOOTLOADER_FIRMWARE_RESET_HANDLER_ADDRESS));
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <main+0xac>)
 80004f0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
	bl_reset_handler();
 80004f4:	4798      	blx	r3
		  ret = install_bl_stored_in_app_fw(&fw_config);
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <main+0xa8>)
 80004f8:	f000 f80e 	bl	8000518 <install_bl_stored_in_app_fw>
		  HAL_NVIC_SystemReset();
 80004fc:	f000 f956 	bl	80007ac <HAL_NVIC_SystemReset>
 8000500:	e7df      	b.n	80004c2 <main+0x5e>
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	20000030 	.word	0x20000030
 800050c:	20000034 	.word	0x20000034
 8000510:	08001000 	.word	0x08001000
 8000514:	08008000 	.word	0x08008000

08000518 <install_bl_stored_in_app_fw>:
 * @date September 26, 2023.
 */
static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

ETX_OTA_Status install_bl_stored_in_app_fw(firmware_update_config_data_t *p_fw_config)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
	uint16_t bytes_flashed = 0;
	/**	<b>Local variable p_data:</b> Pointer to the data at which a Bootloader Firmware Image pending to be installed should be located at but in \c uint32_t Type. */
	uint32_t *p_data = (uint32_t *) ETX_APP_FLASH_ADDR;

    /* Validating that length of the Bootloader Firmware Image pending to be installed is perfectly divisible by 4 bytes. */
    if ((p_fw_config->App_fw_size)%4 != 0)
 800051a:	6883      	ldr	r3, [r0, #8]
{
 800051c:	b086      	sub	sp, #24
    if ((p_fw_config->App_fw_size)%4 != 0)
 800051e:	f013 0403 	ands.w	r4, r3, #3
 8000522:	d10b      	bne.n	800053c <install_bl_stored_in_app_fw+0x24>
 8000524:	4605      	mov	r5, r0
    {
        return ETX_OTA_EC_ERR;
    }

	/* Unlock the Flash Memory of our MCU/MPU. */
	ret = HAL_FLASH_Unlock();
 8000526:	f000 f96b 	bl	8000800 <HAL_FLASH_Unlock>
	return ret;
}

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 800052a:	2801      	cmp	r0, #1
 800052c:	d006      	beq.n	800053c <install_bl_stored_in_app_fw+0x24>
 800052e:	1e82      	subs	r2, r0, #2
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	2a01      	cmp	r2, #1
 8000534:	d805      	bhi.n	8000542 <install_bl_stored_in_app_fw+0x2a>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return ETX_OTA_EC_NR;
 8000536:	2002      	movs	r0, #2
}
 8000538:	b006      	add	sp, #24
 800053a:	bd70      	pop	{r4, r5, r6, pc}
        return ETX_OTA_EC_ERR;
 800053c:	2004      	movs	r0, #4
}
 800053e:	b006      	add	sp, #24
 8000540:	bd70      	pop	{r4, r5, r6, pc}
	if(ret != HAL_OK)
 8000542:	2800      	cmp	r0, #0
 8000544:	d1fb      	bne.n	800053e <install_bl_stored_in_app_fw+0x26>
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8000546:	2201      	movs	r2, #1
	EraseInitStruct.NbPages      = ETX_BL_FLASH_PAGES_SIZE;
 8000548:	231a      	movs	r3, #26
	EraseInitStruct.PageAddress  = ETX_BL_FLASH_ADDR;
 800054a:	4922      	ldr	r1, [pc, #136]	; (80005d4 <install_bl_stored_in_app_fw+0xbc>)
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 800054c:	a802      	add	r0, sp, #8
	EraseInitStruct.PageAddress  = ETX_BL_FLASH_ADDR;
 800054e:	9104      	str	r1, [sp, #16]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8000550:	a901      	add	r1, sp, #4
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8000552:	9402      	str	r4, [sp, #8]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8000554:	9203      	str	r2, [sp, #12]
	EraseInitStruct.NbPages      = ETX_BL_FLASH_PAGES_SIZE;
 8000556:	9305      	str	r3, [sp, #20]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8000558:	f000 fac8 	bl	8000aec <HAL_FLASHEx_Erase>
  switch (HAL_status)
 800055c:	2801      	cmp	r0, #1
 800055e:	d0ed      	beq.n	800053c <install_bl_stored_in_app_fw+0x24>
 8000560:	1e82      	subs	r2, r0, #2
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	2a01      	cmp	r2, #1
 8000566:	d9e6      	bls.n	8000536 <install_bl_stored_in_app_fw+0x1e>
	if (ret != HAL_OK)
 8000568:	2800      	cmp	r0, #0
 800056a:	d1e8      	bne.n	800053e <install_bl_stored_in_app_fw+0x26>
	for ( ; bytes_flashed<p_fw_config->App_fw_size; bytes_flashed+=4)
 800056c:	68ab      	ldr	r3, [r5, #8]
 800056e:	b1eb      	cbz	r3, 80005ac <install_bl_stored_in_app_fw+0x94>
	uint16_t bytes_flashed = 0;
 8000570:	4626      	mov	r6, r4
								p_data[bytes_flashed/4]);
 8000572:	08b2      	lsrs	r2, r6, #2
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 800057a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800057e:	f104 6100 	add.w	r1, r4, #134217728	; 0x8000000
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2002      	movs	r0, #2
 8000588:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800058c:	f000 f95e 	bl	800084c <HAL_FLASH_Program>
  switch (HAL_status)
 8000590:	1e82      	subs	r2, r0, #2
 8000592:	2801      	cmp	r0, #1
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	d0d1      	beq.n	800053c <install_bl_stored_in_app_fw+0x24>
 8000598:	2a01      	cmp	r2, #1
 800059a:	d9cc      	bls.n	8000536 <install_bl_stored_in_app_fw+0x1e>
	for ( ; bytes_flashed<p_fw_config->App_fw_size; bytes_flashed+=4)
 800059c:	3604      	adds	r6, #4
 800059e:	b2b6      	uxth	r6, r6
		if (ret != HAL_OK)
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d1cc      	bne.n	800053e <install_bl_stored_in_app_fw+0x26>
	for ( ; bytes_flashed<p_fw_config->App_fw_size; bytes_flashed+=4)
 80005a4:	68ab      	ldr	r3, [r5, #8]
 80005a6:	4634      	mov	r4, r6
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d3e2      	bcc.n	8000572 <install_bl_stored_in_app_fw+0x5a>
	ret = HAL_FLASH_Lock();
 80005ac:	f000 fa3e 	bl	8000a2c <HAL_FLASH_Lock>
  switch (HAL_status)
 80005b0:	2801      	cmp	r0, #1
 80005b2:	d0c3      	beq.n	800053c <install_bl_stored_in_app_fw+0x24>
 80005b4:	1e83      	subs	r3, r0, #2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d9bc      	bls.n	8000536 <install_bl_stored_in_app_fw+0x1e>
	if (ret != HAL_OK)
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1be      	bne.n	800053e <install_bl_stored_in_app_fw+0x26>
	p_fw_config->BL_fw_size = p_fw_config->App_fw_size;
 80005c0:	68eb      	ldr	r3, [r5, #12]
 80005c2:	68aa      	ldr	r2, [r5, #8]
	p_fw_config->is_bl_fw_install_pending = NOT_PENDING;
 80005c4:	75e8      	strb	r0, [r5, #23]
	p_fw_config->BL_fw_size = p_fw_config->App_fw_size;
 80005c6:	602a      	str	r2, [r5, #0]
    ret = firmware_update_configurations_write(p_fw_config);
 80005c8:	4628      	mov	r0, r5
	p_fw_config->BL_fw_size = p_fw_config->App_fw_size;
 80005ca:	606b      	str	r3, [r5, #4]
    ret = firmware_update_configurations_write(p_fw_config);
 80005cc:	f7ff fe94 	bl	80002f8 <firmware_update_configurations_write>
	return ret;
 80005d0:	e7b5      	b.n	800053e <install_bl_stored_in_app_fw+0x26>
 80005d2:	bf00      	nop
 80005d4:	08001800 	.word	0x08001800

080005d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_MspInit+0x2c>)
{
 80005da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	619a      	str	r2, [r3, #24]
 80005e4:	699a      	ldr	r2, [r3, #24]
 80005e6:	f002 0201 	and.w	r2, r2, #1
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	69da      	ldr	r2, [r3, #28]
 80005f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005f4:	61da      	str	r2, [r3, #28]
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000600:	b002      	add	sp, #8
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler>
 800060a:	bf00      	nop

0800060c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <HardFault_Handler>
 800060e:	bf00      	nop

08000610 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler>
 8000612:	bf00      	nop

08000614 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <BusFault_Handler>
 8000616:	bf00      	nop

08000618 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler>
 800061a:	bf00      	nop

0800061c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <DebugMon_Handler>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <PendSV_Handler>:
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 b85e 	b.w	80006e8 <HAL_IncTick>

0800062c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000630:	f7ff fffc 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <LoopFillZerobss+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800064c:	4c09      	ldr	r4, [pc, #36]	; (8000674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065a:	f000 fd63 	bl	8001124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff ff01 	bl	8000464 <main>
  bx lr
 8000662:	4770      	bx	lr
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800066c:	080015b0 	.word	0x080015b0
  ldr r2, =_sbss
 8000670:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000674:	20000070 	.word	0x20000070

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <HAL_InitTick+0x3c>)
{
 8000684:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000686:	7811      	ldrb	r1, [r2, #0]
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_InitTick+0x40>)
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	fbb2 f0f3 	udiv	r0, r2, r3
 8000694:	f000 f89c 	bl	80007d0 <HAL_SYSTICK_Config>
 8000698:	b908      	cbnz	r0, 800069e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	2d0f      	cmp	r5, #15
 800069c:	d901      	bls.n	80006a2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800069e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006a0:	bd38      	pop	{r3, r4, r5, pc}
 80006a2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a4:	4602      	mov	r2, r0
 80006a6:	4629      	mov	r1, r5
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f000 f840 	bl	8000730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_InitTick+0x44>)
 80006b2:	4620      	mov	r0, r4
 80006b4:	601d      	str	r5, [r3, #0]
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008

080006c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_Init+0x20>)
{
 80006c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d2:	f000 f81b 	bl	800070c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	200f      	movs	r0, #15
 80006d8:	f7ff ffd0 	bl	800067c <HAL_InitTick>
  HAL_MspInit();
 80006dc:	f7ff ff7c 	bl	80005d8 <HAL_MspInit>
}
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd08      	pop	{r3, pc}
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x10>)
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_IncTick+0x14>)
 80006ec:	6811      	ldr	r1, [r2, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	440b      	add	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000004c 	.word	0x2000004c
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_GetTick+0x8>)
 8000702:	6818      	ldr	r0, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	2000004c 	.word	0x2000004c

0800070c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4906      	ldr	r1, [pc, #24]	; (800072c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000712:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000728:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b500      	push	{lr}
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073a:	f1c3 0e07 	rsb	lr, r3, #7
 800073e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000746:	bf28      	it	cs
 8000748:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074c:	f1bc 0f06 	cmp.w	ip, #6
 8000750:	d91b      	bls.n	800078a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000752:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000758:	fa0c fc03 	lsl.w	ip, ip, r3
 800075c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 3cff 	mov.w	ip, #4294967295
 8000764:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000768:	ea21 010c 	bic.w	r1, r1, ip
 800076c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800076e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000774:	db0c      	blt.n	8000790 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	0109      	lsls	r1, r1, #4
 8000778:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800077c:	b2c9      	uxtb	r1, r1
 800077e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000782:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000786:	f85d fb04 	ldr.w	pc, [sp], #4
 800078a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078c:	4613      	mov	r3, r2
 800078e:	e7e7      	b.n	8000760 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_NVIC_SetPriority+0x78>)
 8000792:	f000 000f 	and.w	r0, r0, #15
 8000796:	0109      	lsls	r1, r1, #4
 8000798:	b2c9      	uxtb	r1, r1
 800079a:	4403      	add	r3, r0
 800079c:	7619      	strb	r1, [r3, #24]
 800079e:	f85d fb04 	ldr.w	pc, [sp], #4
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	e000ecfc 	.word	0xe000ecfc

080007ac <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007b0:	4905      	ldr	r1, [pc, #20]	; (80007c8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007b4:	68ca      	ldr	r2, [r1, #12]
 80007b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60cb      	str	r3, [r1, #12]
 80007be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80007c4:	e7fd      	b.n	80007c2 <HAL_NVIC_SystemReset+0x16>
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00
 80007cc:	05fa0004 	.word	0x05fa0004

080007d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	3801      	subs	r0, #1
 80007d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007d6:	d20f      	bcs.n	80007f8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e4:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	4c05      	ldr	r4, [pc, #20]	; (80007fc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80007f2:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f4:	6119      	str	r1, [r3, #16]
 80007f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007f8:	2001      	movs	r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef __attribute__((optimize("O0"))) HAL_FLASH_Unlock(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_FLASH_Unlock+0x40>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00d      	beq.n	8000832 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_FLASH_Unlock+0x40>)
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_FLASH_Unlock+0x44>)
 800081a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_FLASH_Unlock+0x40>)
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_FLASH_Unlock+0x48>)
 8000820:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <HAL_FLASH_Unlock+0x40>)
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000832:	79fb      	ldrb	r3, [r7, #7]
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000
 8000844:	45670123 	.word	0x45670123
 8000848:	cdef89ab 	.word	0xcdef89ab

0800084c <HAL_FLASH_Program>:
{
 800084c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000850:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8000a24 <HAL_FLASH_Program+0x1d8>
{
 8000854:	b082      	sub	sp, #8
  __HAL_LOCK(&pFlash);
 8000856:	f89a 4018 	ldrb.w	r4, [sl, #24]
{
 800085a:	e9cd 2000 	strd	r2, r0, [sp]
  __HAL_LOCK(&pFlash);
 800085e:	2c01      	cmp	r4, #1
 8000860:	f000 80d2 	beq.w	8000a08 <HAL_FLASH_Program+0x1bc>
 8000864:	469b      	mov	fp, r3
 8000866:	2301      	movs	r3, #1
 8000868:	4689      	mov	r9, r1
 800086a:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800086e:	f7ff ff47 	bl	8000700 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000872:	f24c 3650 	movw	r6, #50000	; 0xc350
  uint32_t tickstart = HAL_GetTick();
 8000876:	4604      	mov	r4, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000878:	4d6b      	ldr	r5, [pc, #428]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 800087a:	e005      	b.n	8000888 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800087c:	f7ff ff40 	bl	8000700 <HAL_GetTick>
 8000880:	1b00      	subs	r0, r0, r4
 8000882:	42b0      	cmp	r0, r6
 8000884:	f200 80be 	bhi.w	8000a04 <HAL_FLASH_Program+0x1b8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000888:	68eb      	ldr	r3, [r5, #12]
 800088a:	07da      	lsls	r2, r3, #31
 800088c:	d4f6      	bmi.n	800087c <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800088e:	68eb      	ldr	r3, [r5, #12]
 8000890:	069b      	lsls	r3, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000892:	bf44      	itt	mi
 8000894:	2320      	movmi	r3, #32
 8000896:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000898:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	06d6      	lsls	r6, r2, #27
 800089e:	d458      	bmi.n	8000952 <HAL_FLASH_Program+0x106>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80008a0:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80008a2:	07d5      	lsls	r5, r2, #31
 80008a4:	d455      	bmi.n	8000952 <HAL_FLASH_Program+0x106>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80008a6:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80008a8:	f013 0804 	ands.w	r8, r3, #4
 80008ac:	d151      	bne.n	8000952 <HAL_FLASH_Program+0x106>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008ae:	9b01      	ldr	r3, [sp, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d004      	beq.n	80008be <HAL_FLASH_Program+0x72>
      nbiterations = 4U;
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	bf0c      	ite	eq
 80008b8:	2302      	moveq	r3, #2
 80008ba:	2304      	movne	r3, #4
 80008bc:	9301      	str	r3, [sp, #4]
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008be:	f24c 3650 	movw	r6, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008c2:	4c59      	ldr	r4, [pc, #356]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008c4:	9800      	ldr	r0, [sp, #0]
 80008c6:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80008ca:	f1c3 0120 	rsb	r1, r3, #32
 80008ce:	f1a3 0220 	sub.w	r2, r3, #32
 80008d2:	fa0b f101 	lsl.w	r1, fp, r1
 80008d6:	fa20 f303 	lsr.w	r3, r0, r3
 80008da:	430b      	orrs	r3, r1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008dc:	2100      	movs	r1, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008de:	fa2b f202 	lsr.w	r2, fp, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008e2:	f8ca 101c 	str.w	r1, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008e6:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008e8:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008ea:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008ec:	f042 0201 	orr.w	r2, r2, #1
 80008f0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80008f2:	f8a9 3000 	strh.w	r3, [r9]
  uint32_t tickstart = HAL_GetTick();
 80008f6:	f7ff ff03 	bl	8000700 <HAL_GetTick>
 80008fa:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80008fc:	e004      	b.n	8000908 <HAL_FLASH_Program+0xbc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008fe:	f7ff feff 	bl	8000700 <HAL_GetTick>
 8000902:	1b40      	subs	r0, r0, r5
 8000904:	42b0      	cmp	r0, r6
 8000906:	d875      	bhi.n	80009f4 <HAL_FLASH_Program+0x1a8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000908:	68e3      	ldr	r3, [r4, #12]
 800090a:	07d9      	lsls	r1, r3, #31
 800090c:	d4f7      	bmi.n	80008fe <HAL_FLASH_Program+0xb2>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800090e:	68e3      	ldr	r3, [r4, #12]
 8000910:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000912:	bf44      	itt	mi
 8000914:	2320      	movmi	r3, #32
 8000916:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000918:	68e3      	ldr	r3, [r4, #12]
 800091a:	06db      	lsls	r3, r3, #27
 800091c:	d43c      	bmi.n	8000998 <HAL_FLASH_Program+0x14c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800091e:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000920:	07dd      	lsls	r5, r3, #31
 8000922:	d439      	bmi.n	8000998 <HAL_FLASH_Program+0x14c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000924:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000926:	f010 0004 	ands.w	r0, r0, #4
 800092a:	d135      	bne.n	8000998 <HAL_FLASH_Program+0x14c>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800092c:	6923      	ldr	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 800092e:	f108 0801 	add.w	r8, r8, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8000938:	9b01      	ldr	r3, [sp, #4]
 800093a:	fa5f f288 	uxtb.w	r2, r8
 800093e:	4293      	cmp	r3, r2
 8000940:	f109 0902 	add.w	r9, r9, #2
 8000944:	d8be      	bhi.n	80008c4 <HAL_FLASH_Program+0x78>
  __HAL_UNLOCK(&pFlash);
 8000946:	2300      	movs	r3, #0
 8000948:	f88a 3018 	strb.w	r3, [sl, #24]
}
 800094c:	b002      	add	sp, #8
 800094e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	f013 0310 	ands.w	r3, r3, #16
 800095a:	d159      	bne.n	8000a10 <HAL_FLASH_Program+0x1c4>
 800095c:	2104      	movs	r1, #4
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800095e:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 8000960:	68d2      	ldr	r2, [r2, #12]
 8000962:	0754      	lsls	r4, r2, #29
 8000964:	d506      	bpl.n	8000974 <HAL_FLASH_Program+0x128>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000966:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000968:	f8da 201c 	ldr.w	r2, [sl, #28]
 800096c:	f042 0201 	orr.w	r2, r2, #1
 8000970:	f8ca 201c 	str.w	r2, [sl, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000974:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 8000976:	69d1      	ldr	r1, [r2, #28]
 8000978:	07c8      	lsls	r0, r1, #31
 800097a:	d509      	bpl.n	8000990 <HAL_FLASH_Program+0x144>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800097c:	f8da 101c 	ldr.w	r1, [sl, #28]
 8000980:	f041 0104 	orr.w	r1, r1, #4
 8000984:	f8ca 101c 	str.w	r1, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000988:	69d1      	ldr	r1, [r2, #28]
 800098a:	f021 0101 	bic.w	r1, r1, #1
 800098e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000990:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
    return HAL_ERROR;
 8000992:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000994:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8000996:	e7d6      	b.n	8000946 <HAL_FLASH_Program+0xfa>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 800099a:	68da      	ldr	r2, [r3, #12]
 800099c:	f012 0210 	ands.w	r2, r2, #16
 80009a0:	d02e      	beq.n	8000a00 <HAL_FLASH_Program+0x1b4>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009a2:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 80009a4:	2210      	movs	r2, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009a6:	f8da 301c 	ldr.w	r3, [sl, #28]
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8ca 301c 	str.w	r3, [sl, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	0758      	lsls	r0, r3, #29
 80009b8:	d506      	bpl.n	80009c8 <HAL_FLASH_Program+0x17c>
    flags |= FLASH_FLAG_PGERR;
 80009ba:	460a      	mov	r2, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009bc:	f8da 301c 	ldr.w	r3, [sl, #28]
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	f8ca 301c 	str.w	r3, [sl, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
 80009ca:	69d9      	ldr	r1, [r3, #28]
 80009cc:	07c9      	lsls	r1, r1, #31
 80009ce:	d509      	bpl.n	80009e4 <HAL_FLASH_Program+0x198>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009d0:	f8da 101c 	ldr.w	r1, [sl, #28]
 80009d4:	f041 0104 	orr.w	r1, r1, #4
 80009d8:	f8ca 101c 	str.w	r1, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009dc:	69d9      	ldr	r1, [r3, #28]
 80009de:	f021 0101 	bic.w	r1, r1, #1
 80009e2:	61d9      	str	r1, [r3, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_FLASH_Program+0x1dc>)
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80009ea:	691a      	ldr	r2, [r3, #16]
 80009ec:	f022 0201 	bic.w	r2, r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
      if (status != HAL_OK)
 80009f2:	e7a8      	b.n	8000946 <HAL_FLASH_Program+0xfa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80009f4:	6923      	ldr	r3, [r4, #16]
 80009f6:	2003      	movs	r0, #3
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80009fe:	e7a2      	b.n	8000946 <HAL_FLASH_Program+0xfa>
 8000a00:	2104      	movs	r1, #4
 8000a02:	e7d6      	b.n	80009b2 <HAL_FLASH_Program+0x166>
 8000a04:	2003      	movs	r0, #3
 8000a06:	e79e      	b.n	8000946 <HAL_FLASH_Program+0xfa>
  __HAL_LOCK(&pFlash);
 8000a08:	2002      	movs	r0, #2
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a10:	f8da 201c 	ldr.w	r2, [sl, #28]
 8000a14:	2114      	movs	r1, #20
 8000a16:	f042 0202 	orr.w	r2, r2, #2
    flags |= FLASH_FLAG_WRPERR;
 8000a1a:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a1c:	f8ca 201c 	str.w	r2, [sl, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000a20:	e79d      	b.n	800095e <HAL_FLASH_Program+0x112>
 8000a22:	bf00      	nop
 8000a24:	20000050 	.word	0x20000050
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_FLASH_Lock+0x10>)
}
 8000a2e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a30:	6913      	ldr	r3, [r2, #16]
 8000a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a36:	6113      	str	r3, [r2, #16]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <FLASH_WaitForLastOperation>:
{
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff fe5c 	bl	8000700 <HAL_GetTick>
 8000a48:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a4a:	4e26      	ldr	r6, [pc, #152]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a4c:	1c60      	adds	r0, r4, #1
 8000a4e:	d136      	bne.n	8000abe <FLASH_WaitForLastOperation+0x7e>
 8000a50:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a52:	68d3      	ldr	r3, [r2, #12]
 8000a54:	07d9      	lsls	r1, r3, #31
 8000a56:	d4fc      	bmi.n	8000a52 <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	0696      	lsls	r6, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a5e:	bf44      	itt	mi
 8000a60:	2220      	movmi	r2, #32
 8000a62:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	06d5      	lsls	r5, r2, #27
 8000a6a:	d407      	bmi.n	8000a7c <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a6c:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a6e:	07d4      	lsls	r4, r2, #31
 8000a70:	d404      	bmi.n	8000a7c <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a72:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a74:	f010 0004 	ands.w	r0, r0, #4
 8000a78:	d100      	bne.n	8000a7c <FLASH_WaitForLastOperation+0x3c>
}
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	f013 0310 	ands.w	r3, r3, #16
 8000a84:	d126      	bne.n	8000ad4 <FLASH_WaitForLastOperation+0x94>
 8000a86:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a8a:	68d2      	ldr	r2, [r2, #12]
 8000a8c:	0750      	lsls	r0, r2, #29
 8000a8e:	d505      	bpl.n	8000a9c <FLASH_WaitForLastOperation+0x5c>
    flags |= FLASH_FLAG_PGERR;
 8000a90:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a92:	4915      	ldr	r1, [pc, #84]	; (8000ae8 <FLASH_WaitForLastOperation+0xa8>)
 8000a94:	69ca      	ldr	r2, [r1, #28]
 8000a96:	f042 0201 	orr.w	r2, r2, #1
 8000a9a:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
 8000a9e:	69d1      	ldr	r1, [r2, #28]
 8000aa0:	07c9      	lsls	r1, r1, #31
 8000aa2:	d508      	bpl.n	8000ab6 <FLASH_WaitForLastOperation+0x76>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000aa4:	4810      	ldr	r0, [pc, #64]	; (8000ae8 <FLASH_WaitForLastOperation+0xa8>)
 8000aa6:	69c1      	ldr	r1, [r0, #28]
 8000aa8:	f041 0104 	orr.w	r1, r1, #4
 8000aac:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000aae:	69d1      	ldr	r1, [r2, #28]
 8000ab0:	f021 0101 	bic.w	r1, r1, #1
 8000ab4:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <FLASH_WaitForLastOperation+0xa4>)
    return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000abe:	68f3      	ldr	r3, [r6, #12]
 8000ac0:	07db      	lsls	r3, r3, #31
 8000ac2:	d5c9      	bpl.n	8000a58 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ac4:	b124      	cbz	r4, 8000ad0 <FLASH_WaitForLastOperation+0x90>
 8000ac6:	f7ff fe1b 	bl	8000700 <HAL_GetTick>
 8000aca:	1b40      	subs	r0, r0, r5
 8000acc:	42a0      	cmp	r0, r4
 8000ace:	d9bd      	bls.n	8000a4c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
}
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <FLASH_WaitForLastOperation+0xa8>)
 8000ad6:	2114      	movs	r1, #20
 8000ad8:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ada:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000adc:	f042 0202 	orr.w	r2, r2, #2
 8000ae0:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ae2:	e7d1      	b.n	8000a88 <FLASH_WaitForLastOperation+0x48>
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	20000050 	.word	0x20000050

08000aec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000af0:	4e2d      	ldr	r6, [pc, #180]	; (8000ba8 <HAL_FLASHEx_Erase+0xbc>)
 8000af2:	7e33      	ldrb	r3, [r6, #24]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d054      	beq.n	8000ba2 <HAL_FLASHEx_Erase+0xb6>
 8000af8:	2301      	movs	r3, #1
 8000afa:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000afc:	6803      	ldr	r3, [r0, #0]
 8000afe:	4681      	mov	r9, r0
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d031      	beq.n	8000b68 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b08:	4688      	mov	r8, r1
 8000b0a:	f7ff ff99 	bl	8000a40 <FLASH_WaitForLastOperation>
 8000b0e:	4607      	mov	r7, r0
 8000b10:	bb78      	cbnz	r0, 8000b72 <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000b1a:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8000b1e:	eb05 2383 	add.w	r3, r5, r3, lsl #10
 8000b22:	429d      	cmp	r5, r3
 8000b24:	d225      	bcs.n	8000b72 <HAL_FLASHEx_Erase+0x86>
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b26:	4c21      	ldr	r4, [pc, #132]	; (8000bac <HAL_FLASHEx_Erase+0xc0>)
 8000b28:	e007      	b.n	8000b3a <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 8000b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000b2e:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8000b32:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d91c      	bls.n	8000b74 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b3a:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b3c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b3e:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b48:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b4a:	6923      	ldr	r3, [r4, #16]
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b52:	f7ff ff75 	bl	8000a40 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000b56:	6923      	ldr	r3, [r4, #16]
 8000b58:	f023 0302 	bic.w	r3, r3, #2
 8000b5c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0e3      	beq.n	8000b2a <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8000b62:	f8c8 5000 	str.w	r5, [r8]
            break;
 8000b66:	e005      	b.n	8000b74 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b6c:	f7ff ff68 	bl	8000a40 <FLASH_WaitForLastOperation>
 8000b70:	b120      	cbz	r0, 8000b7c <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000b74:	2300      	movs	r3, #0
 8000b76:	7633      	strb	r3, [r6, #24]
}
 8000b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b7e:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b80:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b82:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b8c:	6923      	ldr	r3, [r4, #16]
 8000b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b92:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b94:	f7ff ff54 	bl	8000a40 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000b98:	6923      	ldr	r3, [r4, #16]
 8000b9a:	f023 0304 	bic.w	r3, r3, #4
 8000b9e:	6123      	str	r3, [r4, #16]
 8000ba0:	e7e8      	b.n	8000b74 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8000ba2:	2002      	movs	r0, #2
}
 8000ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba8:	20000050 	.word	0x20000050
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	f000 81b6 	beq.w	8000f22 <HAL_RCC_OscConfig+0x372>
{
 8000bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bba:	6803      	ldr	r3, [r0, #0]
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	07dd      	lsls	r5, r3, #31
{
 8000bc0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc2:	d535      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc4:	499a      	ldr	r1, [pc, #616]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000bc6:	684a      	ldr	r2, [r1, #4]
 8000bc8:	f002 020c 	and.w	r2, r2, #12
 8000bcc:	2a04      	cmp	r2, #4
 8000bce:	f000 80ef 	beq.w	8000db0 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd2:	684a      	ldr	r2, [r1, #4]
 8000bd4:	f002 020c 	and.w	r2, r2, #12
 8000bd8:	2a08      	cmp	r2, #8
 8000bda:	f000 80e5 	beq.w	8000da8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be4:	d010      	beq.n	8000c08 <HAL_RCC_OscConfig+0x58>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 810c 	beq.w	8000e04 <HAL_RCC_OscConfig+0x254>
 8000bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf0:	f000 8182 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x348>
 8000bf4:	4b8e      	ldr	r3, [pc, #568]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e004      	b.n	8000c12 <HAL_RCC_OscConfig+0x62>
 8000c08:	4a89      	ldr	r2, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fd75 	bl	8000700 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	4e86      	ldr	r6, [pc, #536]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000c18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	e005      	b.n	8000c28 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fd70 	bl	8000700 <HAL_GetTick>
 8000c20:	1b40      	subs	r0, r0, r5
 8000c22:	2864      	cmp	r0, #100	; 0x64
 8000c24:	f200 80ea 	bhi.w	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c28:	6833      	ldr	r3, [r6, #0]
 8000c2a:	039a      	lsls	r2, r3, #14
 8000c2c:	d5f6      	bpl.n	8000c1c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	079f      	lsls	r7, r3, #30
 8000c32:	d528      	bpl.n	8000c86 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c34:	4a7e      	ldr	r2, [pc, #504]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000c36:	6851      	ldr	r1, [r2, #4]
 8000c38:	f011 0f0c 	tst.w	r1, #12
 8000c3c:	f000 808d 	beq.w	8000d5a <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c40:	6851      	ldr	r1, [r2, #4]
 8000c42:	f001 010c 	and.w	r1, r1, #12
 8000c46:	2908      	cmp	r1, #8
 8000c48:	f000 8083 	beq.w	8000d52 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	6923      	ldr	r3, [r4, #16]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8118 	beq.w	8000e84 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	2201      	movs	r2, #1
 8000c56:	4b77      	ldr	r3, [pc, #476]	; (8000e34 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c58:	4e75      	ldr	r6, [pc, #468]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fd50 	bl	8000700 <HAL_GetTick>
 8000c60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c62:	e005      	b.n	8000c70 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fd4c 	bl	8000700 <HAL_GetTick>
 8000c68:	1b40      	subs	r0, r0, r5
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	f200 80c6 	bhi.w	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c70:	6833      	ldr	r3, [r6, #0]
 8000c72:	0798      	lsls	r0, r3, #30
 8000c74:	d5f6      	bpl.n	8000c64 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	6833      	ldr	r3, [r6, #0]
 8000c78:	6962      	ldr	r2, [r4, #20]
 8000c7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c7e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c82:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	071a      	lsls	r2, r3, #28
 8000c88:	d41f      	bmi.n	8000cca <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c8a:	075d      	lsls	r5, r3, #29
 8000c8c:	d542      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000c90:	69da      	ldr	r2, [r3, #28]
 8000c92:	00d0      	lsls	r0, r2, #3
 8000c94:	d57d      	bpl.n	8000d92 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000c96:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c98:	4e67      	ldr	r6, [pc, #412]	; (8000e38 <HAL_RCC_OscConfig+0x288>)
 8000c9a:	6833      	ldr	r3, [r6, #0]
 8000c9c:	05d9      	lsls	r1, r3, #23
 8000c9e:	f140 809d 	bpl.w	8000ddc <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f000 80fe 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x2f6>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 80ca 	beq.w	8000e44 <HAL_RCC_OscConfig+0x294>
 8000cb0:	2b05      	cmp	r3, #5
 8000cb2:	4b5f      	ldr	r3, [pc, #380]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000cb4:	6a1a      	ldr	r2, [r3, #32]
 8000cb6:	f000 812c 	beq.w	8000f12 <HAL_RCC_OscConfig+0x362>
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	621a      	str	r2, [r3, #32]
 8000cc0:	6a1a      	ldr	r2, [r3, #32]
 8000cc2:	f022 0204 	bic.w	r2, r2, #4
 8000cc6:	621a      	str	r2, [r3, #32]
 8000cc8:	e0f2      	b.n	8000eb0 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cca:	69a3      	ldr	r3, [r4, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d04f      	beq.n	8000d70 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd4:	4e56      	ldr	r6, [pc, #344]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000cd6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000cda:	f7ff fd11 	bl	8000700 <HAL_GetTick>
 8000cde:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce0:	e005      	b.n	8000cee <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fd0d 	bl	8000700 <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	f200 8087 	bhi.w	8000dfc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000cf0:	079b      	lsls	r3, r3, #30
 8000cf2:	d5f6      	bpl.n	8000ce2 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000cf4:	4b51      	ldr	r3, [pc, #324]	; (8000e3c <HAL_RCC_OscConfig+0x28c>)
 8000cf6:	4a52      	ldr	r2, [pc, #328]	; (8000e40 <HAL_RCC_OscConfig+0x290>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0a5b      	lsrs	r3, r3, #9
 8000d00:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d02:	bf00      	nop
  }
  while (Delay --);
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f9      	bne.n	8000d02 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	075d      	lsls	r5, r3, #29
 8000d12:	d4bc      	bmi.n	8000c8e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d14:	69e0      	ldr	r0, [r4, #28]
 8000d16:	b1c0      	cbz	r0, 8000d4a <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d18:	4d45      	ldr	r5, [pc, #276]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000d1a:	686b      	ldr	r3, [r5, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	f000 80d8 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d2a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d2c:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d2e:	f000 80fa 	beq.w	8000f26 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000d32:	f7ff fce5 	bl	8000700 <HAL_GetTick>
 8000d36:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d38:	e004      	b.n	8000d44 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d3a:	f7ff fce1 	bl	8000700 <HAL_GetTick>
 8000d3e:	1b00      	subs	r0, r0, r4
 8000d40:	2802      	cmp	r0, #2
 8000d42:	d85b      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	d4f7      	bmi.n	8000d3a <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000d4a:	2000      	movs	r0, #0
}
 8000d4c:	b002      	add	sp, #8
 8000d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d52:	6852      	ldr	r2, [r2, #4]
 8000d54:	03d6      	lsls	r6, r2, #15
 8000d56:	f53f af79 	bmi.w	8000c4c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5a:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	0795      	lsls	r5, r2, #30
 8000d60:	d530      	bpl.n	8000dc4 <HAL_RCC_OscConfig+0x214>
 8000d62:	6922      	ldr	r2, [r4, #16]
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d02d      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
}
 8000d6a:	b002      	add	sp, #8
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000d70:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d72:	4e2f      	ldr	r6, [pc, #188]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000d74:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000d78:	f7ff fcc2 	bl	8000700 <HAL_GetTick>
 8000d7c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7e:	e004      	b.n	8000d8a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fcbe 	bl	8000700 <HAL_GetTick>
 8000d84:	1b40      	subs	r0, r0, r5
 8000d86:	2802      	cmp	r0, #2
 8000d88:	d838      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d8c:	079f      	lsls	r7, r3, #30
 8000d8e:	d4f7      	bmi.n	8000d80 <HAL_RCC_OscConfig+0x1d0>
 8000d90:	e7bd      	b.n	8000d0e <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000d94:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d9a:	61da      	str	r2, [r3, #28]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000da6:	e777      	b.n	8000c98 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	684a      	ldr	r2, [r1, #4]
 8000daa:	03d0      	lsls	r0, r2, #15
 8000dac:	f57f af17 	bpl.w	8000bde <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	0391      	lsls	r1, r2, #14
 8000db6:	f57f af3b 	bpl.w	8000c30 <HAL_RCC_OscConfig+0x80>
 8000dba:	6862      	ldr	r2, [r4, #4]
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f47f af37 	bne.w	8000c30 <HAL_RCC_OscConfig+0x80>
 8000dc2:	e7d1      	b.n	8000d68 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	491a      	ldr	r1, [pc, #104]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000dc6:	6960      	ldr	r0, [r4, #20]
 8000dc8:	680a      	ldr	r2, [r1, #0]
 8000dca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000dd2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd4:	071a      	lsls	r2, r3, #28
 8000dd6:	f57f af58 	bpl.w	8000c8a <HAL_RCC_OscConfig+0xda>
 8000dda:	e776      	b.n	8000cca <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ddc:	6833      	ldr	r3, [r6, #0]
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc8c 	bl	8000700 <HAL_GetTick>
 8000de8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	6833      	ldr	r3, [r6, #0]
 8000dec:	05da      	lsls	r2, r3, #23
 8000dee:	f53f af58 	bmi.w	8000ca2 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000df2:	f7ff fc85 	bl	8000700 <HAL_GetTick>
 8000df6:	1bc0      	subs	r0, r0, r7
 8000df8:	2864      	cmp	r0, #100	; 0x64
 8000dfa:	d9f6      	bls.n	8000dea <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8000dfc:	2003      	movs	r0, #3
}
 8000dfe:	b002      	add	sp, #8
 8000e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e04:	4d0a      	ldr	r5, [pc, #40]	; (8000e30 <HAL_RCC_OscConfig+0x280>)
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0c:	602b      	str	r3, [r5, #0]
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e16:	f7ff fc73 	bl	8000700 <HAL_GetTick>
 8000e1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1c:	e004      	b.n	8000e28 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fc6f 	bl	8000700 <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	2864      	cmp	r0, #100	; 0x64
 8000e26:	d8e9      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	039b      	lsls	r3, r3, #14
 8000e2c:	d4f7      	bmi.n	8000e1e <HAL_RCC_OscConfig+0x26e>
 8000e2e:	e6fe      	b.n	8000c2e <HAL_RCC_OscConfig+0x7e>
 8000e30:	40021000 	.word	0x40021000
 8000e34:	42420000 	.word	0x42420000
 8000e38:	40007000 	.word	0x40007000
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e44:	4e50      	ldr	r6, [pc, #320]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	6a33      	ldr	r3, [r6, #32]
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6233      	str	r3, [r6, #32]
 8000e52:	6a33      	ldr	r3, [r6, #32]
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc51 	bl	8000700 <HAL_GetTick>
 8000e5e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	e004      	b.n	8000e6c <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fc4d 	bl	8000700 <HAL_GetTick>
 8000e66:	1bc0      	subs	r0, r0, r7
 8000e68:	4540      	cmp	r0, r8
 8000e6a:	d8c7      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	6a33      	ldr	r3, [r6, #32]
 8000e6e:	0798      	lsls	r0, r3, #30
 8000e70:	d4f7      	bmi.n	8000e62 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f43f af4e 	beq.w	8000d14 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e78:	4a43      	ldr	r2, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
 8000e7a:	69d3      	ldr	r3, [r2, #28]
 8000e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	e747      	b.n	8000d14 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000e84:	4a41      	ldr	r2, [pc, #260]	; (8000f8c <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e86:	4e40      	ldr	r6, [pc, #256]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8000e88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc39 	bl	8000700 <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e90:	e004      	b.n	8000e9c <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e92:	f7ff fc35 	bl	8000700 <HAL_GetTick>
 8000e96:	1b40      	subs	r0, r0, r5
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d8af      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9c:	6833      	ldr	r3, [r6, #0]
 8000e9e:	0799      	lsls	r1, r3, #30
 8000ea0:	d4f7      	bmi.n	8000e92 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	e6ef      	b.n	8000c86 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea6:	4a38      	ldr	r2, [pc, #224]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
 8000ea8:	6a13      	ldr	r3, [r2, #32]
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc26 	bl	8000700 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000eb8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eba:	4f33      	ldr	r7, [pc, #204]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
 8000ebc:	e004      	b.n	8000ec8 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff fc1f 	bl	8000700 <HAL_GetTick>
 8000ec2:	1b80      	subs	r0, r0, r6
 8000ec4:	4540      	cmp	r0, r8
 8000ec6:	d899      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	079b      	lsls	r3, r3, #30
 8000ecc:	d5f7      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	f43f af20 	beq.w	8000d14 <HAL_RCC_OscConfig+0x164>
 8000ed4:	e7d0      	b.n	8000e78 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	f43f af38 	beq.w	8000d4c <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8000edc:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	6a22      	ldr	r2, [r4, #32]
 8000ee0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	f47f af3f 	bne.w	8000d68 <HAL_RCC_OscConfig+0x1b8>
 8000eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000ef0:	1a18      	subs	r0, r3, r0
 8000ef2:	bf18      	it	ne
 8000ef4:	2001      	movne	r0, #1
 8000ef6:	e729      	b.n	8000d4c <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000efc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e67f      	b.n	8000c12 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f12:	f042 0204 	orr.w	r2, r2, #4
 8000f16:	621a      	str	r2, [r3, #32]
 8000f18:	6a1a      	ldr	r2, [r3, #32]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	621a      	str	r2, [r3, #32]
 8000f20:	e7c6      	b.n	8000eb0 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
}
 8000f24:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000f26:	f7ff fbeb 	bl	8000700 <HAL_GetTick>
 8000f2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2c:	e005      	b.n	8000f3a <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff fbe7 	bl	8000700 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	2802      	cmp	r0, #2
 8000f36:	f63f af61 	bhi.w	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3a:	682b      	ldr	r3, [r5, #0]
 8000f3c:	0199      	lsls	r1, r3, #6
 8000f3e:	d4f6      	bmi.n	8000f2e <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f40:	6a23      	ldr	r3, [r4, #32]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d105      	bne.n	8000f54 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f48:	686a      	ldr	r2, [r5, #4]
 8000f4a:	68a1      	ldr	r1, [r4, #8]
 8000f4c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f50:	430a      	orrs	r2, r1
 8000f52:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f54:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f56:	4d0c      	ldr	r5, [pc, #48]	; (8000f88 <HAL_RCC_OscConfig+0x3d8>)
 8000f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f5a:	686a      	ldr	r2, [r5, #4]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f64:	4313      	orrs	r3, r2
 8000f66:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f68:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fbc9 	bl	8000700 <HAL_GetTick>
 8000f6e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f70:	e005      	b.n	8000f7e <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fbc5 	bl	8000700 <HAL_GetTick>
 8000f76:	1b00      	subs	r0, r0, r4
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	f63f af3f 	bhi.w	8000dfc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	019a      	lsls	r2, r3, #6
 8000f82:	d5f6      	bpl.n	8000f72 <HAL_RCC_OscConfig+0x3c2>
 8000f84:	e6e1      	b.n	8000d4a <HAL_RCC_OscConfig+0x19a>
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	42420000 	.word	0x42420000

08000f90 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 80a1 	beq.w	80010d8 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f96:	4a56      	ldr	r2, [pc, #344]	; (80010f0 <HAL_RCC_ClockConfig+0x160>)
{
 8000f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f9c:	6813      	ldr	r3, [r2, #0]
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	d20c      	bcs.n	8000fc4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f023 0307 	bic.w	r3, r3, #7
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d002      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
}
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	079e      	lsls	r6, r3, #30
 8000fc8:	d514      	bpl.n	8000ff4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fca:	0758      	lsls	r0, r3, #29
 8000fcc:	d504      	bpl.n	8000fd8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fce:	4949      	ldr	r1, [pc, #292]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8000fd0:	684a      	ldr	r2, [r1, #4]
 8000fd2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000fd6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd8:	0719      	lsls	r1, r3, #28
 8000fda:	d504      	bpl.n	8000fe6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fdc:	4945      	ldr	r1, [pc, #276]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8000fde:	684a      	ldr	r2, [r1, #4]
 8000fe0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000fe4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe6:	4943      	ldr	r1, [pc, #268]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8000fe8:	68a0      	ldr	r0, [r4, #8]
 8000fea:	684a      	ldr	r2, [r1, #4]
 8000fec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ff0:	4302      	orrs	r2, r0
 8000ff2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff4:	07da      	lsls	r2, r3, #31
 8000ff6:	d520      	bpl.n	800103a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001000:	d06c      	beq.n	80010dc <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001002:	2a02      	cmp	r2, #2
 8001004:	d065      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001006:	079e      	lsls	r6, r3, #30
 8001008:	d5d9      	bpl.n	8000fbe <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100a:	4e3a      	ldr	r6, [pc, #232]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001010:	6873      	ldr	r3, [r6, #4]
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	4313      	orrs	r3, r2
 8001018:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800101a:	f7ff fb71 	bl	8000700 <HAL_GetTick>
 800101e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001020:	e004      	b.n	800102c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f7ff fb6d 	bl	8000700 <HAL_GetTick>
 8001026:	1bc0      	subs	r0, r0, r7
 8001028:	4540      	cmp	r0, r8
 800102a:	d85a      	bhi.n	80010e2 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102c:	6873      	ldr	r3, [r6, #4]
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001038:	d1f3      	bne.n	8001022 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_RCC_ClockConfig+0x160>)
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	42ab      	cmp	r3, r5
 8001044:	d909      	bls.n	800105a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f023 0307 	bic.w	r3, r3, #7
 800104c:	432b      	orrs	r3, r5
 800104e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	42ab      	cmp	r3, r5
 8001058:	d1b1      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	0758      	lsls	r0, r3, #29
 800105e:	d506      	bpl.n	800106e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001060:	4924      	ldr	r1, [pc, #144]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8001062:	68e0      	ldr	r0, [r4, #12]
 8001064:	684a      	ldr	r2, [r1, #4]
 8001066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800106a:	4302      	orrs	r2, r0
 800106c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106e:	0719      	lsls	r1, r3, #28
 8001070:	d507      	bpl.n	8001082 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8001074:	6921      	ldr	r1, [r4, #16]
 8001076:	6853      	ldr	r3, [r2, #4]
 8001078:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800107c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001080:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8001082:	491c      	ldr	r1, [pc, #112]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8001084:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001086:	f002 030c 	and.w	r3, r2, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d010      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_RCC_ClockConfig+0x164>)
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <HAL_RCC_ClockConfig+0x16c>)
 8001094:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001096:	491a      	ldr	r1, [pc, #104]	; (8001100 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001098:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800109c:	5c80      	ldrb	r0, [r0, r2]
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_RCC_ClockConfig+0x174>)
 80010a0:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80010a2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80010a6:	f7ff fae9 	bl	800067c <HAL_InitTick>
  return HAL_OK;
 80010aa:	2000      	movs	r0, #0
}
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010b0:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_RCC_ClockConfig+0x178>)
 80010b2:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010b6:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010b8:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010ba:	d514      	bpl.n	80010e6 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010bc:	480e      	ldr	r0, [pc, #56]	; (80010f8 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010be:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010c0:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <HAL_RCC_ClockConfig+0x17c>)
 80010c6:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80010ca:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d0:	e7de      	b.n	8001090 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d2:	019f      	lsls	r7, r3, #6
 80010d4:	d499      	bmi.n	800100a <HAL_RCC_ClockConfig+0x7a>
 80010d6:	e772      	b.n	8000fbe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
}
 80010da:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010dc:	039b      	lsls	r3, r3, #14
 80010de:	d494      	bmi.n	800100a <HAL_RCC_ClockConfig+0x7a>
 80010e0:	e76d      	b.n	8000fbe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e76c      	b.n	8000fc0 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_RCC_ClockConfig+0x180>)
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	e7d0      	b.n	8001090 <HAL_RCC_ClockConfig+0x100>
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	007a1200 	.word	0x007a1200
 80010fc:	08001584 	.word	0x08001584
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	08001594 	.word	0x08001594
 800110c:	080015a4 	.word	0x080015a4
 8001110:	003d0900 	.word	0x003d0900

08001114 <memset>:
 8001114:	4603      	mov	r3, r0
 8001116:	4402      	add	r2, r0
 8001118:	4293      	cmp	r3, r2
 800111a:	d100      	bne.n	800111e <memset+0xa>
 800111c:	4770      	bx	lr
 800111e:	f803 1b01 	strb.w	r1, [r3], #1
 8001122:	e7f9      	b.n	8001118 <memset+0x4>

08001124 <__libc_init_array>:
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	2600      	movs	r6, #0
 8001128:	4d0c      	ldr	r5, [pc, #48]	; (800115c <__libc_init_array+0x38>)
 800112a:	4c0d      	ldr	r4, [pc, #52]	; (8001160 <__libc_init_array+0x3c>)
 800112c:	1b64      	subs	r4, r4, r5
 800112e:	10a4      	asrs	r4, r4, #2
 8001130:	42a6      	cmp	r6, r4
 8001132:	d109      	bne.n	8001148 <__libc_init_array+0x24>
 8001134:	f000 f81a 	bl	800116c <_init>
 8001138:	2600      	movs	r6, #0
 800113a:	4d0a      	ldr	r5, [pc, #40]	; (8001164 <__libc_init_array+0x40>)
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <__libc_init_array+0x44>)
 800113e:	1b64      	subs	r4, r4, r5
 8001140:	10a4      	asrs	r4, r4, #2
 8001142:	42a6      	cmp	r6, r4
 8001144:	d105      	bne.n	8001152 <__libc_init_array+0x2e>
 8001146:	bd70      	pop	{r4, r5, r6, pc}
 8001148:	f855 3b04 	ldr.w	r3, [r5], #4
 800114c:	4798      	blx	r3
 800114e:	3601      	adds	r6, #1
 8001150:	e7ee      	b.n	8001130 <__libc_init_array+0xc>
 8001152:	f855 3b04 	ldr.w	r3, [r5], #4
 8001156:	4798      	blx	r3
 8001158:	3601      	adds	r6, #1
 800115a:	e7f2      	b.n	8001142 <__libc_init_array+0x1e>
 800115c:	080015a8 	.word	0x080015a8
 8001160:	080015a8 	.word	0x080015a8
 8001164:	080015a8 	.word	0x080015a8
 8001168:	080015ac 	.word	0x080015ac

0800116c <_init>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	bf00      	nop
 8001170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001172:	bc08      	pop	{r3}
 8001174:	469e      	mov	lr, r3
 8001176:	4770      	bx	lr

08001178 <_fini>:
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	bf00      	nop
 800117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117e:	bc08      	pop	{r3}
 8001180:	469e      	mov	lr, r3
 8001182:	4770      	bx	lr
