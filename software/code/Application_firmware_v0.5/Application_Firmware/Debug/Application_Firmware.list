
Application_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  08008110  08008110  00008110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800df80  0800df80  0000df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d4  0800e3d4  0001001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3d4  0800e3d4  0001001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3d4  0800e3d4  0001001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3d4  0800e3d4  0000e3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3d8  0800e3d8  0000e3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800e3dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000020  0800e3f8  00010020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800e3f8  00010a58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aec8  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d1c  00000000  00000000  0002af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000df07  00000000  00000000  0002ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd8  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000188f  00000000  00000000  0003d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000197b5  00000000  00000000  0003f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ea76  00000000  00000000  00058894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00092e27  00000000  00000000  0007730a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ec0  00000000  00000000  0010a134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bd  00000000  00000000  0010cff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008110 <__do_global_dtors_aux>:
 8008110:	b510      	push	{r4, lr}
 8008112:	4c05      	ldr	r4, [pc, #20]	; (8008128 <__do_global_dtors_aux+0x18>)
 8008114:	7823      	ldrb	r3, [r4, #0]
 8008116:	b933      	cbnz	r3, 8008126 <__do_global_dtors_aux+0x16>
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <__do_global_dtors_aux+0x1c>)
 800811a:	b113      	cbz	r3, 8008122 <__do_global_dtors_aux+0x12>
 800811c:	4804      	ldr	r0, [pc, #16]	; (8008130 <__do_global_dtors_aux+0x20>)
 800811e:	f3af 8000 	nop.w
 8008122:	2301      	movs	r3, #1
 8008124:	7023      	strb	r3, [r4, #0]
 8008126:	bd10      	pop	{r4, pc}
 8008128:	20000020 	.word	0x20000020
 800812c:	00000000 	.word	0x00000000
 8008130:	0800df68 	.word	0x0800df68

08008134 <frame_dummy>:
 8008134:	b508      	push	{r3, lr}
 8008136:	4b03      	ldr	r3, [pc, #12]	; (8008144 <frame_dummy+0x10>)
 8008138:	b11b      	cbz	r3, 8008142 <frame_dummy+0xe>
 800813a:	4903      	ldr	r1, [pc, #12]	; (8008148 <frame_dummy+0x14>)
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <frame_dummy+0x18>)
 800813e:	f3af 8000 	nop.w
 8008142:	bd08      	pop	{r3, pc}
 8008144:	00000000 	.word	0x00000000
 8008148:	20000024 	.word	0x20000024
 800814c:	0800df68 	.word	0x0800df68

08008150 <__aeabi_drsub>:
 8008150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008154:	e002      	b.n	800815c <__adddf3>
 8008156:	bf00      	nop

08008158 <__aeabi_dsub>:
 8008158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800815c <__adddf3>:
 800815c:	b530      	push	{r4, r5, lr}
 800815e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008166:	ea94 0f05 	teq	r4, r5
 800816a:	bf08      	it	eq
 800816c:	ea90 0f02 	teqeq	r0, r2
 8008170:	bf1f      	itttt	ne
 8008172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800817a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800817e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008182:	f000 80e2 	beq.w	800834a <__adddf3+0x1ee>
 8008186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800818a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800818e:	bfb8      	it	lt
 8008190:	426d      	neglt	r5, r5
 8008192:	dd0c      	ble.n	80081ae <__adddf3+0x52>
 8008194:	442c      	add	r4, r5
 8008196:	ea80 0202 	eor.w	r2, r0, r2
 800819a:	ea81 0303 	eor.w	r3, r1, r3
 800819e:	ea82 0000 	eor.w	r0, r2, r0
 80081a2:	ea83 0101 	eor.w	r1, r3, r1
 80081a6:	ea80 0202 	eor.w	r2, r0, r2
 80081aa:	ea81 0303 	eor.w	r3, r1, r3
 80081ae:	2d36      	cmp	r5, #54	; 0x36
 80081b0:	bf88      	it	hi
 80081b2:	bd30      	pophi	{r4, r5, pc}
 80081b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80081b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80081bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80081c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80081c4:	d002      	beq.n	80081cc <__adddf3+0x70>
 80081c6:	4240      	negs	r0, r0
 80081c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80081d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80081d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80081d8:	d002      	beq.n	80081e0 <__adddf3+0x84>
 80081da:	4252      	negs	r2, r2
 80081dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081e0:	ea94 0f05 	teq	r4, r5
 80081e4:	f000 80a7 	beq.w	8008336 <__adddf3+0x1da>
 80081e8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80081f0:	db0d      	blt.n	800820e <__adddf3+0xb2>
 80081f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081f6:	fa22 f205 	lsr.w	r2, r2, r5
 80081fa:	1880      	adds	r0, r0, r2
 80081fc:	f141 0100 	adc.w	r1, r1, #0
 8008200:	fa03 f20e 	lsl.w	r2, r3, lr
 8008204:	1880      	adds	r0, r0, r2
 8008206:	fa43 f305 	asr.w	r3, r3, r5
 800820a:	4159      	adcs	r1, r3
 800820c:	e00e      	b.n	800822c <__adddf3+0xd0>
 800820e:	f1a5 0520 	sub.w	r5, r5, #32
 8008212:	f10e 0e20 	add.w	lr, lr, #32
 8008216:	2a01      	cmp	r2, #1
 8008218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800821c:	bf28      	it	cs
 800821e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008222:	fa43 f305 	asr.w	r3, r3, r5
 8008226:	18c0      	adds	r0, r0, r3
 8008228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800822c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008230:	d507      	bpl.n	8008242 <__adddf3+0xe6>
 8008232:	f04f 0e00 	mov.w	lr, #0
 8008236:	f1dc 0c00 	rsbs	ip, ip, #0
 800823a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800823e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008246:	d31b      	bcc.n	8008280 <__adddf3+0x124>
 8008248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800824c:	d30c      	bcc.n	8008268 <__adddf3+0x10c>
 800824e:	0849      	lsrs	r1, r1, #1
 8008250:	ea5f 0030 	movs.w	r0, r0, rrx
 8008254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008258:	f104 0401 	add.w	r4, r4, #1
 800825c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008264:	f080 809a 	bcs.w	800839c <__adddf3+0x240>
 8008268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800826c:	bf08      	it	eq
 800826e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008272:	f150 0000 	adcs.w	r0, r0, #0
 8008276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800827a:	ea41 0105 	orr.w	r1, r1, r5
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008284:	4140      	adcs	r0, r0
 8008286:	eb41 0101 	adc.w	r1, r1, r1
 800828a:	3c01      	subs	r4, #1
 800828c:	bf28      	it	cs
 800828e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008292:	d2e9      	bcs.n	8008268 <__adddf3+0x10c>
 8008294:	f091 0f00 	teq	r1, #0
 8008298:	bf04      	itt	eq
 800829a:	4601      	moveq	r1, r0
 800829c:	2000      	moveq	r0, #0
 800829e:	fab1 f381 	clz	r3, r1
 80082a2:	bf08      	it	eq
 80082a4:	3320      	addeq	r3, #32
 80082a6:	f1a3 030b 	sub.w	r3, r3, #11
 80082aa:	f1b3 0220 	subs.w	r2, r3, #32
 80082ae:	da0c      	bge.n	80082ca <__adddf3+0x16e>
 80082b0:	320c      	adds	r2, #12
 80082b2:	dd08      	ble.n	80082c6 <__adddf3+0x16a>
 80082b4:	f102 0c14 	add.w	ip, r2, #20
 80082b8:	f1c2 020c 	rsb	r2, r2, #12
 80082bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80082c0:	fa21 f102 	lsr.w	r1, r1, r2
 80082c4:	e00c      	b.n	80082e0 <__adddf3+0x184>
 80082c6:	f102 0214 	add.w	r2, r2, #20
 80082ca:	bfd8      	it	le
 80082cc:	f1c2 0c20 	rsble	ip, r2, #32
 80082d0:	fa01 f102 	lsl.w	r1, r1, r2
 80082d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80082d8:	bfdc      	itt	le
 80082da:	ea41 010c 	orrle.w	r1, r1, ip
 80082de:	4090      	lslle	r0, r2
 80082e0:	1ae4      	subs	r4, r4, r3
 80082e2:	bfa2      	ittt	ge
 80082e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082e8:	4329      	orrge	r1, r5
 80082ea:	bd30      	popge	{r4, r5, pc}
 80082ec:	ea6f 0404 	mvn.w	r4, r4
 80082f0:	3c1f      	subs	r4, #31
 80082f2:	da1c      	bge.n	800832e <__adddf3+0x1d2>
 80082f4:	340c      	adds	r4, #12
 80082f6:	dc0e      	bgt.n	8008316 <__adddf3+0x1ba>
 80082f8:	f104 0414 	add.w	r4, r4, #20
 80082fc:	f1c4 0220 	rsb	r2, r4, #32
 8008300:	fa20 f004 	lsr.w	r0, r0, r4
 8008304:	fa01 f302 	lsl.w	r3, r1, r2
 8008308:	ea40 0003 	orr.w	r0, r0, r3
 800830c:	fa21 f304 	lsr.w	r3, r1, r4
 8008310:	ea45 0103 	orr.w	r1, r5, r3
 8008314:	bd30      	pop	{r4, r5, pc}
 8008316:	f1c4 040c 	rsb	r4, r4, #12
 800831a:	f1c4 0220 	rsb	r2, r4, #32
 800831e:	fa20 f002 	lsr.w	r0, r0, r2
 8008322:	fa01 f304 	lsl.w	r3, r1, r4
 8008326:	ea40 0003 	orr.w	r0, r0, r3
 800832a:	4629      	mov	r1, r5
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	fa21 f004 	lsr.w	r0, r1, r4
 8008332:	4629      	mov	r1, r5
 8008334:	bd30      	pop	{r4, r5, pc}
 8008336:	f094 0f00 	teq	r4, #0
 800833a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800833e:	bf06      	itte	eq
 8008340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008344:	3401      	addeq	r4, #1
 8008346:	3d01      	subne	r5, #1
 8008348:	e74e      	b.n	80081e8 <__adddf3+0x8c>
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf18      	it	ne
 8008350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008354:	d029      	beq.n	80083aa <__adddf3+0x24e>
 8008356:	ea94 0f05 	teq	r4, r5
 800835a:	bf08      	it	eq
 800835c:	ea90 0f02 	teqeq	r0, r2
 8008360:	d005      	beq.n	800836e <__adddf3+0x212>
 8008362:	ea54 0c00 	orrs.w	ip, r4, r0
 8008366:	bf04      	itt	eq
 8008368:	4619      	moveq	r1, r3
 800836a:	4610      	moveq	r0, r2
 800836c:	bd30      	pop	{r4, r5, pc}
 800836e:	ea91 0f03 	teq	r1, r3
 8008372:	bf1e      	ittt	ne
 8008374:	2100      	movne	r1, #0
 8008376:	2000      	movne	r0, #0
 8008378:	bd30      	popne	{r4, r5, pc}
 800837a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800837e:	d105      	bne.n	800838c <__adddf3+0x230>
 8008380:	0040      	lsls	r0, r0, #1
 8008382:	4149      	adcs	r1, r1
 8008384:	bf28      	it	cs
 8008386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800838a:	bd30      	pop	{r4, r5, pc}
 800838c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008390:	bf3c      	itt	cc
 8008392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008396:	bd30      	popcc	{r4, r5, pc}
 8008398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800839c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80083a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083a4:	f04f 0000 	mov.w	r0, #0
 80083a8:	bd30      	pop	{r4, r5, pc}
 80083aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083ae:	bf1a      	itte	ne
 80083b0:	4619      	movne	r1, r3
 80083b2:	4610      	movne	r0, r2
 80083b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80083b8:	bf1c      	itt	ne
 80083ba:	460b      	movne	r3, r1
 80083bc:	4602      	movne	r2, r0
 80083be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80083c2:	bf06      	itte	eq
 80083c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80083c8:	ea91 0f03 	teqeq	r1, r3
 80083cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80083d0:	bd30      	pop	{r4, r5, pc}
 80083d2:	bf00      	nop

080083d4 <__aeabi_ui2d>:
 80083d4:	f090 0f00 	teq	r0, #0
 80083d8:	bf04      	itt	eq
 80083da:	2100      	moveq	r1, #0
 80083dc:	4770      	bxeq	lr
 80083de:	b530      	push	{r4, r5, lr}
 80083e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083e8:	f04f 0500 	mov.w	r5, #0
 80083ec:	f04f 0100 	mov.w	r1, #0
 80083f0:	e750      	b.n	8008294 <__adddf3+0x138>
 80083f2:	bf00      	nop

080083f4 <__aeabi_i2d>:
 80083f4:	f090 0f00 	teq	r0, #0
 80083f8:	bf04      	itt	eq
 80083fa:	2100      	moveq	r1, #0
 80083fc:	4770      	bxeq	lr
 80083fe:	b530      	push	{r4, r5, lr}
 8008400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800840c:	bf48      	it	mi
 800840e:	4240      	negmi	r0, r0
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	e73e      	b.n	8008294 <__adddf3+0x138>
 8008416:	bf00      	nop

08008418 <__aeabi_f2d>:
 8008418:	0042      	lsls	r2, r0, #1
 800841a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800841e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008426:	bf1f      	itttt	ne
 8008428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800842c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008434:	4770      	bxne	lr
 8008436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800843a:	bf08      	it	eq
 800843c:	4770      	bxeq	lr
 800843e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008442:	bf04      	itt	eq
 8008444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008448:	4770      	bxeq	lr
 800844a:	b530      	push	{r4, r5, lr}
 800844c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008458:	e71c      	b.n	8008294 <__adddf3+0x138>
 800845a:	bf00      	nop

0800845c <__aeabi_ul2d>:
 800845c:	ea50 0201 	orrs.w	r2, r0, r1
 8008460:	bf08      	it	eq
 8008462:	4770      	bxeq	lr
 8008464:	b530      	push	{r4, r5, lr}
 8008466:	f04f 0500 	mov.w	r5, #0
 800846a:	e00a      	b.n	8008482 <__aeabi_l2d+0x16>

0800846c <__aeabi_l2d>:
 800846c:	ea50 0201 	orrs.w	r2, r0, r1
 8008470:	bf08      	it	eq
 8008472:	4770      	bxeq	lr
 8008474:	b530      	push	{r4, r5, lr}
 8008476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800847a:	d502      	bpl.n	8008482 <__aeabi_l2d+0x16>
 800847c:	4240      	negs	r0, r0
 800847e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800848a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800848e:	f43f aed8 	beq.w	8008242 <__adddf3+0xe6>
 8008492:	f04f 0203 	mov.w	r2, #3
 8008496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800849a:	bf18      	it	ne
 800849c:	3203      	addne	r2, #3
 800849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084a2:	bf18      	it	ne
 80084a4:	3203      	addne	r2, #3
 80084a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80084aa:	f1c2 0320 	rsb	r3, r2, #32
 80084ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80084b2:	fa20 f002 	lsr.w	r0, r0, r2
 80084b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80084ba:	ea40 000e 	orr.w	r0, r0, lr
 80084be:	fa21 f102 	lsr.w	r1, r1, r2
 80084c2:	4414      	add	r4, r2
 80084c4:	e6bd      	b.n	8008242 <__adddf3+0xe6>
 80084c6:	bf00      	nop

080084c8 <__aeabi_dmul>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80084ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80084d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80084d6:	bf1d      	ittte	ne
 80084d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80084dc:	ea94 0f0c 	teqne	r4, ip
 80084e0:	ea95 0f0c 	teqne	r5, ip
 80084e4:	f000 f8de 	bleq	80086a4 <__aeabi_dmul+0x1dc>
 80084e8:	442c      	add	r4, r5
 80084ea:	ea81 0603 	eor.w	r6, r1, r3
 80084ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084fa:	bf18      	it	ne
 80084fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008508:	d038      	beq.n	800857c <__aeabi_dmul+0xb4>
 800850a:	fba0 ce02 	umull	ip, lr, r0, r2
 800850e:	f04f 0500 	mov.w	r5, #0
 8008512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800851a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800851e:	f04f 0600 	mov.w	r6, #0
 8008522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008526:	f09c 0f00 	teq	ip, #0
 800852a:	bf18      	it	ne
 800852c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800853c:	d204      	bcs.n	8008548 <__aeabi_dmul+0x80>
 800853e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008542:	416d      	adcs	r5, r5
 8008544:	eb46 0606 	adc.w	r6, r6, r6
 8008548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800854c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800855c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008560:	bf88      	it	hi
 8008562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008566:	d81e      	bhi.n	80085a6 <__aeabi_dmul+0xde>
 8008568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800856c:	bf08      	it	eq
 800856e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008572:	f150 0000 	adcs.w	r0, r0, #0
 8008576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008580:	ea46 0101 	orr.w	r1, r6, r1
 8008584:	ea40 0002 	orr.w	r0, r0, r2
 8008588:	ea81 0103 	eor.w	r1, r1, r3
 800858c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008590:	bfc2      	ittt	gt
 8008592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800859a:	bd70      	popgt	{r4, r5, r6, pc}
 800859c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085a0:	f04f 0e00 	mov.w	lr, #0
 80085a4:	3c01      	subs	r4, #1
 80085a6:	f300 80ab 	bgt.w	8008700 <__aeabi_dmul+0x238>
 80085aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80085ae:	bfde      	ittt	le
 80085b0:	2000      	movle	r0, #0
 80085b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80085b6:	bd70      	pople	{r4, r5, r6, pc}
 80085b8:	f1c4 0400 	rsb	r4, r4, #0
 80085bc:	3c20      	subs	r4, #32
 80085be:	da35      	bge.n	800862c <__aeabi_dmul+0x164>
 80085c0:	340c      	adds	r4, #12
 80085c2:	dc1b      	bgt.n	80085fc <__aeabi_dmul+0x134>
 80085c4:	f104 0414 	add.w	r4, r4, #20
 80085c8:	f1c4 0520 	rsb	r5, r4, #32
 80085cc:	fa00 f305 	lsl.w	r3, r0, r5
 80085d0:	fa20 f004 	lsr.w	r0, r0, r4
 80085d4:	fa01 f205 	lsl.w	r2, r1, r5
 80085d8:	ea40 0002 	orr.w	r0, r0, r2
 80085dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80085e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085e8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ec:	eb42 0106 	adc.w	r1, r2, r6
 80085f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085f4:	bf08      	it	eq
 80085f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	f1c4 040c 	rsb	r4, r4, #12
 8008600:	f1c4 0520 	rsb	r5, r4, #32
 8008604:	fa00 f304 	lsl.w	r3, r0, r4
 8008608:	fa20 f005 	lsr.w	r0, r0, r5
 800860c:	fa01 f204 	lsl.w	r2, r1, r4
 8008610:	ea40 0002 	orr.w	r0, r0, r2
 8008614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800861c:	f141 0100 	adc.w	r1, r1, #0
 8008620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008624:	bf08      	it	eq
 8008626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f1c4 0520 	rsb	r5, r4, #32
 8008630:	fa00 f205 	lsl.w	r2, r0, r5
 8008634:	ea4e 0e02 	orr.w	lr, lr, r2
 8008638:	fa20 f304 	lsr.w	r3, r0, r4
 800863c:	fa01 f205 	lsl.w	r2, r1, r5
 8008640:	ea43 0302 	orr.w	r3, r3, r2
 8008644:	fa21 f004 	lsr.w	r0, r1, r4
 8008648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800864c:	fa21 f204 	lsr.w	r2, r1, r4
 8008650:	ea20 0002 	bic.w	r0, r0, r2
 8008654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800865c:	bf08      	it	eq
 800865e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f094 0f00 	teq	r4, #0
 8008668:	d10f      	bne.n	800868a <__aeabi_dmul+0x1c2>
 800866a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800866e:	0040      	lsls	r0, r0, #1
 8008670:	eb41 0101 	adc.w	r1, r1, r1
 8008674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008678:	bf08      	it	eq
 800867a:	3c01      	subeq	r4, #1
 800867c:	d0f7      	beq.n	800866e <__aeabi_dmul+0x1a6>
 800867e:	ea41 0106 	orr.w	r1, r1, r6
 8008682:	f095 0f00 	teq	r5, #0
 8008686:	bf18      	it	ne
 8008688:	4770      	bxne	lr
 800868a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800868e:	0052      	lsls	r2, r2, #1
 8008690:	eb43 0303 	adc.w	r3, r3, r3
 8008694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008698:	bf08      	it	eq
 800869a:	3d01      	subeq	r5, #1
 800869c:	d0f7      	beq.n	800868e <__aeabi_dmul+0x1c6>
 800869e:	ea43 0306 	orr.w	r3, r3, r6
 80086a2:	4770      	bx	lr
 80086a4:	ea94 0f0c 	teq	r4, ip
 80086a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80086ac:	bf18      	it	ne
 80086ae:	ea95 0f0c 	teqne	r5, ip
 80086b2:	d00c      	beq.n	80086ce <__aeabi_dmul+0x206>
 80086b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086b8:	bf18      	it	ne
 80086ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086be:	d1d1      	bne.n	8008664 <__aeabi_dmul+0x19c>
 80086c0:	ea81 0103 	eor.w	r1, r1, r3
 80086c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086d2:	bf06      	itte	eq
 80086d4:	4610      	moveq	r0, r2
 80086d6:	4619      	moveq	r1, r3
 80086d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086dc:	d019      	beq.n	8008712 <__aeabi_dmul+0x24a>
 80086de:	ea94 0f0c 	teq	r4, ip
 80086e2:	d102      	bne.n	80086ea <__aeabi_dmul+0x222>
 80086e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086e8:	d113      	bne.n	8008712 <__aeabi_dmul+0x24a>
 80086ea:	ea95 0f0c 	teq	r5, ip
 80086ee:	d105      	bne.n	80086fc <__aeabi_dmul+0x234>
 80086f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086f4:	bf1c      	itt	ne
 80086f6:	4610      	movne	r0, r2
 80086f8:	4619      	movne	r1, r3
 80086fa:	d10a      	bne.n	8008712 <__aeabi_dmul+0x24a>
 80086fc:	ea81 0103 	eor.w	r1, r1, r3
 8008700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800870c:	f04f 0000 	mov.w	r0, #0
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800871a:	bd70      	pop	{r4, r5, r6, pc}

0800871c <__aeabi_ddiv>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800872a:	bf1d      	ittte	ne
 800872c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008730:	ea94 0f0c 	teqne	r4, ip
 8008734:	ea95 0f0c 	teqne	r5, ip
 8008738:	f000 f8a7 	bleq	800888a <__aeabi_ddiv+0x16e>
 800873c:	eba4 0405 	sub.w	r4, r4, r5
 8008740:	ea81 0e03 	eor.w	lr, r1, r3
 8008744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800874c:	f000 8088 	beq.w	8008860 <__aeabi_ddiv+0x144>
 8008750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800875c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800876c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008774:	429d      	cmp	r5, r3
 8008776:	bf08      	it	eq
 8008778:	4296      	cmpeq	r6, r2
 800877a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800877e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008782:	d202      	bcs.n	800878a <__aeabi_ddiv+0x6e>
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	ea4f 0232 	mov.w	r2, r2, rrx
 800878a:	1ab6      	subs	r6, r6, r2
 800878c:	eb65 0503 	sbc.w	r5, r5, r3
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	ea4f 0232 	mov.w	r2, r2, rrx
 8008796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800879a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800879e:	ebb6 0e02 	subs.w	lr, r6, r2
 80087a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087a6:	bf22      	ittt	cs
 80087a8:	1ab6      	subcs	r6, r6, r2
 80087aa:	4675      	movcs	r5, lr
 80087ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087be:	bf22      	ittt	cs
 80087c0:	1ab6      	subcs	r6, r6, r2
 80087c2:	4675      	movcs	r5, lr
 80087c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80087ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80087d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087d6:	bf22      	ittt	cs
 80087d8:	1ab6      	subcs	r6, r6, r2
 80087da:	4675      	movcs	r5, lr
 80087dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ee:	bf22      	ittt	cs
 80087f0:	1ab6      	subcs	r6, r6, r2
 80087f2:	4675      	movcs	r5, lr
 80087f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087fc:	d018      	beq.n	8008830 <__aeabi_ddiv+0x114>
 80087fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800880a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800880e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800881a:	d1c0      	bne.n	800879e <__aeabi_ddiv+0x82>
 800881c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008820:	d10b      	bne.n	800883a <__aeabi_ddiv+0x11e>
 8008822:	ea41 0100 	orr.w	r1, r1, r0
 8008826:	f04f 0000 	mov.w	r0, #0
 800882a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800882e:	e7b6      	b.n	800879e <__aeabi_ddiv+0x82>
 8008830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008834:	bf04      	itt	eq
 8008836:	4301      	orreq	r1, r0
 8008838:	2000      	moveq	r0, #0
 800883a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800883e:	bf88      	it	hi
 8008840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008844:	f63f aeaf 	bhi.w	80085a6 <__aeabi_dmul+0xde>
 8008848:	ebb5 0c03 	subs.w	ip, r5, r3
 800884c:	bf04      	itt	eq
 800884e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008856:	f150 0000 	adcs.w	r0, r0, #0
 800885a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800886c:	bfc2      	ittt	gt
 800886e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008876:	bd70      	popgt	{r4, r5, r6, pc}
 8008878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800887c:	f04f 0e00 	mov.w	lr, #0
 8008880:	3c01      	subs	r4, #1
 8008882:	e690      	b.n	80085a6 <__aeabi_dmul+0xde>
 8008884:	ea45 0e06 	orr.w	lr, r5, r6
 8008888:	e68d      	b.n	80085a6 <__aeabi_dmul+0xde>
 800888a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800888e:	ea94 0f0c 	teq	r4, ip
 8008892:	bf08      	it	eq
 8008894:	ea95 0f0c 	teqeq	r5, ip
 8008898:	f43f af3b 	beq.w	8008712 <__aeabi_dmul+0x24a>
 800889c:	ea94 0f0c 	teq	r4, ip
 80088a0:	d10a      	bne.n	80088b8 <__aeabi_ddiv+0x19c>
 80088a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088a6:	f47f af34 	bne.w	8008712 <__aeabi_dmul+0x24a>
 80088aa:	ea95 0f0c 	teq	r5, ip
 80088ae:	f47f af25 	bne.w	80086fc <__aeabi_dmul+0x234>
 80088b2:	4610      	mov	r0, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	e72c      	b.n	8008712 <__aeabi_dmul+0x24a>
 80088b8:	ea95 0f0c 	teq	r5, ip
 80088bc:	d106      	bne.n	80088cc <__aeabi_ddiv+0x1b0>
 80088be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088c2:	f43f aefd 	beq.w	80086c0 <__aeabi_dmul+0x1f8>
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	e722      	b.n	8008712 <__aeabi_dmul+0x24a>
 80088cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088d6:	f47f aec5 	bne.w	8008664 <__aeabi_dmul+0x19c>
 80088da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80088de:	f47f af0d 	bne.w	80086fc <__aeabi_dmul+0x234>
 80088e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088e6:	f47f aeeb 	bne.w	80086c0 <__aeabi_dmul+0x1f8>
 80088ea:	e712      	b.n	8008712 <__aeabi_dmul+0x24a>

080088ec <__gedf2>:
 80088ec:	f04f 3cff 	mov.w	ip, #4294967295
 80088f0:	e006      	b.n	8008900 <__cmpdf2+0x4>
 80088f2:	bf00      	nop

080088f4 <__ledf2>:
 80088f4:	f04f 0c01 	mov.w	ip, #1
 80088f8:	e002      	b.n	8008900 <__cmpdf2+0x4>
 80088fa:	bf00      	nop

080088fc <__cmpdf2>:
 80088fc:	f04f 0c01 	mov.w	ip, #1
 8008900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800890c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008910:	bf18      	it	ne
 8008912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008916:	d01b      	beq.n	8008950 <__cmpdf2+0x54>
 8008918:	b001      	add	sp, #4
 800891a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800891e:	bf0c      	ite	eq
 8008920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008924:	ea91 0f03 	teqne	r1, r3
 8008928:	bf02      	ittt	eq
 800892a:	ea90 0f02 	teqeq	r0, r2
 800892e:	2000      	moveq	r0, #0
 8008930:	4770      	bxeq	lr
 8008932:	f110 0f00 	cmn.w	r0, #0
 8008936:	ea91 0f03 	teq	r1, r3
 800893a:	bf58      	it	pl
 800893c:	4299      	cmppl	r1, r3
 800893e:	bf08      	it	eq
 8008940:	4290      	cmpeq	r0, r2
 8008942:	bf2c      	ite	cs
 8008944:	17d8      	asrcs	r0, r3, #31
 8008946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800894a:	f040 0001 	orr.w	r0, r0, #1
 800894e:	4770      	bx	lr
 8008950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008958:	d102      	bne.n	8008960 <__cmpdf2+0x64>
 800895a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800895e:	d107      	bne.n	8008970 <__cmpdf2+0x74>
 8008960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008968:	d1d6      	bne.n	8008918 <__cmpdf2+0x1c>
 800896a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800896e:	d0d3      	beq.n	8008918 <__cmpdf2+0x1c>
 8008970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <__aeabi_cdrcmple>:
 8008978:	4684      	mov	ip, r0
 800897a:	4610      	mov	r0, r2
 800897c:	4662      	mov	r2, ip
 800897e:	468c      	mov	ip, r1
 8008980:	4619      	mov	r1, r3
 8008982:	4663      	mov	r3, ip
 8008984:	e000      	b.n	8008988 <__aeabi_cdcmpeq>
 8008986:	bf00      	nop

08008988 <__aeabi_cdcmpeq>:
 8008988:	b501      	push	{r0, lr}
 800898a:	f7ff ffb7 	bl	80088fc <__cmpdf2>
 800898e:	2800      	cmp	r0, #0
 8008990:	bf48      	it	mi
 8008992:	f110 0f00 	cmnmi.w	r0, #0
 8008996:	bd01      	pop	{r0, pc}

08008998 <__aeabi_dcmpeq>:
 8008998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800899c:	f7ff fff4 	bl	8008988 <__aeabi_cdcmpeq>
 80089a0:	bf0c      	ite	eq
 80089a2:	2001      	moveq	r0, #1
 80089a4:	2000      	movne	r0, #0
 80089a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089aa:	bf00      	nop

080089ac <__aeabi_dcmplt>:
 80089ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089b0:	f7ff ffea 	bl	8008988 <__aeabi_cdcmpeq>
 80089b4:	bf34      	ite	cc
 80089b6:	2001      	movcc	r0, #1
 80089b8:	2000      	movcs	r0, #0
 80089ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80089be:	bf00      	nop

080089c0 <__aeabi_dcmple>:
 80089c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089c4:	f7ff ffe0 	bl	8008988 <__aeabi_cdcmpeq>
 80089c8:	bf94      	ite	ls
 80089ca:	2001      	movls	r0, #1
 80089cc:	2000      	movhi	r0, #0
 80089ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80089d2:	bf00      	nop

080089d4 <__aeabi_dcmpge>:
 80089d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089d8:	f7ff ffce 	bl	8008978 <__aeabi_cdrcmple>
 80089dc:	bf94      	ite	ls
 80089de:	2001      	movls	r0, #1
 80089e0:	2000      	movhi	r0, #0
 80089e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089e6:	bf00      	nop

080089e8 <__aeabi_dcmpgt>:
 80089e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ec:	f7ff ffc4 	bl	8008978 <__aeabi_cdrcmple>
 80089f0:	bf34      	ite	cc
 80089f2:	2001      	movcc	r0, #1
 80089f4:	2000      	movcs	r0, #0
 80089f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089fa:	bf00      	nop

080089fc <__aeabi_d2f>:
 80089fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a04:	bf24      	itt	cs
 8008a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a0e:	d90d      	bls.n	8008a2c <__aeabi_d2f+0x30>
 8008a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a24:	bf08      	it	eq
 8008a26:	f020 0001 	biceq.w	r0, r0, #1
 8008a2a:	4770      	bx	lr
 8008a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a30:	d121      	bne.n	8008a76 <__aeabi_d2f+0x7a>
 8008a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a36:	bfbc      	itt	lt
 8008a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a3c:	4770      	bxlt	lr
 8008a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a46:	f1c2 0218 	rsb	r2, r2, #24
 8008a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8008a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a52:	fa20 f002 	lsr.w	r0, r0, r2
 8008a56:	bf18      	it	ne
 8008a58:	f040 0001 	orrne.w	r0, r0, #1
 8008a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a68:	ea40 000c 	orr.w	r0, r0, ip
 8008a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8008a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a74:	e7cc      	b.n	8008a10 <__aeabi_d2f+0x14>
 8008a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a7a:	d107      	bne.n	8008a8c <__aeabi_d2f+0x90>
 8008a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a80:	bf1e      	ittt	ne
 8008a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a8a:	4770      	bxne	lr
 8008a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop

08008a9c <__aeabi_frsub>:
 8008a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008aa0:	e002      	b.n	8008aa8 <__addsf3>
 8008aa2:	bf00      	nop

08008aa4 <__aeabi_fsub>:
 8008aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008aa8 <__addsf3>:
 8008aa8:	0042      	lsls	r2, r0, #1
 8008aaa:	bf1f      	itttt	ne
 8008aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008ab0:	ea92 0f03 	teqne	r2, r3
 8008ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008abc:	d06a      	beq.n	8008b94 <__addsf3+0xec>
 8008abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008ac6:	bfc1      	itttt	gt
 8008ac8:	18d2      	addgt	r2, r2, r3
 8008aca:	4041      	eorgt	r1, r0
 8008acc:	4048      	eorgt	r0, r1
 8008ace:	4041      	eorgt	r1, r0
 8008ad0:	bfb8      	it	lt
 8008ad2:	425b      	neglt	r3, r3
 8008ad4:	2b19      	cmp	r3, #25
 8008ad6:	bf88      	it	hi
 8008ad8:	4770      	bxhi	lr
 8008ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008ae6:	bf18      	it	ne
 8008ae8:	4240      	negne	r0, r0
 8008aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008af6:	bf18      	it	ne
 8008af8:	4249      	negne	r1, r1
 8008afa:	ea92 0f03 	teq	r2, r3
 8008afe:	d03f      	beq.n	8008b80 <__addsf3+0xd8>
 8008b00:	f1a2 0201 	sub.w	r2, r2, #1
 8008b04:	fa41 fc03 	asr.w	ip, r1, r3
 8008b08:	eb10 000c 	adds.w	r0, r0, ip
 8008b0c:	f1c3 0320 	rsb	r3, r3, #32
 8008b10:	fa01 f103 	lsl.w	r1, r1, r3
 8008b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008b18:	d502      	bpl.n	8008b20 <__addsf3+0x78>
 8008b1a:	4249      	negs	r1, r1
 8008b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8008b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008b24:	d313      	bcc.n	8008b4e <__addsf3+0xa6>
 8008b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008b2a:	d306      	bcc.n	8008b3a <__addsf3+0x92>
 8008b2c:	0840      	lsrs	r0, r0, #1
 8008b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008b32:	f102 0201 	add.w	r2, r2, #1
 8008b36:	2afe      	cmp	r2, #254	; 0xfe
 8008b38:	d251      	bcs.n	8008bde <__addsf3+0x136>
 8008b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008b42:	bf08      	it	eq
 8008b44:	f020 0001 	biceq.w	r0, r0, #1
 8008b48:	ea40 0003 	orr.w	r0, r0, r3
 8008b4c:	4770      	bx	lr
 8008b4e:	0049      	lsls	r1, r1, #1
 8008b50:	eb40 0000 	adc.w	r0, r0, r0
 8008b54:	3a01      	subs	r2, #1
 8008b56:	bf28      	it	cs
 8008b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8008b5c:	d2ed      	bcs.n	8008b3a <__addsf3+0x92>
 8008b5e:	fab0 fc80 	clz	ip, r0
 8008b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8008b66:	ebb2 020c 	subs.w	r2, r2, ip
 8008b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8008b6e:	bfaa      	itet	ge
 8008b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8008b74:	4252      	neglt	r2, r2
 8008b76:	4318      	orrge	r0, r3
 8008b78:	bfbc      	itt	lt
 8008b7a:	40d0      	lsrlt	r0, r2
 8008b7c:	4318      	orrlt	r0, r3
 8008b7e:	4770      	bx	lr
 8008b80:	f092 0f00 	teq	r2, #0
 8008b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8008b88:	bf06      	itte	eq
 8008b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8008b8e:	3201      	addeq	r2, #1
 8008b90:	3b01      	subne	r3, #1
 8008b92:	e7b5      	b.n	8008b00 <__addsf3+0x58>
 8008b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008b9c:	bf18      	it	ne
 8008b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008ba2:	d021      	beq.n	8008be8 <__addsf3+0x140>
 8008ba4:	ea92 0f03 	teq	r2, r3
 8008ba8:	d004      	beq.n	8008bb4 <__addsf3+0x10c>
 8008baa:	f092 0f00 	teq	r2, #0
 8008bae:	bf08      	it	eq
 8008bb0:	4608      	moveq	r0, r1
 8008bb2:	4770      	bx	lr
 8008bb4:	ea90 0f01 	teq	r0, r1
 8008bb8:	bf1c      	itt	ne
 8008bba:	2000      	movne	r0, #0
 8008bbc:	4770      	bxne	lr
 8008bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8008bc2:	d104      	bne.n	8008bce <__addsf3+0x126>
 8008bc4:	0040      	lsls	r0, r0, #1
 8008bc6:	bf28      	it	cs
 8008bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8008bcc:	4770      	bx	lr
 8008bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8008bd2:	bf3c      	itt	cc
 8008bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008bd8:	4770      	bxcc	lr
 8008bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8008be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008be6:	4770      	bx	lr
 8008be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8008bec:	bf16      	itet	ne
 8008bee:	4608      	movne	r0, r1
 8008bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8008bf4:	4601      	movne	r1, r0
 8008bf6:	0242      	lsls	r2, r0, #9
 8008bf8:	bf06      	itte	eq
 8008bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8008bfe:	ea90 0f01 	teqeq	r0, r1
 8008c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8008c06:	4770      	bx	lr

08008c08 <__aeabi_ui2f>:
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e004      	b.n	8008c18 <__aeabi_i2f+0x8>
 8008c0e:	bf00      	nop

08008c10 <__aeabi_i2f>:
 8008c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8008c14:	bf48      	it	mi
 8008c16:	4240      	negmi	r0, r0
 8008c18:	ea5f 0c00 	movs.w	ip, r0
 8008c1c:	bf08      	it	eq
 8008c1e:	4770      	bxeq	lr
 8008c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8008c24:	4601      	mov	r1, r0
 8008c26:	f04f 0000 	mov.w	r0, #0
 8008c2a:	e01c      	b.n	8008c66 <__aeabi_l2f+0x2a>

08008c2c <__aeabi_ul2f>:
 8008c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8008c30:	bf08      	it	eq
 8008c32:	4770      	bxeq	lr
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e00a      	b.n	8008c50 <__aeabi_l2f+0x14>
 8008c3a:	bf00      	nop

08008c3c <__aeabi_l2f>:
 8008c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8008c40:	bf08      	it	eq
 8008c42:	4770      	bxeq	lr
 8008c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008c48:	d502      	bpl.n	8008c50 <__aeabi_l2f+0x14>
 8008c4a:	4240      	negs	r0, r0
 8008c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008c50:	ea5f 0c01 	movs.w	ip, r1
 8008c54:	bf02      	ittt	eq
 8008c56:	4684      	moveq	ip, r0
 8008c58:	4601      	moveq	r1, r0
 8008c5a:	2000      	moveq	r0, #0
 8008c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008c60:	bf08      	it	eq
 8008c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8008c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008c6a:	fabc f28c 	clz	r2, ip
 8008c6e:	3a08      	subs	r2, #8
 8008c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8008c74:	db10      	blt.n	8008c98 <__aeabi_l2f+0x5c>
 8008c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8008c7a:	4463      	add	r3, ip
 8008c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8008c80:	f1c2 0220 	rsb	r2, r2, #32
 8008c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008c88:	fa20 f202 	lsr.w	r2, r0, r2
 8008c8c:	eb43 0002 	adc.w	r0, r3, r2
 8008c90:	bf08      	it	eq
 8008c92:	f020 0001 	biceq.w	r0, r0, #1
 8008c96:	4770      	bx	lr
 8008c98:	f102 0220 	add.w	r2, r2, #32
 8008c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8008ca0:	f1c2 0220 	rsb	r2, r2, #32
 8008ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8008cac:	eb43 0002 	adc.w	r0, r3, r2
 8008cb0:	bf08      	it	eq
 8008cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008cb6:	4770      	bx	lr

08008cb8 <__aeabi_fmul>:
 8008cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008cc0:	bf1e      	ittt	ne
 8008cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008cc6:	ea92 0f0c 	teqne	r2, ip
 8008cca:	ea93 0f0c 	teqne	r3, ip
 8008cce:	d06f      	beq.n	8008db0 <__aeabi_fmul+0xf8>
 8008cd0:	441a      	add	r2, r3
 8008cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8008cd6:	0240      	lsls	r0, r0, #9
 8008cd8:	bf18      	it	ne
 8008cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008cde:	d01e      	beq.n	8008d1e <__aeabi_fmul+0x66>
 8008ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8008ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008cec:	fba0 3101 	umull	r3, r1, r0, r1
 8008cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008cf8:	bf3e      	ittt	cc
 8008cfa:	0049      	lslcc	r1, r1, #1
 8008cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008d00:	005b      	lslcc	r3, r3, #1
 8008d02:	ea40 0001 	orr.w	r0, r0, r1
 8008d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8008d0a:	2afd      	cmp	r2, #253	; 0xfd
 8008d0c:	d81d      	bhi.n	8008d4a <__aeabi_fmul+0x92>
 8008d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008d16:	bf08      	it	eq
 8008d18:	f020 0001 	biceq.w	r0, r0, #1
 8008d1c:	4770      	bx	lr
 8008d1e:	f090 0f00 	teq	r0, #0
 8008d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008d26:	bf08      	it	eq
 8008d28:	0249      	lsleq	r1, r1, #9
 8008d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008d32:	3a7f      	subs	r2, #127	; 0x7f
 8008d34:	bfc2      	ittt	gt
 8008d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008d3e:	4770      	bxgt	lr
 8008d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	3a01      	subs	r2, #1
 8008d4a:	dc5d      	bgt.n	8008e08 <__aeabi_fmul+0x150>
 8008d4c:	f112 0f19 	cmn.w	r2, #25
 8008d50:	bfdc      	itt	le
 8008d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008d56:	4770      	bxle	lr
 8008d58:	f1c2 0200 	rsb	r2, r2, #0
 8008d5c:	0041      	lsls	r1, r0, #1
 8008d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8008d62:	f1c2 0220 	rsb	r2, r2, #32
 8008d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8008d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8008d6e:	f140 0000 	adc.w	r0, r0, #0
 8008d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008d76:	bf08      	it	eq
 8008d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008d7c:	4770      	bx	lr
 8008d7e:	f092 0f00 	teq	r2, #0
 8008d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008d86:	bf02      	ittt	eq
 8008d88:	0040      	lsleq	r0, r0, #1
 8008d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008d8e:	3a01      	subeq	r2, #1
 8008d90:	d0f9      	beq.n	8008d86 <__aeabi_fmul+0xce>
 8008d92:	ea40 000c 	orr.w	r0, r0, ip
 8008d96:	f093 0f00 	teq	r3, #0
 8008d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008d9e:	bf02      	ittt	eq
 8008da0:	0049      	lsleq	r1, r1, #1
 8008da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008da6:	3b01      	subeq	r3, #1
 8008da8:	d0f9      	beq.n	8008d9e <__aeabi_fmul+0xe6>
 8008daa:	ea41 010c 	orr.w	r1, r1, ip
 8008dae:	e78f      	b.n	8008cd0 <__aeabi_fmul+0x18>
 8008db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008db4:	ea92 0f0c 	teq	r2, ip
 8008db8:	bf18      	it	ne
 8008dba:	ea93 0f0c 	teqne	r3, ip
 8008dbe:	d00a      	beq.n	8008dd6 <__aeabi_fmul+0x11e>
 8008dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008dc4:	bf18      	it	ne
 8008dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008dca:	d1d8      	bne.n	8008d7e <__aeabi_fmul+0xc6>
 8008dcc:	ea80 0001 	eor.w	r0, r0, r1
 8008dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008dd4:	4770      	bx	lr
 8008dd6:	f090 0f00 	teq	r0, #0
 8008dda:	bf17      	itett	ne
 8008ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008de0:	4608      	moveq	r0, r1
 8008de2:	f091 0f00 	teqne	r1, #0
 8008de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8008dea:	d014      	beq.n	8008e16 <__aeabi_fmul+0x15e>
 8008dec:	ea92 0f0c 	teq	r2, ip
 8008df0:	d101      	bne.n	8008df6 <__aeabi_fmul+0x13e>
 8008df2:	0242      	lsls	r2, r0, #9
 8008df4:	d10f      	bne.n	8008e16 <__aeabi_fmul+0x15e>
 8008df6:	ea93 0f0c 	teq	r3, ip
 8008dfa:	d103      	bne.n	8008e04 <__aeabi_fmul+0x14c>
 8008dfc:	024b      	lsls	r3, r1, #9
 8008dfe:	bf18      	it	ne
 8008e00:	4608      	movne	r0, r1
 8008e02:	d108      	bne.n	8008e16 <__aeabi_fmul+0x15e>
 8008e04:	ea80 0001 	eor.w	r0, r0, r1
 8008e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008e14:	4770      	bx	lr
 8008e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008e1e:	4770      	bx	lr

08008e20 <__aeabi_fdiv>:
 8008e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008e28:	bf1e      	ittt	ne
 8008e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008e2e:	ea92 0f0c 	teqne	r2, ip
 8008e32:	ea93 0f0c 	teqne	r3, ip
 8008e36:	d069      	beq.n	8008f0c <__aeabi_fdiv+0xec>
 8008e38:	eba2 0203 	sub.w	r2, r2, r3
 8008e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8008e40:	0249      	lsls	r1, r1, #9
 8008e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008e46:	d037      	beq.n	8008eb8 <__aeabi_fdiv+0x98>
 8008e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf38      	it	cc
 8008e5c:	005b      	lslcc	r3, r3, #1
 8008e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008e66:	428b      	cmp	r3, r1
 8008e68:	bf24      	itt	cs
 8008e6a:	1a5b      	subcs	r3, r3, r1
 8008e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008e74:	bf24      	itt	cs
 8008e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8008e82:	bf24      	itt	cs
 8008e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008e90:	bf24      	itt	cs
 8008e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	bf18      	it	ne
 8008e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008ea2:	d1e0      	bne.n	8008e66 <__aeabi_fdiv+0x46>
 8008ea4:	2afd      	cmp	r2, #253	; 0xfd
 8008ea6:	f63f af50 	bhi.w	8008d4a <__aeabi_fmul+0x92>
 8008eaa:	428b      	cmp	r3, r1
 8008eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008eb0:	bf08      	it	eq
 8008eb2:	f020 0001 	biceq.w	r0, r0, #1
 8008eb6:	4770      	bx	lr
 8008eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008ec0:	327f      	adds	r2, #127	; 0x7f
 8008ec2:	bfc2      	ittt	gt
 8008ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008ecc:	4770      	bxgt	lr
 8008ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	e737      	b.n	8008d4a <__aeabi_fmul+0x92>
 8008eda:	f092 0f00 	teq	r2, #0
 8008ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008ee2:	bf02      	ittt	eq
 8008ee4:	0040      	lsleq	r0, r0, #1
 8008ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008eea:	3a01      	subeq	r2, #1
 8008eec:	d0f9      	beq.n	8008ee2 <__aeabi_fdiv+0xc2>
 8008eee:	ea40 000c 	orr.w	r0, r0, ip
 8008ef2:	f093 0f00 	teq	r3, #0
 8008ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008efa:	bf02      	ittt	eq
 8008efc:	0049      	lsleq	r1, r1, #1
 8008efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008f02:	3b01      	subeq	r3, #1
 8008f04:	d0f9      	beq.n	8008efa <__aeabi_fdiv+0xda>
 8008f06:	ea41 010c 	orr.w	r1, r1, ip
 8008f0a:	e795      	b.n	8008e38 <__aeabi_fdiv+0x18>
 8008f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008f10:	ea92 0f0c 	teq	r2, ip
 8008f14:	d108      	bne.n	8008f28 <__aeabi_fdiv+0x108>
 8008f16:	0242      	lsls	r2, r0, #9
 8008f18:	f47f af7d 	bne.w	8008e16 <__aeabi_fmul+0x15e>
 8008f1c:	ea93 0f0c 	teq	r3, ip
 8008f20:	f47f af70 	bne.w	8008e04 <__aeabi_fmul+0x14c>
 8008f24:	4608      	mov	r0, r1
 8008f26:	e776      	b.n	8008e16 <__aeabi_fmul+0x15e>
 8008f28:	ea93 0f0c 	teq	r3, ip
 8008f2c:	d104      	bne.n	8008f38 <__aeabi_fdiv+0x118>
 8008f2e:	024b      	lsls	r3, r1, #9
 8008f30:	f43f af4c 	beq.w	8008dcc <__aeabi_fmul+0x114>
 8008f34:	4608      	mov	r0, r1
 8008f36:	e76e      	b.n	8008e16 <__aeabi_fmul+0x15e>
 8008f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008f3c:	bf18      	it	ne
 8008f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008f42:	d1ca      	bne.n	8008eda <__aeabi_fdiv+0xba>
 8008f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008f48:	f47f af5c 	bne.w	8008e04 <__aeabi_fmul+0x14c>
 8008f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008f50:	f47f af3c 	bne.w	8008dcc <__aeabi_fmul+0x114>
 8008f54:	e75f      	b.n	8008e16 <__aeabi_fmul+0x15e>
 8008f56:	bf00      	nop

08008f58 <__gesf2>:
 8008f58:	f04f 3cff 	mov.w	ip, #4294967295
 8008f5c:	e006      	b.n	8008f6c <__cmpsf2+0x4>
 8008f5e:	bf00      	nop

08008f60 <__lesf2>:
 8008f60:	f04f 0c01 	mov.w	ip, #1
 8008f64:	e002      	b.n	8008f6c <__cmpsf2+0x4>
 8008f66:	bf00      	nop

08008f68 <__cmpsf2>:
 8008f68:	f04f 0c01 	mov.w	ip, #1
 8008f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8008f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008f7c:	bf18      	it	ne
 8008f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008f82:	d011      	beq.n	8008fa8 <__cmpsf2+0x40>
 8008f84:	b001      	add	sp, #4
 8008f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8008f8a:	bf18      	it	ne
 8008f8c:	ea90 0f01 	teqne	r0, r1
 8008f90:	bf58      	it	pl
 8008f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8008f96:	bf88      	it	hi
 8008f98:	17c8      	asrhi	r0, r1, #31
 8008f9a:	bf38      	it	cc
 8008f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8008fa0:	bf18      	it	ne
 8008fa2:	f040 0001 	orrne.w	r0, r0, #1
 8008fa6:	4770      	bx	lr
 8008fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008fac:	d102      	bne.n	8008fb4 <__cmpsf2+0x4c>
 8008fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8008fb2:	d105      	bne.n	8008fc0 <__cmpsf2+0x58>
 8008fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8008fb8:	d1e4      	bne.n	8008f84 <__cmpsf2+0x1c>
 8008fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8008fbe:	d0e1      	beq.n	8008f84 <__cmpsf2+0x1c>
 8008fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop

08008fc8 <__aeabi_cfrcmple>:
 8008fc8:	4684      	mov	ip, r0
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4661      	mov	r1, ip
 8008fce:	e7ff      	b.n	8008fd0 <__aeabi_cfcmpeq>

08008fd0 <__aeabi_cfcmpeq>:
 8008fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8008fd2:	f7ff ffc9 	bl	8008f68 <__cmpsf2>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	bf48      	it	mi
 8008fda:	f110 0f00 	cmnmi.w	r0, #0
 8008fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08008fe0 <__aeabi_fcmpeq>:
 8008fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fe4:	f7ff fff4 	bl	8008fd0 <__aeabi_cfcmpeq>
 8008fe8:	bf0c      	ite	eq
 8008fea:	2001      	moveq	r0, #1
 8008fec:	2000      	movne	r0, #0
 8008fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ff2:	bf00      	nop

08008ff4 <__aeabi_fcmplt>:
 8008ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ff8:	f7ff ffea 	bl	8008fd0 <__aeabi_cfcmpeq>
 8008ffc:	bf34      	ite	cc
 8008ffe:	2001      	movcc	r0, #1
 8009000:	2000      	movcs	r0, #0
 8009002:	f85d fb08 	ldr.w	pc, [sp], #8
 8009006:	bf00      	nop

08009008 <__aeabi_fcmple>:
 8009008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800900c:	f7ff ffe0 	bl	8008fd0 <__aeabi_cfcmpeq>
 8009010:	bf94      	ite	ls
 8009012:	2001      	movls	r0, #1
 8009014:	2000      	movhi	r0, #0
 8009016:	f85d fb08 	ldr.w	pc, [sp], #8
 800901a:	bf00      	nop

0800901c <__aeabi_fcmpge>:
 800901c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009020:	f7ff ffd2 	bl	8008fc8 <__aeabi_cfrcmple>
 8009024:	bf94      	ite	ls
 8009026:	2001      	movls	r0, #1
 8009028:	2000      	movhi	r0, #0
 800902a:	f85d fb08 	ldr.w	pc, [sp], #8
 800902e:	bf00      	nop

08009030 <__aeabi_fcmpgt>:
 8009030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009034:	f7ff ffc8 	bl	8008fc8 <__aeabi_cfrcmple>
 8009038:	bf34      	ite	cc
 800903a:	2001      	movcc	r0, #1
 800903c:	2000      	movcs	r0, #0
 800903e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009042:	bf00      	nop

08009044 <__aeabi_f2uiz>:
 8009044:	0042      	lsls	r2, r0, #1
 8009046:	d20e      	bcs.n	8009066 <__aeabi_f2uiz+0x22>
 8009048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800904c:	d30b      	bcc.n	8009066 <__aeabi_f2uiz+0x22>
 800904e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8009052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8009056:	d409      	bmi.n	800906c <__aeabi_f2uiz+0x28>
 8009058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800905c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009060:	fa23 f002 	lsr.w	r0, r3, r2
 8009064:	4770      	bx	lr
 8009066:	f04f 0000 	mov.w	r0, #0
 800906a:	4770      	bx	lr
 800906c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8009070:	d101      	bne.n	8009076 <__aeabi_f2uiz+0x32>
 8009072:	0242      	lsls	r2, r0, #9
 8009074:	d102      	bne.n	800907c <__aeabi_f2uiz+0x38>
 8009076:	f04f 30ff 	mov.w	r0, #4294967295
 800907a:	4770      	bx	lr
 800907c:	f04f 0000 	mov.w	r0, #0
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop

08009084 <turn_off_all_5641as_display_terminals>:
    /* Turn Off all the terminals of the 5641AS 7-segment Display Device. */
    turn_off_all_5641as_display_terminals();
}

static void turn_off_all_5641as_display_terminals()
{
 8009084:	b510      	push	{r4, lr}
    /* Turn Off all the terminals connected to the 5641AS 7-segment Display Device. */
    HAL_GPIO_WritePin(p_display_peripherals->K1.GPIO_Port, p_display_peripherals->K1.GPIO_Pin, GPIO_PIN_SET);
 8009086:	4c29      	ldr	r4, [pc, #164]	; (800912c <turn_off_all_5641as_display_terminals+0xa8>)
 8009088:	2201      	movs	r2, #1
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800908e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009090:	f003 fba6 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K2.GPIO_Port, p_display_peripherals->K2.GPIO_Pin, GPIO_PIN_SET);
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	2201      	movs	r2, #1
 8009098:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800909a:	f8d3 0036 	ldr.w	r0, [r3, #54]	; 0x36
 800909e:	f003 fb9f 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K3.GPIO_Port, p_display_peripherals->K3.GPIO_Pin, GPIO_PIN_SET);
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80090aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80090ac:	f003 fb98 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_SET);
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
 80090b8:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
 80090bc:	f003 fb90 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, GPIO_PIN_RESET);
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	8899      	ldrh	r1, [r3, #4]
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	f003 fb8a 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->B.GPIO_Port, p_display_peripherals->B.GPIO_Pin, GPIO_PIN_RESET);
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	8959      	ldrh	r1, [r3, #10]
 80090d2:	f8d3 0006 	ldr.w	r0, [r3, #6]
 80090d6:	f003 fb83 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->C.GPIO_Port, p_display_peripherals->C.GPIO_Pin, GPIO_PIN_RESET);
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	2200      	movs	r2, #0
 80090de:	8a19      	ldrh	r1, [r3, #16]
 80090e0:	68d8      	ldr	r0, [r3, #12]
 80090e2:	f003 fb7d 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->D.GPIO_Port, p_display_peripherals->D.GPIO_Pin, GPIO_PIN_RESET);
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	8ad9      	ldrh	r1, [r3, #22]
 80090ec:	f8d3 0012 	ldr.w	r0, [r3, #18]
 80090f0:	f003 fb76 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->E.GPIO_Port, p_display_peripherals->E.GPIO_Pin, GPIO_PIN_RESET);
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	8b99      	ldrh	r1, [r3, #28]
 80090fa:	6998      	ldr	r0, [r3, #24]
 80090fc:	f003 fb70 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->F.GPIO_Port, p_display_peripherals->F.GPIO_Pin, GPIO_PIN_RESET);
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	2200      	movs	r2, #0
 8009104:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009106:	f8d3 001e 	ldr.w	r0, [r3, #30]
 800910a:	f003 fb69 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->G.GPIO_Port, p_display_peripherals->G.GPIO_Pin, GPIO_PIN_RESET);
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8009114:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009116:	f003 fb63 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, GPIO_PIN_RESET);
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	2200      	movs	r2, #0
}
 800911e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, GPIO_PIN_RESET);
 8009122:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8009124:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 8009128:	f003 bb5a 	b.w	800c7e0 <HAL_GPIO_WritePin>
 800912c:	20000058 	.word	0x20000058

08009130 <show_custom_display_output>:
{
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	4680      	mov	r8, r0
 8009136:	460f      	mov	r7, r1
 8009138:	4616      	mov	r6, r2
 800913a:	461d      	mov	r5, r3
 800913c:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, A_pin_state);
 800913e:	4c36      	ldr	r4, [pc, #216]	; (8009218 <show_custom_display_output+0xe8>)
{
 8009140:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009144:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 800914e:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
    turn_off_all_5641as_display_terminals();
 8009152:	f7ff ff97 	bl	8009084 <turn_off_all_5641as_display_terminals>
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, A_pin_state);
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	8891      	ldrh	r1, [r2, #4]
 800915a:	6810      	ldr	r0, [r2, #0]
 800915c:	4642      	mov	r2, r8
 800915e:	f003 fb3f 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->B.GPIO_Port, p_display_peripherals->B.GPIO_Pin, B_pin_state);
 8009162:	6820      	ldr	r0, [r4, #0]
 8009164:	463a      	mov	r2, r7
 8009166:	8941      	ldrh	r1, [r0, #10]
 8009168:	f8d0 0006 	ldr.w	r0, [r0, #6]
 800916c:	f003 fb38 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->C.GPIO_Port, p_display_peripherals->C.GPIO_Pin, C_pin_state);
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	4632      	mov	r2, r6
 8009174:	8a01      	ldrh	r1, [r0, #16]
 8009176:	68c0      	ldr	r0, [r0, #12]
 8009178:	f003 fb32 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->D.GPIO_Port, p_display_peripherals->D.GPIO_Pin, D_pin_state);
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	462a      	mov	r2, r5
 8009180:	8ac1      	ldrh	r1, [r0, #22]
 8009182:	f8d0 0012 	ldr.w	r0, [r0, #18]
 8009186:	f003 fb2b 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->E.GPIO_Port, p_display_peripherals->E.GPIO_Pin, E_pin_state);
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	461a      	mov	r2, r3
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	8b99      	ldrh	r1, [r3, #28]
 8009192:	6998      	ldr	r0, [r3, #24]
 8009194:	f003 fb24 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->F.GPIO_Port, p_display_peripherals->F.GPIO_Pin, F_pin_state);
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	465a      	mov	r2, fp
 800919c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800919e:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80091a2:	f003 fb1d 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->G.GPIO_Port, p_display_peripherals->G.GPIO_Pin, G_pin_state);
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	4652      	mov	r2, sl
 80091aa:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80091ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80091ae:	f003 fb17 	bl	800c7e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, Dp_pin_state);
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	464a      	mov	r2, r9
 80091b6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 80091b8:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 80091bc:	f003 fb10 	bl	800c7e0 <HAL_GPIO_WritePin>
    switch (currently_enabled_5641as_7segment_display)
 80091c0:	4b16      	ldr	r3, [pc, #88]	; (800921c <show_custom_display_output+0xec>)
 80091c2:	781a      	ldrb	r2, [r3, #0]
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 80091c4:	6823      	ldr	r3, [r4, #0]
    switch (currently_enabled_5641as_7segment_display)
 80091c6:	2a01      	cmp	r2, #1
 80091c8:	d00c      	beq.n	80091e4 <show_custom_display_output+0xb4>
 80091ca:	2a02      	cmp	r2, #2
 80091cc:	d01a      	beq.n	8009204 <show_custom_display_output+0xd4>
 80091ce:	b192      	cbz	r2, 80091f6 <show_custom_display_output+0xc6>
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
 80091d6:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
}
 80091da:	b003      	add	sp, #12
 80091dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 80091e0:	f003 bafe 	b.w	800c7e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K2.GPIO_Port, p_display_peripherals->K2.GPIO_Pin, GPIO_PIN_RESET);
 80091e4:	2200      	movs	r2, #0
 80091e6:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80091e8:	f8d3 0036 	ldr.w	r0, [r3, #54]	; 0x36
}
 80091ec:	b003      	add	sp, #12
 80091ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 80091f2:	f003 baf5 	b.w	800c7e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K1.GPIO_Port, p_display_peripherals->K1.GPIO_Pin, GPIO_PIN_RESET);
 80091f6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80091f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 80091fa:	b003      	add	sp, #12
 80091fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8009200:	f003 baee 	b.w	800c7e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K3.GPIO_Port, p_display_peripherals->K3.GPIO_Pin, GPIO_PIN_RESET);
 8009204:	2200      	movs	r2, #0
 8009206:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800920a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
 800920c:	b003      	add	sp, #12
 800920e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8009212:	f003 bae5 	b.w	800c7e0 <HAL_GPIO_WritePin>
 8009216:	bf00      	nop
 8009218:	20000058 	.word	0x20000058
 800921c:	20000044 	.word	0x20000044

08009220 <init_5641as_display_module>:
{
 8009220:	b410      	push	{r4}
    p_htim = htim;
 8009222:	4c05      	ldr	r4, [pc, #20]	; (8009238 <init_5641as_display_module+0x18>)
 8009224:	6020      	str	r0, [r4, #0]
    p_display_peripherals = peripherals;
 8009226:	4c05      	ldr	r4, [pc, #20]	; (800923c <init_5641as_display_module+0x1c>)
 8009228:	6021      	str	r1, [r4, #0]
    display_on_time_steps = on_time_steps;
 800922a:	4c05      	ldr	r4, [pc, #20]	; (8009240 <init_5641as_display_module+0x20>)
    display_off_time_steps = off_time_steps;
 800922c:	4905      	ldr	r1, [pc, #20]	; (8009244 <init_5641as_display_module+0x24>)
    display_on_time_steps = on_time_steps;
 800922e:	6022      	str	r2, [r4, #0]
}
 8009230:	bc10      	pop	{r4}
    display_off_time_steps = off_time_steps;
 8009232:	600b      	str	r3, [r1, #0]
    HAL_TIM_Base_Start_IT(p_htim);
 8009234:	f003 bf02 	b.w	800d03c <HAL_TIM_Base_Start_IT>
 8009238:	2000005c 	.word	0x2000005c
 800923c:	20000058 	.word	0x20000058
 8009240:	20000054 	.word	0x20000054
 8009244:	20000050 	.word	0x20000050

08009248 <start_5641as_display_module>:
 8009248:	4b01      	ldr	r3, [pc, #4]	; (8009250 <start_5641as_display_module+0x8>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	f003 bef6 	b.w	800d03c <HAL_TIM_Base_Start_IT>
 8009250:	2000005c 	.word	0x2000005c

08009254 <stop_5641as_display_module>:
    HAL_TIM_Base_Stop_IT(p_htim);
 8009254:	4b01      	ldr	r3, [pc, #4]	; (800925c <stop_5641as_display_module+0x8>)
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	f003 bf1c 	b.w	800d094 <HAL_TIM_Base_Stop_IT>
 800925c:	2000005c 	.word	0x2000005c

08009260 <set_5641as_display_output>:
        switch (display_output[current_display_output])
 8009260:	8803      	ldrh	r3, [r0, #0]
{
 8009262:	4602      	mov	r2, r0
        switch (display_output[current_display_output])
 8009264:	2b5d      	cmp	r3, #93	; 0x5d
 8009266:	d841      	bhi.n	80092ec <set_5641as_display_output+0x8c>
 8009268:	2b40      	cmp	r3, #64	; 0x40
 800926a:	d84d      	bhi.n	8009308 <set_5641as_display_output+0xa8>
 800926c:	b143      	cbz	r3, 8009280 <set_5641as_display_output+0x20>
 800926e:	3b20      	subs	r3, #32
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b1d      	cmp	r3, #29
 8009274:	d845      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 8009276:	495b      	ldr	r1, [pc, #364]	; (80093e4 <set_5641as_display_output+0x184>)
 8009278:	fa21 f303 	lsr.w	r3, r1, r3
 800927c:	07db      	lsls	r3, r3, #31
 800927e:	d540      	bpl.n	8009302 <set_5641as_display_output+0xa2>
 8009280:	8853      	ldrh	r3, [r2, #2]
 8009282:	2b5d      	cmp	r3, #93	; 0x5d
 8009284:	d851      	bhi.n	800932a <set_5641as_display_output+0xca>
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d85d      	bhi.n	8009346 <set_5641as_display_output+0xe6>
 800928a:	b143      	cbz	r3, 800929e <set_5641as_display_output+0x3e>
 800928c:	3b20      	subs	r3, #32
 800928e:	b29b      	uxth	r3, r3
 8009290:	2b1d      	cmp	r3, #29
 8009292:	d836      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 8009294:	4953      	ldr	r1, [pc, #332]	; (80093e4 <set_5641as_display_output+0x184>)
 8009296:	fa21 f303 	lsr.w	r3, r1, r3
 800929a:	07db      	lsls	r3, r3, #31
 800929c:	d531      	bpl.n	8009302 <set_5641as_display_output+0xa2>
 800929e:	8893      	ldrh	r3, [r2, #4]
 80092a0:	2b5d      	cmp	r3, #93	; 0x5d
 80092a2:	d861      	bhi.n	8009368 <set_5641as_display_output+0x108>
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d86d      	bhi.n	8009384 <set_5641as_display_output+0x124>
 80092a8:	b143      	cbz	r3, 80092bc <set_5641as_display_output+0x5c>
 80092aa:	3b20      	subs	r3, #32
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b1d      	cmp	r3, #29
 80092b0:	d827      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 80092b2:	494c      	ldr	r1, [pc, #304]	; (80093e4 <set_5641as_display_output+0x184>)
 80092b4:	fa21 f303 	lsr.w	r3, r1, r3
 80092b8:	07db      	lsls	r3, r3, #31
 80092ba:	d522      	bpl.n	8009302 <set_5641as_display_output+0xa2>
 80092bc:	88d3      	ldrh	r3, [r2, #6]
 80092be:	2b5d      	cmp	r3, #93	; 0x5d
 80092c0:	d871      	bhi.n	80093a6 <set_5641as_display_output+0x146>
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d87d      	bhi.n	80093c2 <set_5641as_display_output+0x162>
 80092c6:	b143      	cbz	r3, 80092da <set_5641as_display_output+0x7a>
 80092c8:	3b20      	subs	r3, #32
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	2b1d      	cmp	r3, #29
 80092ce:	d818      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 80092d0:	4944      	ldr	r1, [pc, #272]	; (80093e4 <set_5641as_display_output+0x184>)
 80092d2:	fa21 f303 	lsr.w	r3, r1, r3
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d513      	bpl.n	8009302 <set_5641as_display_output+0xa2>
    return Display_5641AS_EC_OK;
 80092da:	2300      	movs	r3, #0
{
 80092dc:	b410      	push	{r4}
        display_5641as_output[current_display_output] = display_output[current_display_output];
 80092de:	4c42      	ldr	r4, [pc, #264]	; (80093e8 <set_5641as_display_output+0x188>)
 80092e0:	6810      	ldr	r0, [r2, #0]
 80092e2:	6851      	ldr	r1, [r2, #4]
 80092e4:	c403      	stmia	r4!, {r0, r1}
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	bc10      	pop	{r4}
 80092ea:	4770      	bx	lr
        switch (display_output[current_display_output])
 80092ec:	2b7c      	cmp	r3, #124	; 0x7c
 80092ee:	d815      	bhi.n	800931c <set_5641as_display_output+0xbc>
 80092f0:	2b5e      	cmp	r3, #94	; 0x5e
 80092f2:	d006      	beq.n	8009302 <set_5641as_display_output+0xa2>
 80092f4:	493d      	ldr	r1, [pc, #244]	; (80093ec <set_5641as_display_output+0x18c>)
 80092f6:	3b5f      	subs	r3, #95	; 0x5f
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	fa21 f303 	lsr.w	r3, r1, r3
 80092fe:	07d8      	lsls	r0, r3, #31
 8009300:	d4be      	bmi.n	8009280 <set_5641as_display_output+0x20>
 8009302:	2304      	movs	r3, #4
}
 8009304:	4618      	mov	r0, r3
 8009306:	4770      	bx	lr
        switch (display_output[current_display_output])
 8009308:	4939      	ldr	r1, [pc, #228]	; (80093f0 <set_5641as_display_output+0x190>)
 800930a:	3b41      	subs	r3, #65	; 0x41
 800930c:	b29b      	uxth	r3, r3
 800930e:	fa21 f303 	lsr.w	r3, r1, r3
 8009312:	07d9      	lsls	r1, r3, #31
 8009314:	d4b4      	bmi.n	8009280 <set_5641as_display_output+0x20>
 8009316:	2304      	movs	r3, #4
}
 8009318:	4618      	mov	r0, r3
 800931a:	4770      	bx	lr
        switch (display_output[current_display_output])
 800931c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009320:	2b09      	cmp	r3, #9
 8009322:	d8ee      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 8009324:	8853      	ldrh	r3, [r2, #2]
 8009326:	2b5d      	cmp	r3, #93	; 0x5d
 8009328:	d9ad      	bls.n	8009286 <set_5641as_display_output+0x26>
 800932a:	2b7c      	cmp	r3, #124	; 0x7c
 800932c:	d815      	bhi.n	800935a <set_5641as_display_output+0xfa>
 800932e:	2b5e      	cmp	r3, #94	; 0x5e
 8009330:	d0e7      	beq.n	8009302 <set_5641as_display_output+0xa2>
 8009332:	492e      	ldr	r1, [pc, #184]	; (80093ec <set_5641as_display_output+0x18c>)
 8009334:	3b5f      	subs	r3, #95	; 0x5f
 8009336:	b29b      	uxth	r3, r3
 8009338:	fa21 f303 	lsr.w	r3, r1, r3
 800933c:	07d8      	lsls	r0, r3, #31
 800933e:	d4ae      	bmi.n	800929e <set_5641as_display_output+0x3e>
 8009340:	2304      	movs	r3, #4
}
 8009342:	4618      	mov	r0, r3
 8009344:	4770      	bx	lr
        switch (display_output[current_display_output])
 8009346:	492a      	ldr	r1, [pc, #168]	; (80093f0 <set_5641as_display_output+0x190>)
 8009348:	3b41      	subs	r3, #65	; 0x41
 800934a:	b29b      	uxth	r3, r3
 800934c:	fa21 f303 	lsr.w	r3, r1, r3
 8009350:	07d9      	lsls	r1, r3, #31
 8009352:	d4a4      	bmi.n	800929e <set_5641as_display_output+0x3e>
 8009354:	2304      	movs	r3, #4
}
 8009356:	4618      	mov	r0, r3
 8009358:	4770      	bx	lr
        switch (display_output[current_display_output])
 800935a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800935e:	2b09      	cmp	r3, #9
 8009360:	d8cf      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 8009362:	8893      	ldrh	r3, [r2, #4]
 8009364:	2b5d      	cmp	r3, #93	; 0x5d
 8009366:	d99d      	bls.n	80092a4 <set_5641as_display_output+0x44>
 8009368:	2b7c      	cmp	r3, #124	; 0x7c
 800936a:	d815      	bhi.n	8009398 <set_5641as_display_output+0x138>
 800936c:	2b5e      	cmp	r3, #94	; 0x5e
 800936e:	d0c8      	beq.n	8009302 <set_5641as_display_output+0xa2>
 8009370:	491e      	ldr	r1, [pc, #120]	; (80093ec <set_5641as_display_output+0x18c>)
 8009372:	3b5f      	subs	r3, #95	; 0x5f
 8009374:	b29b      	uxth	r3, r3
 8009376:	fa21 f303 	lsr.w	r3, r1, r3
 800937a:	07d8      	lsls	r0, r3, #31
 800937c:	d49e      	bmi.n	80092bc <set_5641as_display_output+0x5c>
 800937e:	2304      	movs	r3, #4
}
 8009380:	4618      	mov	r0, r3
 8009382:	4770      	bx	lr
        switch (display_output[current_display_output])
 8009384:	491a      	ldr	r1, [pc, #104]	; (80093f0 <set_5641as_display_output+0x190>)
 8009386:	3b41      	subs	r3, #65	; 0x41
 8009388:	b29b      	uxth	r3, r3
 800938a:	fa21 f303 	lsr.w	r3, r1, r3
 800938e:	07d9      	lsls	r1, r3, #31
 8009390:	d494      	bmi.n	80092bc <set_5641as_display_output+0x5c>
 8009392:	2304      	movs	r3, #4
}
 8009394:	4618      	mov	r0, r3
 8009396:	4770      	bx	lr
        switch (display_output[current_display_output])
 8009398:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800939c:	2b09      	cmp	r3, #9
 800939e:	d8b0      	bhi.n	8009302 <set_5641as_display_output+0xa2>
 80093a0:	88d3      	ldrh	r3, [r2, #6]
 80093a2:	2b5d      	cmp	r3, #93	; 0x5d
 80093a4:	d98d      	bls.n	80092c2 <set_5641as_display_output+0x62>
 80093a6:	2b7c      	cmp	r3, #124	; 0x7c
 80093a8:	d815      	bhi.n	80093d6 <set_5641as_display_output+0x176>
 80093aa:	2b5e      	cmp	r3, #94	; 0x5e
 80093ac:	d0a9      	beq.n	8009302 <set_5641as_display_output+0xa2>
 80093ae:	490f      	ldr	r1, [pc, #60]	; (80093ec <set_5641as_display_output+0x18c>)
 80093b0:	3b5f      	subs	r3, #95	; 0x5f
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	fa21 f303 	lsr.w	r3, r1, r3
 80093b8:	07d8      	lsls	r0, r3, #31
 80093ba:	d48e      	bmi.n	80092da <set_5641as_display_output+0x7a>
 80093bc:	2304      	movs	r3, #4
}
 80093be:	4618      	mov	r0, r3
 80093c0:	4770      	bx	lr
        switch (display_output[current_display_output])
 80093c2:	490b      	ldr	r1, [pc, #44]	; (80093f0 <set_5641as_display_output+0x190>)
 80093c4:	3b41      	subs	r3, #65	; 0x41
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	fa21 f303 	lsr.w	r3, r1, r3
 80093cc:	07d9      	lsls	r1, r3, #31
 80093ce:	d484      	bmi.n	80092da <set_5641as_display_output+0x7a>
 80093d0:	2304      	movs	r3, #4
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	4770      	bx	lr
        switch (display_output[current_display_output])
 80093d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80093da:	2b09      	cmp	r3, #9
 80093dc:	f67f af7d 	bls.w	80092da <set_5641as_display_output+0x7a>
 80093e0:	e78f      	b.n	8009302 <set_5641as_display_output+0xa2>
 80093e2:	bf00      	nop
 80093e4:	23ff6085 	.word	0x23ff6085
 80093e8:	20000048 	.word	0x20000048
 80093ec:	2069a6b9 	.word	0x2069a6b9
 80093f0:	1414c8bf 	.word	0x1414c8bf

080093f4 <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == p_htim->Instance)
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80093f6:	6802      	ldr	r2, [r0, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d003      	beq.n	8009408 <HAL_TIM_PeriodElapsedCallback+0x14>
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	2000005c 	.word	0x2000005c
{
 8009408:	b530      	push	{r4, r5, lr}
        if (current_display_on_time_step != display_on_time_steps) // If true, then the current time step of the @ref display_5641as is at the On time of the currently simulated PWM output at the 5641AS Device.
 800940a:	4c7f      	ldr	r4, [pc, #508]	; (8009608 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800940c:	4d7f      	ldr	r5, [pc, #508]	; (800960c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	682a      	ldr	r2, [r5, #0]
{
 8009412:	b085      	sub	sp, #20
        if (current_display_on_time_step != display_on_time_steps) // If true, then the current time step of the @ref display_5641as is at the On time of the currently simulated PWM output at the 5641AS Device.
 8009414:	4293      	cmp	r3, r2
 8009416:	f000 80ff 	beq.w	8009618 <HAL_TIM_PeriodElapsedCallback+0x224>
            if (current_display_on_time_step == 0)
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 8120 	bne.w	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                switch (display_5641as_output[currently_enabled_5641as_7segment_display])
 8009420:	4a7b      	ldr	r2, [pc, #492]	; (8009610 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8009422:	4b7c      	ldr	r3, [pc, #496]	; (8009614 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800942a:	3b22      	subs	r3, #34	; 0x22
 800942c:	2be7      	cmp	r3, #231	; 0xe7
 800942e:	f200 812a 	bhi.w	8009686 <HAL_TIM_PeriodElapsedCallback+0x292>
 8009432:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009436:	0261      	.short	0x0261
 8009438:	01280128 	.word	0x01280128
 800943c:	01280128 	.word	0x01280128
 8009440:	0128025b 	.word	0x0128025b
 8009444:	01280128 	.word	0x01280128
 8009448:	01280128 	.word	0x01280128
 800944c:	02520257 	.word	0x02520257
 8009450:	01080128 	.word	0x01080128
 8009454:	024b012d 	.word	0x024b012d
 8009458:	021b0244 	.word	0x021b0244
 800945c:	0225013f 	.word	0x0225013f
 8009460:	013a021f 	.word	0x013a021f
 8009464:	01280216 	.word	0x01280216
 8009468:	01280128 	.word	0x01280128
 800946c:	012801ba 	.word	0x012801ba
 8009470:	01280128 	.word	0x01280128
 8009474:	013a01b3 	.word	0x013a01b3
 8009478:	01080159 	.word	0x01080159
 800947c:	014c01ad 	.word	0x014c01ad
 8009480:	01a00128 	.word	0x01a00128
 8009484:	01280128 	.word	0x01280128
 8009488:	01dd0128 	.word	0x01dd0128
 800948c:	01280128 	.word	0x01280128
 8009490:	01d00108 	.word	0x01d00108
 8009494:	01280128 	.word	0x01280128
 8009498:	0128013f 	.word	0x0128013f
 800949c:	012801c9 	.word	0x012801c9
 80094a0:	01280128 	.word	0x01280128
 80094a4:	01280128 	.word	0x01280128
 80094a8:	01280159 	.word	0x01280159
 80094ac:	012801c1 	.word	0x012801c1
 80094b0:	0128020f 	.word	0x0128020f
 80094b4:	02090128 	.word	0x02090128
 80094b8:	01fd0203 	.word	0x01fd0203
 80094bc:	014c0128 	.word	0x014c0128
 80094c0:	01f60128 	.word	0x01f60128
 80094c4:	012801ef 	.word	0x012801ef
 80094c8:	012d0128 	.word	0x012d0128
 80094cc:	01e80128 	.word	0x01e80128
 80094d0:	012801e3 	.word	0x012801e3
 80094d4:	019a0128 	.word	0x019a0128
 80094d8:	018d0128 	.word	0x018d0128
 80094dc:	01280180 	.word	0x01280180
 80094e0:	01280128 	.word	0x01280128
 80094e4:	01280128 	.word	0x01280128
 80094e8:	012d0128 	.word	0x012d0128
 80094ec:	01280128 	.word	0x01280128
 80094f0:	01280128 	.word	0x01280128
 80094f4:	01280128 	.word	0x01280128
 80094f8:	01280128 	.word	0x01280128
 80094fc:	01280128 	.word	0x01280128
 8009500:	01280128 	.word	0x01280128
 8009504:	01280128 	.word	0x01280128
 8009508:	01280128 	.word	0x01280128
 800950c:	01280128 	.word	0x01280128
 8009510:	01280128 	.word	0x01280128
 8009514:	01280128 	.word	0x01280128
 8009518:	01280128 	.word	0x01280128
 800951c:	01280128 	.word	0x01280128
 8009520:	01280128 	.word	0x01280128
 8009524:	01280128 	.word	0x01280128
 8009528:	01280128 	.word	0x01280128
 800952c:	01280128 	.word	0x01280128
 8009530:	01280128 	.word	0x01280128
 8009534:	01280128 	.word	0x01280128
 8009538:	01280128 	.word	0x01280128
 800953c:	01280128 	.word	0x01280128
 8009540:	01280128 	.word	0x01280128
 8009544:	01280128 	.word	0x01280128
 8009548:	01280128 	.word	0x01280128
 800954c:	01280128 	.word	0x01280128
 8009550:	01280128 	.word	0x01280128
 8009554:	01280128 	.word	0x01280128
 8009558:	01280128 	.word	0x01280128
 800955c:	01280128 	.word	0x01280128
 8009560:	01280128 	.word	0x01280128
 8009564:	01280128 	.word	0x01280128
 8009568:	01280128 	.word	0x01280128
 800956c:	01280128 	.word	0x01280128
 8009570:	01280128 	.word	0x01280128
 8009574:	01280128 	.word	0x01280128
 8009578:	01280128 	.word	0x01280128
 800957c:	01280128 	.word	0x01280128
 8009580:	01280128 	.word	0x01280128
 8009584:	01280128 	.word	0x01280128
 8009588:	01280128 	.word	0x01280128
 800958c:	01280128 	.word	0x01280128
 8009590:	01280128 	.word	0x01280128
 8009594:	01280128 	.word	0x01280128
 8009598:	01280128 	.word	0x01280128
 800959c:	01280128 	.word	0x01280128
 80095a0:	01280128 	.word	0x01280128
 80095a4:	01280128 	.word	0x01280128
 80095a8:	01280128 	.word	0x01280128
 80095ac:	01280128 	.word	0x01280128
 80095b0:	01280128 	.word	0x01280128
 80095b4:	01280128 	.word	0x01280128
 80095b8:	01280128 	.word	0x01280128
 80095bc:	01280128 	.word	0x01280128
 80095c0:	01280128 	.word	0x01280128
 80095c4:	01280128 	.word	0x01280128
 80095c8:	01280128 	.word	0x01280128
 80095cc:	01280128 	.word	0x01280128
 80095d0:	01280128 	.word	0x01280128
 80095d4:	01280128 	.word	0x01280128
 80095d8:	01280128 	.word	0x01280128
 80095dc:	01280128 	.word	0x01280128
 80095e0:	01280128 	.word	0x01280128
 80095e4:	01280128 	.word	0x01280128
 80095e8:	01280128 	.word	0x01280128
 80095ec:	01280128 	.word	0x01280128
 80095f0:	01790128 	.word	0x01790128
 80095f4:	016c0173 	.word	0x016c0173
 80095f8:	015f0165 	.word	0x015f0165
 80095fc:	0234023b 	.word	0x0234023b
 8009600:	022c022e 	.word	0x022c022e
 8009604:	023f      	.short	0x023f
 8009606:	bf00      	nop
 8009608:	20000040 	.word	0x20000040
 800960c:	20000054 	.word	0x20000054
 8009610:	20000044 	.word	0x20000044
 8009614:	20000048 	.word	0x20000048
            if (current_display_off_time_step == 0)
 8009618:	4dbd      	ldr	r5, [pc, #756]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8172 	beq.w	8009906 <HAL_TIM_PeriodElapsedCallback+0x512>
            if (current_display_off_time_step >= display_off_time_steps)
 8009622:	4abc      	ldr	r2, [pc, #752]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x520>)
            current_display_off_time_step++;
 8009624:	3301      	adds	r3, #1
            if (current_display_off_time_step >= display_off_time_steps)
 8009626:	6812      	ldr	r2, [r2, #0]
            current_display_off_time_step++;
 8009628:	602b      	str	r3, [r5, #0]
            if (current_display_off_time_step >= display_off_time_steps)
 800962a:	4293      	cmp	r3, r2
 800962c:	d309      	bcc.n	8009642 <HAL_TIM_PeriodElapsedCallback+0x24e>
                current_display_on_time_step = 0;
 800962e:	2100      	movs	r1, #0
                currently_enabled_5641as_7segment_display++;
 8009630:	4ab9      	ldr	r2, [pc, #740]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0x524>)
                current_display_on_time_step = 0;
 8009632:	6021      	str	r1, [r4, #0]
                currently_enabled_5641as_7segment_display++;
 8009634:	7813      	ldrb	r3, [r2, #0]
                current_display_off_time_step = 0;
 8009636:	6029      	str	r1, [r5, #0]
                currently_enabled_5641as_7segment_display++;
 8009638:	3301      	adds	r3, #1
 800963a:	b2db      	uxtb	r3, r3
                if (currently_enabled_5641as_7segment_display == 4)
 800963c:	2b04      	cmp	r3, #4
                currently_enabled_5641as_7segment_display++;
 800963e:	7013      	strb	r3, [r2, #0]
                if (currently_enabled_5641as_7segment_display == 4)
 8009640:	d01e      	beq.n	8009680 <HAL_TIM_PeriodElapsedCallback+0x28c>
}
 8009642:	b005      	add	sp, #20
 8009644:	bd30      	pop	{r4, r5, pc}
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009646:	2200      	movs	r2, #0
 8009648:	2301      	movs	r3, #1
 800964a:	9203      	str	r2, [sp, #12]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800964c:	9202      	str	r2, [sp, #8]
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	4619      	mov	r1, r3
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fd6a 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 800965c:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 800965e:	682a      	ldr	r2, [r5, #0]
            current_display_on_time_step++;
 8009660:	3301      	adds	r3, #1
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8009662:	4293      	cmp	r3, r2
            current_display_on_time_step++;
 8009664:	6023      	str	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8009666:	d3ec      	bcc.n	8009642 <HAL_TIM_PeriodElapsedCallback+0x24e>
 8009668:	4baa      	ldr	r3, [pc, #680]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e8      	bne.n	8009642 <HAL_TIM_PeriodElapsedCallback+0x24e>
                currently_enabled_5641as_7segment_display++;
 8009670:	4aa9      	ldr	r2, [pc, #676]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0x524>)
                current_display_on_time_step = 0;
 8009672:	6023      	str	r3, [r4, #0]
                currently_enabled_5641as_7segment_display++;
 8009674:	7813      	ldrb	r3, [r2, #0]
 8009676:	3301      	adds	r3, #1
 8009678:	b2db      	uxtb	r3, r3
                if (currently_enabled_5641as_7segment_display == 4)
 800967a:	2b04      	cmp	r3, #4
                currently_enabled_5641as_7segment_display++;
 800967c:	7013      	strb	r3, [r2, #0]
                if (currently_enabled_5641as_7segment_display == 4)
 800967e:	d1e0      	bne.n	8009642 <HAL_TIM_PeriodElapsedCallback+0x24e>
                    currently_enabled_5641as_7segment_display = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	7013      	strb	r3, [r2, #0]
 8009684:	e7dd      	b.n	8009642 <HAL_TIM_PeriodElapsedCallback+0x24e>
    turn_off_all_5641as_display_terminals();
 8009686:	f7ff fcfd 	bl	8009084 <turn_off_all_5641as_display_terminals>
            current_display_on_time_step++;
 800968a:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 800968c:	682a      	ldr	r2, [r5, #0]
}
 800968e:	e7e7      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009690:	2300      	movs	r3, #0
 8009692:	2201      	movs	r2, #1
 8009694:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009698:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800969a:	4618      	mov	r0, r3
 800969c:	4611      	mov	r1, r2
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	f7ff fd46 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 80096a4:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 80096a6:	682a      	ldr	r2, [r5, #0]
                        break;
 80096a8:	e7da      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80096aa:	2301      	movs	r3, #1
 80096ac:	2200      	movs	r2, #0
 80096ae:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80096b2:	e7cc      	b.n	800964e <HAL_TIM_PeriodElapsedCallback+0x25a>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80096b4:	2100      	movs	r1, #0
 80096b6:	2301      	movs	r3, #1
 80096b8:	9103      	str	r1, [sp, #12]
 80096ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80096be:	9100      	str	r1, [sp, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fd34 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 80096c8:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 80096ca:	682a      	ldr	r2, [r5, #0]
                        break;
 80096cc:	e7c8      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80096ce:	2001      	movs	r0, #1
 80096d0:	2300      	movs	r3, #0
 80096d2:	e9cd 0000 	strd	r0, r0, [sp]
 80096d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80096da:	461a      	mov	r2, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	f7ff fd27 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 80096e2:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 80096e4:	682a      	ldr	r2, [r5, #0]
                        break;
 80096e6:	e7bb      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80096e8:	2200      	movs	r2, #0
 80096ea:	2301      	movs	r3, #1
 80096ec:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	e7d2      	b.n	800969a <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 80096f4:	2201      	movs	r2, #1
 80096f6:	2300      	movs	r3, #0
 80096f8:	9203      	str	r2, [sp, #12]
 80096fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80096fe:	e7cc      	b.n	800969a <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET);
 8009700:	2301      	movs	r3, #1
 8009702:	2200      	movs	r2, #0
 8009704:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009708:	9201      	str	r2, [sp, #4]
 800970a:	9200      	str	r2, [sp, #0]
 800970c:	e7a1      	b.n	8009652 <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET);
 800970e:	2301      	movs	r3, #1
 8009710:	2200      	movs	r2, #0
 8009712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009716:	e9cd 3200 	strd	r3, r2, [sp]
 800971a:	e79b      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 800971c:	2300      	movs	r3, #0
 800971e:	2201      	movs	r2, #1
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009726:	e7b8      	b.n	800969a <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8009728:	2301      	movs	r3, #1
 800972a:	2200      	movs	r2, #0
 800972c:	e9cd 3300 	strd	r3, r3, [sp]
 8009730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009734:	e78d      	b.n	8009652 <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009736:	2100      	movs	r1, #0
 8009738:	2301      	movs	r3, #1
 800973a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800973e:	9101      	str	r1, [sp, #4]
 8009740:	461a      	mov	r2, r3
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	4608      	mov	r0, r1
 8009746:	f7ff fcf3 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 800974a:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 800974c:	682a      	ldr	r2, [r5, #0]
                        break;
 800974e:	e787      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009750:	2301      	movs	r3, #1
 8009752:	2200      	movs	r2, #0
 8009754:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009758:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	4611      	mov	r1, r2
 800975e:	4610      	mov	r0, r2
 8009760:	f7ff fce6 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 8009764:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8009766:	682a      	ldr	r2, [r5, #0]
                        break;
 8009768:	e77a      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800976a:	2300      	movs	r3, #0
 800976c:	2201      	movs	r2, #1
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009774:	e7c9      	b.n	800970a <HAL_TIM_PeriodElapsedCallback+0x316>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009776:	2201      	movs	r2, #1
 8009778:	2300      	movs	r3, #0
 800977a:	4611      	mov	r1, r2
 800977c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009780:	4618      	mov	r0, r3
 8009782:	e9cd 2200 	strd	r2, r2, [sp]
 8009786:	f7ff fcd3 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 800978a:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 800978c:	682a      	ldr	r2, [r5, #0]
                        break;
 800978e:	e767      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009790:	2301      	movs	r3, #1
 8009792:	2200      	movs	r2, #0
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800979a:	e77e      	b.n	800969a <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800979c:	2201      	movs	r2, #1
 800979e:	2300      	movs	r3, #0
 80097a0:	e9cd 2200 	strd	r2, r2, [sp]
 80097a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097a8:	e7d8      	b.n	800975c <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80097aa:	2200      	movs	r2, #0
 80097ac:	2301      	movs	r3, #1
 80097ae:	e9cd 2200 	strd	r2, r2, [sp]
 80097b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80097b6:	e7d1      	b.n	800975c <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80097b8:	2100      	movs	r1, #0
 80097ba:	2301      	movs	r3, #1
 80097bc:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80097c0:	461a      	mov	r2, r3
 80097c2:	9103      	str	r1, [sp, #12]
 80097c4:	9100      	str	r1, [sp, #0]
 80097c6:	e745      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80097c8:	2000      	movs	r0, #0
 80097ca:	2301      	movs	r3, #1
 80097cc:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80097d0:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	e781      	b.n	80096da <HAL_TIM_PeriodElapsedCallback+0x2e6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80097d6:	2101      	movs	r1, #1
 80097d8:	2300      	movs	r3, #0
 80097da:	4608      	mov	r0, r1
 80097dc:	461a      	mov	r2, r3
 80097de:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80097e2:	e9cd 1100 	strd	r1, r1, [sp]
 80097e6:	f7ff fca3 	bl	8009130 <show_custom_display_output>
            current_display_on_time_step++;
 80097ea:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 80097ec:	682a      	ldr	r2, [r5, #0]
                        break;
 80097ee:	e737      	b.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80097f0:	2200      	movs	r2, #0
 80097f2:	2301      	movs	r3, #1
 80097f4:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	e7ae      	b.n	800975a <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80097fc:	2301      	movs	r3, #1
 80097fe:	2100      	movs	r1, #0
 8009800:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8009804:	e79b      	b.n	800973e <HAL_TIM_PeriodElapsedCallback+0x34a>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009806:	2201      	movs	r2, #1
 8009808:	2300      	movs	r3, #0
 800980a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800980e:	e9cd 2300 	strd	r2, r3, [sp]
 8009812:	e71f      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009814:	2300      	movs	r3, #0
 8009816:	2201      	movs	r2, #1
 8009818:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800981c:	e9cd 3300 	strd	r3, r3, [sp]
 8009820:	e718      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009822:	2201      	movs	r2, #1
 8009824:	2300      	movs	r3, #0
 8009826:	e9cd 2200 	strd	r2, r2, [sp]
 800982a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800982e:	e711      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009830:	2000      	movs	r0, #0
 8009832:	2301      	movs	r3, #1
 8009834:	9001      	str	r0, [sp, #4]
 8009836:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800983a:	e7ca      	b.n	80097d2 <HAL_TIM_PeriodElapsedCallback+0x3de>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800983c:	2301      	movs	r3, #1
 800983e:	2200      	movs	r2, #0
 8009840:	e9cd 3202 	strd	r3, r2, [sp, #8]
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8009844:	9201      	str	r2, [sp, #4]
 8009846:	e788      	b.n	800975a <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009848:	2301      	movs	r3, #1
 800984a:	2100      	movs	r1, #0
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8009852:	e775      	b.n	8009740 <HAL_TIM_PeriodElapsedCallback+0x34c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009854:	2200      	movs	r2, #0
 8009856:	2301      	movs	r3, #1
 8009858:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800985c:	e9cd 2200 	strd	r2, r2, [sp]
 8009860:	e77c      	b.n	800975c <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009862:	2201      	movs	r2, #1
 8009864:	2300      	movs	r3, #0
 8009866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800986a:	e7eb      	b.n	8009844 <HAL_TIM_PeriodElapsedCallback+0x450>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800986c:	2300      	movs	r3, #0
 800986e:	2201      	movs	r2, #1
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	e742      	b.n	80096fa <HAL_TIM_PeriodElapsedCallback+0x306>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8009874:	2300      	movs	r3, #0
 8009876:	2201      	movs	r2, #1
 8009878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	e76c      	b.n	800975a <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8009880:	2301      	movs	r3, #1
 8009882:	2100      	movs	r1, #0
 8009884:	e9cd 3300 	strd	r3, r3, [sp]
 8009888:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800988c:	e718      	b.n	80096c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800988e:	2301      	movs	r3, #1
 8009890:	e7c1      	b.n	8009816 <HAL_TIM_PeriodElapsedCallback+0x422>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8009892:	2300      	movs	r3, #0
 8009894:	2201      	movs	r2, #1
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800989c:	e75d      	b.n	800975a <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800989e:	2301      	movs	r3, #1
 80098a0:	2100      	movs	r1, #0
 80098a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098a6:	e9cd 3300 	strd	r3, r3, [sp]
 80098aa:	e709      	b.n	80096c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 80098ac:	2301      	movs	r3, #1
 80098ae:	2100      	movs	r1, #0
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	e702      	b.n	80096ba <HAL_TIM_PeriodElapsedCallback+0x2c6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 80098b4:	2201      	movs	r2, #1
 80098b6:	2300      	movs	r3, #0
 80098b8:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80098bc:	e7c2      	b.n	8009844 <HAL_TIM_PeriodElapsedCallback+0x450>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80098be:	2200      	movs	r2, #0
 80098c0:	2301      	movs	r3, #1
 80098c2:	e9cd 2200 	strd	r2, r2, [sp]
 80098c6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80098ca:	e6c2      	b.n	8009652 <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80098cc:	2301      	movs	r3, #1
 80098ce:	2200      	movs	r2, #0
 80098d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80098d4:	e9cd 3200 	strd	r3, r2, [sp]
 80098d8:	e6bc      	b.n	8009654 <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 80098da:	2300      	movs	r3, #0
 80098dc:	2201      	movs	r2, #1
 80098de:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80098e2:	e6b4      	b.n	800964e <HAL_TIM_PeriodElapsedCallback+0x25a>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80098e4:	2300      	movs	r3, #0
 80098e6:	2201      	movs	r2, #1
 80098e8:	9303      	str	r3, [sp, #12]
 80098ea:	e6af      	b.n	800964c <HAL_TIM_PeriodElapsedCallback+0x258>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80098ec:	2300      	movs	r3, #0
 80098ee:	2201      	movs	r2, #1
 80098f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098f4:	9201      	str	r2, [sp, #4]
 80098f6:	e6ab      	b.n	8009650 <HAL_TIM_PeriodElapsedCallback+0x25c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80098f8:	2300      	movs	r3, #0
 80098fa:	2101      	movs	r1, #1
 80098fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009900:	e9cd 3100 	strd	r3, r1, [sp]
 8009904:	e6dc      	b.n	80096c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
    turn_off_all_5641as_display_terminals();
 8009906:	f7ff fbbd 	bl	8009084 <turn_off_all_5641as_display_terminals>
            current_display_off_time_step++;
 800990a:	682b      	ldr	r3, [r5, #0]
}
 800990c:	e689      	b.n	8009622 <HAL_TIM_PeriodElapsedCallback+0x22e>
 800990e:	bf00      	nop
 8009910:	2000003c 	.word	0x2000003c
 8009914:	20000050 	.word	0x20000050
 8009918:	20000044 	.word	0x20000044

0800991c <etx_ota_send_resp.isra.0>:
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
{
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	ETX_OTA_Status  ret;

	ETX_OTA_Response_Packet_t response =
 800991c:	2300      	movs	r3, #0
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 800991e:	4684      	mov	ip, r0
	ETX_OTA_Response_Packet_t response =
 8009920:	22bb      	movs	r2, #187	; 0xbb
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 8009922:	b500      	push	{lr}
	ETX_OTA_Response_Packet_t response =
 8009924:	4816      	ldr	r0, [pc, #88]	; (8009980 <etx_ota_send_resp.isra.0+0x64>)
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 8009926:	b085      	sub	sp, #20
	ETX_OTA_Response_Packet_t response =
 8009928:	9001      	str	r0, [sp, #4]
		.data_len    	= 1U,
		.status      	= response_status,
		.crc			= 0U,
		.eof         	= ETX_OTA_EOF
	};
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 800992a:	2101      	movs	r1, #1
 800992c:	a802      	add	r0, sp, #8
	ETX_OTA_Response_Packet_t response =
 800992e:	f88d 3009 	strb.w	r3, [sp, #9]
 8009932:	f88d 300a 	strb.w	r3, [sp, #10]
 8009936:	f88d 300b 	strb.w	r3, [sp, #11]
 800993a:	f88d 300c 	strb.w	r3, [sp, #12]
 800993e:	f88d c008 	strb.w	ip, [sp, #8]
 8009942:	f88d 200d 	strb.w	r2, [sp, #13]
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 8009946:	f000 faab 	bl	8009ea0 <crc32_mpeg2>

	switch (ETX_OTA_hardware_protocol)
 800994a:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <etx_ota_send_resp.isra.0+0x68>)
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 800994c:	f8cd 0009 	str.w	r0, [sp, #9]
	switch (ETX_OTA_hardware_protocol)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b153      	cbz	r3, 800996a <etx_ota_send_resp.isra.0+0x4e>
 8009954:	2b01      	cmp	r3, #1
 8009956:	d105      	bne.n	8009964 <etx_ota_send_resp.isra.0+0x48>
		case ETX_OTA_hw_Protocol_UART:
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
			ret = HAL_ret_handler(ret);
			break;
		case ETX_OTA_hw_Protocol_BT:
			ret = send_hm10_ota_data((uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8009958:	f242 3228 	movw	r2, #9000	; 0x2328
 800995c:	210a      	movs	r1, #10
 800995e:	a801      	add	r0, sp, #4
 8009960:	f000 ffd6 	bl	800a910 <send_hm10_ota_data>
			#endif
			return ETX_OTA_EC_ERR;
	}

	return ret;
}
 8009964:	b005      	add	sp, #20
 8009966:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 800996a:	4807      	ldr	r0, [pc, #28]	; (8009988 <etx_ota_send_resp.isra.0+0x6c>)
 800996c:	f242 3328 	movw	r3, #9000	; 0x2328
 8009970:	220a      	movs	r2, #10
 8009972:	a901      	add	r1, sp, #4
 8009974:	6800      	ldr	r0, [r0, #0]
 8009976:	f003 ff79 	bl	800d86c <HAL_UART_Transmit>
}
 800997a:	b005      	add	sp, #20
 800997c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009980:	000103aa 	.word	0x000103aa
 8009984:	20000060 	.word	0x20000060
 8009988:	20000480 	.word	0x20000480

0800998c <init_firmware_update_module>:
{
 800998c:	b530      	push	{r4, r5, lr}
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings;
 800998e:	4c2b      	ldr	r4, [pc, #172]	; (8009a3c <init_firmware_update_module+0xb0>)
    Rx_Buffer[0] = 0;
 8009990:	f04f 0c00 	mov.w	ip, #0
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings;
 8009994:	6023      	str	r3, [r4, #0]
{
 8009996:	4603      	mov	r3, r0
 8009998:	4608      	mov	r0, r1
 800999a:	b087      	sub	sp, #28
    p_custom_data = etx_ota_custom_data;
 800999c:	4928      	ldr	r1, [pc, #160]	; (8009a40 <init_firmware_update_module+0xb4>)
 800999e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    ETX_OTA_hardware_protocol = hardware_protocol;
 80099a2:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <init_firmware_update_module+0xb8>)
    p_custom_data = etx_ota_custom_data;
 80099a4:	f8c1 e000 	str.w	lr, [r1]
    p_huart = huart;
 80099a8:	4d27      	ldr	r5, [pc, #156]	; (8009a48 <init_firmware_update_module+0xbc>)
    Rx_Buffer[0] = 0;
 80099aa:	4928      	ldr	r1, [pc, #160]	; (8009a4c <init_firmware_update_module+0xc0>)
    ETX_OTA_hardware_protocol = hardware_protocol;
 80099ac:	7013      	strb	r3, [r2, #0]
    Rx_Buffer[0] = 0;
 80099ae:	f881 c000 	strb.w	ip, [r1]
    p_huart = huart;
 80099b2:	6028      	str	r0, [r5, #0]
    switch (hardware_protocol)
 80099b4:	b17b      	cbz	r3, 80099d6 <init_firmware_update_module+0x4a>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d13d      	bne.n	8009a36 <init_firmware_update_module+0xaa>
            init_hm10_module(p_huart);
 80099ba:	f000 fb59 	bl	800a070 <init_hm10_module>
            ret = disconnect_hm10_from_bt_address();
 80099be:	f000 ff47 	bl	800a850 <disconnect_hm10_from_bt_address>
            if (ret == HM10_BT_Connection_Status_Unknown)
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d037      	beq.n	8009a36 <init_firmware_update_module+0xaa>
            if (HAL_GPIO_ReadPin(p_GPIO_is_hm10_default_settings->GPIO_Port, p_GPIO_is_hm10_default_settings->GPIO_Pin) == GPIO_PIN_SET)
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	8899      	ldrh	r1, [r3, #4]
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	f002 ff02 	bl	800c7d4 <HAL_GPIO_ReadPin>
 80099d0:	2801      	cmp	r0, #1
 80099d2:	d009      	beq.n	80099e8 <init_firmware_update_module+0x5c>
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 80099d4:	6828      	ldr	r0, [r5, #0]
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 80099d6:	2201      	movs	r2, #1
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <init_firmware_update_module+0xc4>)
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 80099da:	491c      	ldr	r1, [pc, #112]	; (8009a4c <init_firmware_update_module+0xc0>)
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 80099dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 80099de:	f004 f86f 	bl	800dac0 <HAL_UART_Receive_IT>
    return ETX_OTA_EC_OK;
 80099e2:	2000      	movs	r0, #0
}
 80099e4:	b007      	add	sp, #28
 80099e6:	bd30      	pop	{r4, r5, pc}
				ret = send_hm10_renew_cmd();
 80099e8:	f000 fba4 	bl	800a134 <send_hm10_renew_cmd>
				if (ret != HM10_EC_OK)
 80099ec:	bb18      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80099ee:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <init_firmware_update_module+0xc8>)
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80099f4:	c303      	stmia	r3!, {r0, r1}
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80099f6:	2109      	movs	r1, #9
 80099f8:	a803      	add	r0, sp, #12
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80099fa:	701a      	strb	r2, [r3, #0]
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80099fc:	f000 fbf6 	bl	800a1ec <set_hm10_name>
                if (ret != HM10_EC_OK)
 8009a00:	b9c8      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                ret = set_hm10_role(HM10_DEFAULT_ROLE);
 8009a02:	2030      	movs	r0, #48	; 0x30
 8009a04:	f000 fd36 	bl	800a474 <set_hm10_role>
                if (ret != HM10_EC_OK)
 8009a08:	b9a8      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 8009a0a:	4b13      	ldr	r3, [pc, #76]	; (8009a58 <init_firmware_update_module+0xcc>)
 8009a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a10:	9001      	str	r0, [sp, #4]
                ret = set_hm10_pin(default_pin_code);
 8009a12:	a801      	add	r0, sp, #4
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 8009a14:	f8ad 1008 	strh.w	r1, [sp, #8]
                ret = set_hm10_pin(default_pin_code);
 8009a18:	f000 fd98 	bl	800a54c <set_hm10_pin>
                if (ret != HM10_EC_OK)
 8009a1c:	b958      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                ret = set_hm10_pin_code_mode(HM10_DEFAULT_PIN_CODE_MODE);
 8009a1e:	2030      	movs	r0, #48	; 0x30
 8009a20:	f000 fe3e 	bl	800a6a0 <set_hm10_pin_code_mode>
                if (ret != HM10_EC_OK)
 8009a24:	b938      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                ret = set_hm10_module_work_mode(HM10_DEFAULT_MODULE_WORK_MODE);
 8009a26:	2030      	movs	r0, #48	; 0x30
 8009a28:	f000 fea6 	bl	800a778 <set_hm10_module_work_mode>
                if (ret != HM10_EC_OK)
 8009a2c:	b918      	cbnz	r0, 8009a36 <init_firmware_update_module+0xaa>
                ret = send_hm10_reset_cmd();
 8009a2e:	f000 fb25 	bl	800a07c <send_hm10_reset_cmd>
                if (ret != HM10_EC_OK)
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d0ce      	beq.n	80099d4 <init_firmware_update_module+0x48>
                return ETX_OTA_EC_ERR;
 8009a36:	2004      	movs	r0, #4
}
 8009a38:	b007      	add	sp, #28
 8009a3a:	bd30      	pop	{r4, r5, pc}
 8009a3c:	20000478 	.word	0x20000478
 8009a40:	2000047c 	.word	0x2000047c
 8009a44:	20000060 	.word	0x20000060
 8009a48:	20000480 	.word	0x20000480
 8009a4c:	20000064 	.word	0x20000064
 8009a50:	20000475 	.word	0x20000475
 8009a54:	0800df80 	.word	0x0800df80
 8009a58:	0800df8c 	.word	0x0800df8c

08009a5c <start_etx_ota>:
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 8009a5c:	2201      	movs	r2, #1
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 8009a5e:	4803      	ldr	r0, [pc, #12]	; (8009a6c <start_etx_ota+0x10>)
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 8009a60:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <start_etx_ota+0x14>)
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 8009a62:	4904      	ldr	r1, [pc, #16]	; (8009a74 <start_etx_ota+0x18>)
 8009a64:	6800      	ldr	r0, [r0, #0]
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 8009a66:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 8009a68:	f004 b82a 	b.w	800dac0 <HAL_UART_Receive_IT>
 8009a6c:	20000480 	.word	0x20000480
 8009a70:	20000475 	.word	0x20000475
 8009a74:	20000064 	.word	0x20000064

08009a78 <HAL_UART_RxCpltCallback>:
	if (is_etx_ota_enabled)
 8009a78:	4ba5      	ldr	r3, [pc, #660]	; (8009d10 <HAL_UART_RxCpltCallback+0x298>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	b903      	cbnz	r3, 8009a80 <HAL_UART_RxCpltCallback+0x8>
 8009a7e:	4770      	bx	lr
{
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (ETX_OTA_hardware_protocol)
 8009a84:	4da3      	ldr	r5, [pc, #652]	; (8009d14 <HAL_UART_RxCpltCallback+0x29c>)
{
 8009a86:	b083      	sub	sp, #12
		switch (ETX_OTA_hardware_protocol)
 8009a88:	782b      	ldrb	r3, [r5, #0]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d80c      	bhi.n	8009aa8 <HAL_UART_RxCpltCallback+0x30>
				if (Rx_Buffer[0] == ETX_OTA_SOF)
 8009a8e:	4ca2      	ldr	r4, [pc, #648]	; (8009d18 <HAL_UART_RxCpltCallback+0x2a0>)
 8009a90:	7823      	ldrb	r3, [r4, #0]
 8009a92:	2baa      	cmp	r3, #170	; 0xaa
 8009a94:	d00e      	beq.n	8009ab4 <HAL_UART_RxCpltCallback+0x3c>
					HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 8009a96:	2201      	movs	r2, #1
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4ba0      	ldr	r3, [pc, #640]	; (8009d1c <HAL_UART_RxCpltCallback+0x2a4>)
 8009a9c:	6818      	ldr	r0, [r3, #0]
}
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 8009aa4:	f004 b80c 	b.w	800dac0 <HAL_UART_Receive_IT>
				etx_ota_status_resp_handler(ETX_OTA_EC_ERR);
 8009aa8:	2004      	movs	r0, #4
 8009aaa:	f001 fe7d 	bl	800b7a8 <etx_ota_status_resp_handler>
}
 8009aae:	b003      	add	sp, #12
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					etx_ota_pre_transaction_handler();
 8009ab4:	f001 fe76 	bl	800b7a4 <etx_ota_pre_transaction_handler>
	etx_ota_state            = ETX_OTA_STATE_START;
 8009ab8:	2201      	movs	r2, #1
	etx_ota_fw_received_size = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8009d20 <HAL_UART_RxCpltCallback+0x2a8>
	etx_ota_state            = ETX_OTA_STATE_START;
 8009ac0:	4f98      	ldr	r7, [pc, #608]	; (8009d24 <HAL_UART_RxCpltCallback+0x2ac>)
                ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009ac2:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8009d1c <HAL_UART_RxCpltCallback+0x2a4>
	etx_ota_state            = ETX_OTA_STATE_START;
 8009ac6:	703a      	strb	r2, [r7, #0]
	etx_ota_fw_received_size = 0U;
 8009ac8:	f8c8 3000 	str.w	r3, [r8]
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009acc:	eb04 0a02 	add.w	sl, r4, r2
	switch (ETX_OTA_hardware_protocol)
 8009ad0:	7829      	ldrb	r1, [r5, #0]
 8009ad2:	b149      	cbz	r1, 8009ae8 <HAL_UART_RxCpltCallback+0x70>
 8009ad4:	2901      	cmp	r1, #1
 8009ad6:	d021      	beq.n	8009b1c <HAL_UART_RxCpltCallback+0xa4>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8009ad8:	2001      	movs	r0, #1
 8009ada:	f7ff ff1f 	bl	800991c <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_ERR;
 8009ade:	2604      	movs	r6, #4
					etx_ota_status_resp_handler(start_etx_ota_transaction());
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f001 fe61 	bl	800b7a8 <etx_ota_status_resp_handler>
 8009ae6:	e7e2      	b.n	8009aae <HAL_UART_RxCpltCallback+0x36>
			if (Rx_Buffer[0] == 0)
 8009ae8:	7823      	ldrb	r3, [r4, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d054      	beq.n	8009b98 <HAL_UART_RxCpltCallback+0x120>
 8009aee:	46cb      	mov	fp, r9
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009af0:	f242 3328 	movw	r3, #9000	; 0x2328
 8009af4:	2201      	movs	r2, #1
 8009af6:	4651      	mov	r1, sl
 8009af8:	f8d9 0000 	ldr.w	r0, [r9]
 8009afc:	f003 ff58 	bl	800d9b0 <HAL_UART_Receive>
	}
}

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 8009b00:	2801      	cmp	r0, #1
 8009b02:	d0e9      	beq.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009b04:	1e82      	subs	r2, r0, #2
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	2a01      	cmp	r2, #1
 8009b0a:	d85a      	bhi.n	8009bc2 <HAL_UART_RxCpltCallback+0x14a>
			  HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	4982      	ldr	r1, [pc, #520]	; (8009d18 <HAL_UART_RxCpltCallback+0x2a0>)
 8009b10:	f8db 0000 	ldr.w	r0, [fp]
 8009b14:	f003 ffd4 	bl	800dac0 <HAL_UART_Receive_IT>
			  return ETX_OTA_EC_NR;
 8009b18:	2602      	movs	r6, #2
 8009b1a:	e7e1      	b.n	8009ae0 <HAL_UART_RxCpltCallback+0x68>
            if (Rx_Buffer[0] == 0)
 8009b1c:	7823      	ldrb	r3, [r4, #0]
 8009b1e:	b943      	cbnz	r3, 8009b32 <HAL_UART_RxCpltCallback+0xba>
                ret = get_hm10_ota_data(&buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009b20:	f242 3228 	movw	r2, #9000	; 0x2328
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 ff09 	bl	800a93c <get_hm10_ota_data>
                if (ret != HAL_OK)
 8009b2a:	bb60      	cbnz	r0, 8009b86 <HAL_UART_RxCpltCallback+0x10e>
                if (buf[len] != ETX_OTA_SOF)
 8009b2c:	7823      	ldrb	r3, [r4, #0]
 8009b2e:	2baa      	cmp	r3, #170	; 0xaa
 8009b30:	d1d2      	bne.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009b32:	f242 3228 	movw	r2, #9000	; 0x2328
 8009b36:	2101      	movs	r1, #1
 8009b38:	4650      	mov	r0, sl
 8009b3a:	f000 feff 	bl	800a93c <get_hm10_ota_data>
			if (ret != HAL_OK)
 8009b3e:	bb10      	cbnz	r0, 8009b86 <HAL_UART_RxCpltCallback+0x10e>
			switch (buf[len++])
 8009b40:	7863      	ldrb	r3, [r4, #1]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d8c8      	bhi.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009b46:	f242 3228 	movw	r2, #9000	; 0x2328
 8009b4a:	2102      	movs	r1, #2
 8009b4c:	4876      	ldr	r0, [pc, #472]	; (8009d28 <HAL_UART_RxCpltCallback+0x2b0>)
 8009b4e:	f000 fef5 	bl	800a93c <get_hm10_ota_data>
			if (ret != HAL_OK)
 8009b52:	b9c0      	cbnz	r0, 8009b86 <HAL_UART_RxCpltCallback+0x10e>
			data_len = *(uint16_t *)&buf[len];
 8009b54:	8863      	ldrh	r3, [r4, #2]
 8009b56:	9300      	str	r3, [sp, #0]
			for (uint16_t i=0; i<data_len; i++)
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 8092 	beq.w	8009c82 <HAL_UART_RxCpltCallback+0x20a>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8009b5e:	2604      	movs	r6, #4
 8009b60:	eb03 0b06 	add.w	fp, r3, r6
 8009b64:	fa1f fb8b 	uxth.w	fp, fp
 8009b68:	e002      	b.n	8009b70 <HAL_UART_RxCpltCallback+0xf8>
			for (uint16_t i=0; i<data_len; i++)
 8009b6a:	455e      	cmp	r6, fp
 8009b6c:	f000 808b 	beq.w	8009c86 <HAL_UART_RxCpltCallback+0x20e>
				ret = get_hm10_ota_data(&buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8009b70:	4630      	mov	r0, r6
 8009b72:	2101      	movs	r1, #1
 8009b74:	f242 3228 	movw	r2, #9000	; 0x2328
 8009b78:	440e      	add	r6, r1
 8009b7a:	4420      	add	r0, r4
 8009b7c:	b2b6      	uxth	r6, r6
 8009b7e:	f000 fedd 	bl	800a93c <get_hm10_ota_data>
				if (ret != HAL_OK)
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0f1      	beq.n	8009b6a <HAL_UART_RxCpltCallback+0xf2>
		switch (ret)
 8009b86:	2802      	cmp	r0, #2
 8009b88:	4606      	mov	r6, r0
 8009b8a:	d04d      	beq.n	8009c28 <HAL_UART_RxCpltCallback+0x1b0>
 8009b8c:	2e04      	cmp	r6, #4
 8009b8e:	d0a3      	beq.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
			  etx_ota_send_resp(ETX_OTA_NACK);
 8009b90:	2001      	movs	r0, #1
 8009b92:	f7ff fec3 	bl	800991c <etx_ota_send_resp.isra.0>
			  return ret;
 8009b96:	e7a3      	b.n	8009ae0 <HAL_UART_RxCpltCallback+0x68>
                ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009b98:	f242 3328 	movw	r3, #9000	; 0x2328
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	f8d9 0000 	ldr.w	r0, [r9]
 8009ba4:	f003 ff04 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 8009ba8:	2801      	cmp	r0, #1
                ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009baa:	46cb      	mov	fp, r9
  switch (HAL_status)
 8009bac:	d094      	beq.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009bae:	1e82      	subs	r2, r0, #2
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	2a01      	cmp	r2, #1
 8009bb4:	d9aa      	bls.n	8009b0c <HAL_UART_RxCpltCallback+0x94>
                if (ret != HAL_OK)
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d161      	bne.n	8009c7e <HAL_UART_RxCpltCallback+0x206>
                if (buf[len] != ETX_OTA_SOF)
 8009bba:	7823      	ldrb	r3, [r4, #0]
 8009bbc:	2baa      	cmp	r3, #170	; 0xaa
 8009bbe:	d097      	beq.n	8009af0 <HAL_UART_RxCpltCallback+0x78>
 8009bc0:	e78a      	b.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
			if (ret != HAL_OK)
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d15b      	bne.n	8009c7e <HAL_UART_RxCpltCallback+0x206>
			switch (buf[len++])
 8009bc6:	7863      	ldrb	r3, [r4, #1]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d885      	bhi.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009bcc:	f242 3328 	movw	r3, #9000	; 0x2328
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	4955      	ldr	r1, [pc, #340]	; (8009d28 <HAL_UART_RxCpltCallback+0x2b0>)
 8009bd4:	f8d9 0000 	ldr.w	r0, [r9]
 8009bd8:	f003 feea 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 8009bdc:	2801      	cmp	r0, #1
 8009bde:	f43f af7b 	beq.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009be2:	1e82      	subs	r2, r0, #2
 8009be4:	b2d2      	uxtb	r2, r2
 8009be6:	2a01      	cmp	r2, #1
 8009be8:	d990      	bls.n	8009b0c <HAL_UART_RxCpltCallback+0x94>
			if (ret != HAL_OK)
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d147      	bne.n	8009c7e <HAL_UART_RxCpltCallback+0x206>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8009bee:	2604      	movs	r6, #4
			data_len = *(uint16_t *)&buf[len];
 8009bf0:	8863      	ldrh	r3, [r4, #2]
 8009bf2:	9300      	str	r3, [sp, #0]
			for (uint16_t i=0; i<data_len; i++)
 8009bf4:	4433      	add	r3, r6
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	429e      	cmp	r6, r3
 8009bfe:	d016      	beq.n	8009c2e <HAL_UART_RxCpltCallback+0x1b6>
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8009c00:	f242 3328 	movw	r3, #9000	; 0x2328
 8009c04:	2201      	movs	r2, #1
 8009c06:	f8d9 0000 	ldr.w	r0, [r9]
 8009c0a:	19a1      	adds	r1, r4, r6
 8009c0c:	f003 fed0 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 8009c10:	2801      	cmp	r0, #1
 8009c12:	f43f af61 	beq.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009c16:	1e82      	subs	r2, r0, #2
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	2a01      	cmp	r2, #1
 8009c1c:	f67f af76 	bls.w	8009b0c <HAL_UART_RxCpltCallback+0x94>
				if (ret != HAL_OK)
 8009c20:	bb68      	cbnz	r0, 8009c7e <HAL_UART_RxCpltCallback+0x206>
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8009c22:	3601      	adds	r6, #1
 8009c24:	b2b6      	uxth	r6, r6
			for (uint16_t i=0; i<data_len; i++)
 8009c26:	e7e8      	b.n	8009bfa <HAL_UART_RxCpltCallback+0x182>
 8009c28:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8009d1c <HAL_UART_RxCpltCallback+0x2a4>
 8009c2c:	e76e      	b.n	8009b0c <HAL_UART_RxCpltCallback+0x94>
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009c2e:	19a1      	adds	r1, r4, r6
 8009c30:	f242 3328 	movw	r3, #9000	; 0x2328
 8009c34:	2204      	movs	r2, #4
 8009c36:	f8d9 0000 	ldr.w	r0, [r9]
 8009c3a:	9101      	str	r1, [sp, #4]
 8009c3c:	f003 feb8 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 8009c40:	2801      	cmp	r0, #1
 8009c42:	f43f af49 	beq.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009c46:	1e83      	subs	r3, r0, #2
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	9901      	ldr	r1, [sp, #4]
 8009c4e:	f67f af5d 	bls.w	8009b0c <HAL_UART_RxCpltCallback+0x94>
			if (ret != HAL_OK)
 8009c52:	b9a0      	cbnz	r0, 8009c7e <HAL_UART_RxCpltCallback+0x206>
			len += ETX_OTA_CRC32_SIZE;
 8009c54:	1d33      	adds	r3, r6, #4
 8009c56:	b29e      	uxth	r6, r3
			rec_data_crc = *(uint32_t *) &buf[len];
 8009c58:	680b      	ldr	r3, [r1, #0]
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009c5a:	2201      	movs	r2, #1
			rec_data_crc = *(uint32_t *) &buf[len];
 8009c5c:	9301      	str	r3, [sp, #4]
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009c5e:	f8d9 0000 	ldr.w	r0, [r9]
 8009c62:	f242 3328 	movw	r3, #9000	; 0x2328
 8009c66:	19a1      	adds	r1, r4, r6
 8009c68:	f003 fea2 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 8009c6c:	2801      	cmp	r0, #1
 8009c6e:	f43f af33 	beq.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009c72:	1e83      	subs	r3, r0, #2
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	f67f af48 	bls.w	8009b0c <HAL_UART_RxCpltCallback+0x94>
			if (ret != HAL_OK)
 8009c7c:	b1e8      	cbz	r0, 8009cba <HAL_UART_RxCpltCallback+0x242>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	e784      	b.n	8009b8c <HAL_UART_RxCpltCallback+0x114>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8009c82:	f04f 0b04 	mov.w	fp, #4
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009c86:	f242 3228 	movw	r2, #9000	; 0x2328
 8009c8a:	2104      	movs	r1, #4
 8009c8c:	eb04 000b 	add.w	r0, r4, fp
 8009c90:	f000 fe54 	bl	800a93c <get_hm10_ota_data>
			if (ret != HAL_OK)
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f47f af76 	bne.w	8009b86 <HAL_UART_RxCpltCallback+0x10e>
			rec_data_crc = *(uint32_t *) &buf[len];
 8009c9a:	f854 200b 	ldr.w	r2, [r4, fp]
			len += ETX_OTA_CRC32_SIZE;
 8009c9e:	f10b 0304 	add.w	r3, fp, #4
 8009ca2:	b29b      	uxth	r3, r3
			rec_data_crc = *(uint32_t *) &buf[len];
 8009ca4:	9201      	str	r2, [sp, #4]
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	f242 3228 	movw	r2, #9000	; 0x2328
 8009cac:	18e0      	adds	r0, r4, r3
			len += ETX_OTA_CRC32_SIZE;
 8009cae:	461e      	mov	r6, r3
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8009cb0:	f000 fe44 	bl	800a93c <get_hm10_ota_data>
			if (ret != HAL_OK)
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f47f af66 	bne.w	8009b86 <HAL_UART_RxCpltCallback+0x10e>
	if (buf[len++] != ETX_OTA_EOF)
 8009cba:	5da3      	ldrb	r3, [r4, r6]
 8009cbc:	2bbb      	cmp	r3, #187	; 0xbb
 8009cbe:	f47f af0b 	bne.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
	cal_data_crc = crc32_mpeg2(&buf[ETX_OTA_DATA_FIELD_INDEX], data_len);
 8009cc2:	9900      	ldr	r1, [sp, #0]
 8009cc4:	4819      	ldr	r0, [pc, #100]	; (8009d2c <HAL_UART_RxCpltCallback+0x2b4>)
 8009cc6:	f000 f8eb 	bl	8009ea0 <crc32_mpeg2>
	if (cal_data_crc != rec_data_crc)
 8009cca:	9b01      	ldr	r3, [sp, #4]
 8009ccc:	4298      	cmp	r0, r3
 8009cce:	f47f af03 	bne.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
	if (buf[len++] != ETX_OTA_EOF)
 8009cd2:	4633      	mov	r3, r6
	if (ETX_OTA_PACKET_MAX_SIZE < len)
 8009cd4:	f240 4209 	movw	r2, #1033	; 0x409
	if (buf[len++] != ETX_OTA_EOF)
 8009cd8:	3301      	adds	r3, #1
	if (ETX_OTA_PACKET_MAX_SIZE < len)
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	f63f aefb 	bhi.w	8009ad8 <HAL_UART_RxCpltCallback+0x60>
	if (cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD)
 8009ce2:	7860      	ldrb	r0, [r4, #1]
 8009ce4:	b958      	cbnz	r0, 8009cfe <HAL_UART_RxCpltCallback+0x286>
		if (cmd->cmd == ETX_OTA_CMD_ABORT)
 8009ce6:	7922      	ldrb	r2, [r4, #4]
 8009ce8:	2a02      	cmp	r2, #2
 8009cea:	f000 80b3 	beq.w	8009e54 <HAL_UART_RxCpltCallback+0x3dc>
	switch (etx_ota_state)
 8009cee:	783b      	ldrb	r3, [r7, #0]
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d80a      	bhi.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
 8009cf4:	e8df f003 	tbb	[pc, r3]
 8009cf8:	09091c20 	.word	0x09091c20
 8009cfc:	30          	.byte	0x30
 8009cfd:	00          	.byte	0x00
 8009cfe:	783b      	ldrb	r3, [r7, #0]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d038      	beq.n	8009d76 <HAL_UART_RxCpltCallback+0x2fe>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d042      	beq.n	8009d8e <HAL_UART_RxCpltCallback+0x316>
 8009d08:	b1b3      	cbz	r3, 8009d38 <HAL_UART_RxCpltCallback+0x2c0>
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	7023      	strb	r3, [r4, #0]
			switch (ret)
 8009d0e:	e6e3      	b.n	8009ad8 <HAL_UART_RxCpltCallback+0x60>
 8009d10:	20000475 	.word	0x20000475
 8009d14:	20000060 	.word	0x20000060
 8009d18:	20000064 	.word	0x20000064
 8009d1c:	20000480 	.word	0x20000480
 8009d20:	20000470 	.word	0x20000470
 8009d24:	20000474 	.word	0x20000474
 8009d28:	20000066 	.word	0x20000066
 8009d2c:	20000068 	.word	0x20000068
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd == ETX_OTA_CMD_START))
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d1ea      	bne.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
				etx_ota_state = ETX_OTA_STATE_HEADER;
 8009d34:	2302      	movs	r3, #2
 8009d36:	703b      	strb	r3, [r7, #0]
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8009d38:	2000      	movs	r0, #0
 8009d3a:	7020      	strb	r0, [r4, #0]
				  etx_ota_send_resp(ETX_OTA_ACK);
 8009d3c:	f7ff fdee 	bl	800991c <etx_ota_send_resp.isra.0>
	while (etx_ota_state != ETX_OTA_STATE_IDLE);
 8009d40:	7838      	ldrb	r0, [r7, #0]
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f47f aec4 	bne.w	8009ad0 <HAL_UART_RxCpltCallback+0x58>
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 8009d48:	4b50      	ldr	r3, [pc, #320]	; (8009e8c <HAL_UART_RxCpltCallback+0x414>)
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	4950      	ldr	r1, [pc, #320]	; (8009e90 <HAL_UART_RxCpltCallback+0x418>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f003 feb5 	bl	800dac0 <HAL_UART_Receive_IT>
	return ETX_OTA_EC_OK;
 8009d56:	e6c3      	b.n	8009ae0 <HAL_UART_RxCpltCallback+0x68>
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd==ETX_OTA_CMD_END))
 8009d58:	2a01      	cmp	r2, #1
 8009d5a:	d1d6      	bne.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
				uint32_t cal_crc = crc32_mpeg2(p_custom_data->data, p_custom_data->size);
 8009d5c:	4e4d      	ldr	r6, [pc, #308]	; (8009e94 <HAL_UART_RxCpltCallback+0x41c>)
 8009d5e:	6830      	ldr	r0, [r6, #0]
 8009d60:	f850 1b08 	ldr.w	r1, [r0], #8
 8009d64:	f000 f89c 	bl	8009ea0 <crc32_mpeg2>
				if (cal_crc != p_custom_data->rec_crc)
 8009d68:	6833      	ldr	r3, [r6, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	d1cc      	bne.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
				etx_ota_state = ETX_OTA_STATE_IDLE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	703b      	strb	r3, [r7, #0]
			switch (ret)
 8009d74:	e7e0      	b.n	8009d38 <HAL_UART_RxCpltCallback+0x2c0>
			if (header->packet_type == ETX_OTA_PACKET_TYPE_HEADER)
 8009d76:	2802      	cmp	r0, #2
 8009d78:	d1c7      	bne.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
				switch (header->meta_data.payload_type)
 8009d7a:	7ce3      	ldrb	r3, [r4, #19]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d86e      	bhi.n	8009e5e <HAL_UART_RxCpltCallback+0x3e6>
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8009d80:	2300      	movs	r3, #0
				  etx_ota_send_resp(ETX_OTA_NACK);
 8009d82:	2001      	movs	r0, #1
				  return ETX_OTA_EC_NA;
 8009d84:	2603      	movs	r6, #3
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8009d86:	7023      	strb	r3, [r4, #0]
				  etx_ota_send_resp(ETX_OTA_NACK);
 8009d88:	f7ff fdc8 	bl	800991c <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_NA;
 8009d8c:	e6a8      	b.n	8009ae0 <HAL_UART_RxCpltCallback+0x68>
			if (data->packet_type == ETX_OTA_PACKET_TYPE_DATA)
 8009d8e:	2801      	cmp	r0, #1
 8009d90:	d1bb      	bne.n	8009d0a <HAL_UART_RxCpltCallback+0x292>
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009d92:	4b40      	ldr	r3, [pc, #256]	; (8009e94 <HAL_UART_RxCpltCallback+0x41c>)
				write_data_to_ram(buf+ETX_OTA_DATA_FIELD_INDEX, data->data_len);
 8009d94:	8866      	ldrh	r6, [r4, #2]
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009d96:	6819      	ldr	r1, [r3, #0]
 8009d98:	f8d8 3000 	ldr.w	r3, [r8]
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009d9c:	2e00      	cmp	r6, #0
 8009d9e:	d052      	beq.n	8009e46 <HAL_UART_RxCpltCallback+0x3ce>
 8009da0:	483d      	ldr	r0, [pc, #244]	; (8009e98 <HAL_UART_RxCpltCallback+0x420>)
 8009da2:	f103 0208 	add.w	r2, r3, #8
 8009da6:	440a      	add	r2, r1
 8009da8:	1a10      	subs	r0, r2, r0
 8009daa:	f106 3eff 	add.w	lr, r6, #4294967295
 8009dae:	2802      	cmp	r0, #2
 8009db0:	fa1f fe8e 	uxth.w	lr, lr
 8009db4:	d95f      	bls.n	8009e76 <HAL_UART_RxCpltCallback+0x3fe>
 8009db6:	f1be 0f05 	cmp.w	lr, #5
 8009dba:	d95c      	bls.n	8009e76 <HAL_UART_RxCpltCallback+0x3fe>
 8009dbc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8009dc0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dc4:	fa1f fc8c 	uxth.w	ip, ip
 8009dc8:	f102 0b04 	add.w	fp, r2, #4
 8009dcc:	eb0b 0b8c 	add.w	fp, fp, ip, lsl #2
 8009dd0:	469c      	mov	ip, r3
 8009dd2:	482f      	ldr	r0, [pc, #188]	; (8009e90 <HAL_UART_RxCpltCallback+0x418>)
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009dd4:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8009dd8:	f842 3b04 	str.w	r3, [r2], #4
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009ddc:	4593      	cmp	fp, r2
 8009dde:	d1f9      	bne.n	8009dd4 <HAL_UART_RxCpltCallback+0x35c>
 8009de0:	4663      	mov	r3, ip
 8009de2:	f026 0c03 	bic.w	ip, r6, #3
 8009de6:	fa1f f28c 	uxth.w	r2, ip
 8009dea:	4566      	cmp	r6, ip
 8009dec:	4693      	mov	fp, r2
 8009dee:	eb03 000c 	add.w	r0, r3, ip
 8009df2:	d024      	beq.n	8009e3e <HAL_UART_RxCpltCallback+0x3c6>
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009df4:	eb04 0c02 	add.w	ip, r4, r2
 8009df8:	f89c 2004 	ldrb.w	r2, [ip, #4]
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009dfc:	f10b 0c01 	add.w	ip, fp, #1
 8009e00:	fa1f fc8c 	uxth.w	ip, ip
 8009e04:	f8cd b000 	str.w	fp, [sp]
 8009e08:	45b4      	cmp	ip, r6
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009e0a:	eb01 0b00 	add.w	fp, r1, r0
 8009e0e:	f88b 2008 	strb.w	r2, [fp, #8]
        etx_ota_fw_received_size++;
 8009e12:	f100 0b01 	add.w	fp, r0, #1
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009e16:	d212      	bcs.n	8009e3e <HAL_UART_RxCpltCallback+0x3c6>
 8009e18:	9a00      	ldr	r2, [sp, #0]
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009e1a:	44a4      	add	ip, r4
 8009e1c:	f89c c004 	ldrb.w	ip, [ip, #4]
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009e20:	3202      	adds	r2, #2
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009e22:	448b      	add	fp, r1
 8009e24:	f88b c008 	strb.w	ip, [fp, #8]
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009e28:	fa1f fc82 	uxth.w	ip, r2
 8009e2c:	4566      	cmp	r6, ip
        etx_ota_fw_received_size++;
 8009e2e:	f100 0202 	add.w	r2, r0, #2
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009e32:	d904      	bls.n	8009e3e <HAL_UART_RxCpltCallback+0x3c6>
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009e34:	44a4      	add	ip, r4
 8009e36:	f89c 0004 	ldrb.w	r0, [ip, #4]
 8009e3a:	440a      	add	r2, r1
 8009e3c:	7210      	strb	r0, [r2, #8]
        etx_ota_fw_received_size++;
 8009e3e:	3301      	adds	r3, #1
 8009e40:	4473      	add	r3, lr
 8009e42:	f8c8 3000 	str.w	r3, [r8]
				if (etx_ota_fw_received_size >= p_custom_data->size)
 8009e46:	680a      	ldr	r2, [r1, #0]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f4ff af75 	bcc.w	8009d38 <HAL_UART_RxCpltCallback+0x2c0>
					etx_ota_state = ETX_OTA_STATE_END;
 8009e4e:	2304      	movs	r3, #4
 8009e50:	703b      	strb	r3, [r7, #0]
			switch (ret)
 8009e52:	e771      	b.n	8009d38 <HAL_UART_RxCpltCallback+0x2c0>
				  return ETX_OTA_EC_STOP;
 8009e54:	2601      	movs	r6, #1
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8009e56:	7020      	strb	r0, [r4, #0]
				  etx_ota_send_resp(ETX_OTA_ACK);
 8009e58:	f7ff fd60 	bl	800991c <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_STOP;
 8009e5c:	e640      	b.n	8009ae0 <HAL_UART_RxCpltCallback+0x68>
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	f47f af53 	bne.w	8009d0a <HAL_UART_RxCpltCallback+0x292>
						p_custom_data->size = header->meta_data.package_size;
 8009e64:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				etx_ota_state = ETX_OTA_STATE_DATA;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	703b      	strb	r3, [r7, #0]
						p_custom_data->size = header->meta_data.package_size;
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <HAL_UART_RxCpltCallback+0x41c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	e9c3 1200 	strd	r1, r2, [r3]
			switch (ret)
 8009e74:	e760      	b.n	8009d38 <HAL_UART_RxCpltCallback+0x2c0>
 8009e76:	1dd8      	adds	r0, r3, #7
 8009e78:	4e08      	ldr	r6, [pc, #32]	; (8009e9c <HAL_UART_RxCpltCallback+0x424>)
 8009e7a:	4472      	add	r2, lr
 8009e7c:	4408      	add	r0, r1
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 8009e7e:	f816 cf01 	ldrb.w	ip, [r6, #1]!
 8009e82:	f800 cf01 	strb.w	ip, [r0, #1]!
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8009e86:	4290      	cmp	r0, r2
 8009e88:	d1f9      	bne.n	8009e7e <HAL_UART_RxCpltCallback+0x406>
 8009e8a:	e7d8      	b.n	8009e3e <HAL_UART_RxCpltCallback+0x3c6>
 8009e8c:	20000480 	.word	0x20000480
 8009e90:	20000064 	.word	0x20000064
 8009e94:	2000047c 	.word	0x2000047c
 8009e98:	20000069 	.word	0x20000069
 8009e9c:	20000067 	.word	0x20000067

08009ea0 <crc32_mpeg2>:
    {
    	return checksum;
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 8009ea0:	1e4b      	subs	r3, r1, #1
 8009ea2:	3303      	adds	r3, #3
 8009ea4:	d813      	bhi.n	8009ece <crc32_mpeg2+0x2e>
 8009ea6:	4602      	mov	r2, r0
    uint32_t checksum = 0xFFFFFFFF;
 8009ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eac:	4411      	add	r1, r2
{
 8009eae:	b410      	push	{r4}
 8009eb0:	4c08      	ldr	r4, [pc, #32]	; (8009ed4 <crc32_mpeg2+0x34>)
 8009eb2:	4402      	add	r2, r0
 8009eb4:	4401      	add	r1, r0
    {
        uint8_t top = (uint8_t) (checksum >> 24);
        top ^= p_data[i];
 8009eb6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        checksum = (checksum << 8) ^ crc_table[top];
 8009eba:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
 8009ebe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    for (unsigned int i=0; i<data_length; i++)
 8009ec2:	4291      	cmp	r1, r2
        checksum = (checksum << 8) ^ crc_table[top];
 8009ec4:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
    for (unsigned int i=0; i<data_length; i++)
 8009ec8:	d1f5      	bne.n	8009eb6 <crc32_mpeg2+0x16>
    }
    return checksum;
}
 8009eca:	bc10      	pop	{r4}
 8009ecc:	4770      	bx	lr
    uint32_t checksum = 0xFFFFFFFF;
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009ed2:	4770      	bx	lr
 8009ed4:	0800df94 	.word	0x0800df94

08009ed8 <page_erase>:

	return ret;
}

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8009ed8:	b5d0      	push	{r4, r6, r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	4604      	mov	r4, r0
	#endif
    /** <b>Local variable ret:</b> @ref uin8_t Type variable used to hold the return value of either a @ref FirmUpdConf_Status or a @ref HAL_StatusTypeDef function. */
    uint8_t ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 8009ede:	f002 fa95 	bl	800c40c <HAL_FLASH_Unlock>
	return FIRM_UPDT_CONF_EC_OK;
}

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 8009ee2:	2801      	cmp	r0, #1
 8009ee4:	d006      	beq.n	8009ef4 <page_erase+0x1c>
 8009ee6:	1e83      	subs	r3, r0, #2
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d805      	bhi.n	8009efa <page_erase+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 8009eee:	2002      	movs	r0, #2
}
 8009ef0:	b006      	add	sp, #24
 8009ef2:	bdd0      	pop	{r4, r6, r7, pc}
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8009ef4:	2004      	movs	r0, #4
}
 8009ef6:	b006      	add	sp, #24
 8009ef8:	bdd0      	pop	{r4, r6, r7, pc}
	if (ret != HAL_OK)
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d1f8      	bne.n	8009ef0 <page_erase+0x18>
	EraseInitStruct.NbPages      = 1U;
 8009efe:	2301      	movs	r3, #1
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8009f00:	2600      	movs	r6, #0
 8009f02:	2701      	movs	r7, #1
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8009f04:	a901      	add	r1, sp, #4
 8009f06:	a802      	add	r0, sp, #8
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8009f08:	e9cd 6702 	strd	r6, r7, [sp, #8]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 8009f0c:	9404      	str	r4, [sp, #16]
	EraseInitStruct.NbPages      = 1U;
 8009f0e:	9305      	str	r3, [sp, #20]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8009f10:	f002 faf0 	bl	800c4f4 <HAL_FLASHEx_Erase>
  switch (HAL_status)
 8009f14:	2801      	cmp	r0, #1
 8009f16:	d0ed      	beq.n	8009ef4 <page_erase+0x1c>
 8009f18:	1e83      	subs	r3, r0, #2
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d9e6      	bls.n	8009eee <page_erase+0x16>
	if (ret != HAL_OK)
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1e5      	bne.n	8009ef0 <page_erase+0x18>
	ret = HAL_FLASH_Lock();
 8009f24:	f002 fa86 	bl	800c434 <HAL_FLASH_Lock>
  switch (HAL_status)
 8009f28:	2801      	cmp	r0, #1
 8009f2a:	d0e3      	beq.n	8009ef4 <page_erase+0x1c>
 8009f2c:	1e83      	subs	r3, r0, #2
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d9dc      	bls.n	8009eee <page_erase+0x16>
 8009f34:	e7dc      	b.n	8009ef0 <page_erase+0x18>
 8009f36:	bf00      	nop

08009f38 <firmware_update_configurations_init>:
{
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 8009f3a:	4b2e      	ldr	r3, [pc, #184]	; (8009ff4 <firmware_update_configurations_init+0xbc>)
 8009f3c:	4f2e      	ldr	r7, [pc, #184]	; (8009ff8 <firmware_update_configurations_init+0xc0>)
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8009f42:	4c2e      	ldr	r4, [pc, #184]	; (8009ffc <firmware_update_configurations_init+0xc4>)
 8009f44:	4d2e      	ldr	r5, [pc, #184]	; (800a000 <firmware_update_configurations_init+0xc8>)
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 8009f46:	603b      	str	r3, [r7, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8009f48:	e005      	b.n	8009f56 <firmware_update_configurations_init+0x1e>
 8009f4a:	42ab      	cmp	r3, r5
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f04f 0101 	mov.w	r1, #1
 8009f52:	d02f      	beq.n	8009fb4 <firmware_update_configurations_init+0x7c>
 8009f54:	461c      	mov	r4, r3
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8009f56:	7fe2      	ldrb	r2, [r4, #31]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8009f58:	f104 0320 	add.w	r3, r4, #32
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8009f5c:	2aff      	cmp	r2, #255	; 0xff
 8009f5e:	d1f4      	bne.n	8009f4a <firmware_update_configurations_init+0x12>
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8009f60:	7fc6      	ldrb	r6, [r0, #31]
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	d1f1      	bne.n	8009f4a <firmware_update_configurations_init+0x12>
 8009f66:	b101      	cbz	r1, 8009f6a <firmware_update_configurations_init+0x32>
 8009f68:	6038      	str	r0, [r7, #0]
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8009f6a:	211c      	movs	r1, #28
 8009f6c:	3004      	adds	r0, #4
 8009f6e:	f7ff ff97 	bl	8009ea0 <crc32_mpeg2>
				if(cal_crc != p_most_recent_val->crc32)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4282      	cmp	r2, r0
 8009f78:	d10b      	bne.n	8009f92 <firmware_update_configurations_init+0x5a>
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8009f7a:	4a21      	ldr	r2, [pc, #132]	; (800a000 <firmware_update_configurations_init+0xc8>)
 8009f7c:	4294      	cmp	r4, r2
 8009f7e:	d035      	beq.n	8009fec <firmware_update_configurations_init+0xb4>
    if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <firmware_update_configurations_init+0xc4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d028      	beq.n	8009fd8 <firmware_update_configurations_init+0xa0>
    else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8009f86:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <firmware_update_configurations_init+0xcc>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d01c      	beq.n	8009fc6 <firmware_update_configurations_init+0x8e>
		ret = FIRM_UPDT_CONF_EC_OK;
 8009f8c:	2600      	movs	r6, #0
}
 8009f8e:	4630      	mov	r0, r6
 8009f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8009f92:	481a      	ldr	r0, [pc, #104]	; (8009ffc <firmware_update_configurations_init+0xc4>)
 8009f94:	f7ff ffa0 	bl	8009ed8 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8009f98:	b110      	cbz	r0, 8009fa0 <firmware_update_configurations_init+0x68>
						return FIRM_UPDT_CONF_EC_CRPT;
 8009f9a:	2605      	movs	r6, #5
}
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8009fa0:	4818      	ldr	r0, [pc, #96]	; (800a004 <firmware_update_configurations_init+0xcc>)
 8009fa2:	f7ff ff99 	bl	8009ed8 <page_erase>
					if (ret != FIRM_UPDT_CONF_EC_OK)
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d1f7      	bne.n	8009f9a <firmware_update_configurations_init+0x62>
					p_most_recent_val = NULL;
 8009faa:	2300      	movs	r3, #0
					return FIRM_UPDT_CONF_EC_OK;
 8009fac:	461e      	mov	r6, r3
					p_most_recent_val = NULL;
 8009fae:	603b      	str	r3, [r7, #0]
}
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8009fb4:	4b14      	ldr	r3, [pc, #80]	; (800a008 <firmware_update_configurations_init+0xd0>)
 8009fb6:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8009fba:	2bff      	cmp	r3, #255	; 0xff
 8009fbc:	d0f5      	beq.n	8009faa <firmware_update_configurations_init+0x72>
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <firmware_update_configurations_init+0xbc>)
    else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8009fc0:	4a10      	ldr	r2, [pc, #64]	; (800a004 <firmware_update_configurations_init+0xcc>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d1e2      	bne.n	8009f8c <firmware_update_configurations_init+0x54>
 8009fc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1de      	bne.n	8009f8c <firmware_update_configurations_init+0x54>
}
 8009fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8009fd2:	480a      	ldr	r0, [pc, #40]	; (8009ffc <firmware_update_configurations_init+0xc4>)
 8009fd4:	f7ff bf80 	b.w	8009ed8 <page_erase>
        (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <firmware_update_configurations_init+0xd0>)
    if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8009fda:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1d5      	bne.n	8009f8e <firmware_update_configurations_init+0x56>
}
 8009fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8009fe6:	4807      	ldr	r0, [pc, #28]	; (800a004 <firmware_update_configurations_init+0xcc>)
 8009fe8:	f7ff bf76 	b.w	8009ed8 <page_erase>
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8009fec:	7fda      	ldrb	r2, [r3, #31]
 8009fee:	2aff      	cmp	r2, #255	; 0xff
 8009ff0:	d1c6      	bne.n	8009f80 <firmware_update_configurations_init+0x48>
 8009ff2:	e7da      	b.n	8009faa <firmware_update_configurations_init+0x72>
 8009ff4:	0801efe0 	.word	0x0801efe0
 8009ff8:	20000484 	.word	0x20000484
 8009ffc:	0801e000 	.word	0x0801e000
 800a000:	0801f000 	.word	0x0801f000
 800a004:	0801e800 	.word	0x0801e800
 800a008:	0801ef00 	.word	0x0801ef00

0800a00c <firmware_update_configurations_read>:
    firmware_update_config_t *p_current_val = p_most_recent_val;
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <firmware_update_configurations_read+0x5c>)
{
 800a00e:	4684      	mov	ip, r0
    firmware_update_config_t *p_current_val = p_most_recent_val;
 800a010:	681b      	ldr	r3, [r3, #0]
{
 800a012:	b510      	push	{r4, lr}
    if (p_current_val == NULL)
 800a014:	b1ab      	cbz	r3, 800a042 <firmware_update_configurations_read+0x36>
    return FIRM_UPDT_CONF_EC_OK;
 800a016:	f04f 0e00 	mov.w	lr, #0
    memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 800a01a:	6859      	ldr	r1, [r3, #4]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	6918      	ldr	r0, [r3, #16]
 800a020:	68dc      	ldr	r4, [r3, #12]
 800a022:	f8cc 000c 	str.w	r0, [ip, #12]
 800a026:	f8cc 1000 	str.w	r1, [ip]
 800a02a:	f8cc 2004 	str.w	r2, [ip, #4]
 800a02e:	f8cc 4008 	str.w	r4, [ip, #8]
 800a032:	6959      	ldr	r1, [r3, #20]
 800a034:	699a      	ldr	r2, [r3, #24]
 800a036:	f8cc 1010 	str.w	r1, [ip, #16]
 800a03a:	f8cc 2014 	str.w	r2, [ip, #20]
}
 800a03e:	4670      	mov	r0, lr
 800a040:	bd10      	pop	{r4, pc}
        return FIRM_UPDT_CONF_EC_NO_DATA;
 800a042:	f04f 0e06 	mov.w	lr, #6
        memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 800a046:	4c09      	ldr	r4, [pc, #36]	; (800a06c <firmware_update_configurations_read+0x60>)
 800a048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a04a:	f8cc 0000 	str.w	r0, [ip]
 800a04e:	f8cc 1004 	str.w	r1, [ip, #4]
 800a052:	f8cc 2008 	str.w	r2, [ip, #8]
 800a056:	f8cc 300c 	str.w	r3, [ip, #12]
 800a05a:	cc03      	ldmia	r4!, {r0, r1}
 800a05c:	f8cc 0010 	str.w	r0, [ip, #16]
 800a060:	f8cc 1014 	str.w	r1, [ip, #20]
}
 800a064:	4670      	mov	r0, lr
 800a066:	bd10      	pop	{r4, pc}
 800a068:	20000484 	.word	0x20000484
 800a06c:	0801e004 	.word	0x0801e004

0800a070 <init_hm10_module>:
 */
static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

void init_hm10_module(UART_HandleTypeDef *huart)
{
	p_huart = huart;
 800a070:	4b01      	ldr	r3, [pc, #4]	; (800a078 <init_hm10_module+0x8>)
 800a072:	6018      	str	r0, [r3, #0]
}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	2000049c 	.word	0x2000049c

0800a07c <send_hm10_reset_cmd>:

	return HM10_EC_OK;
}

HM10_Status send_hm10_reset_cmd()
{
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4c29      	ldr	r4, [pc, #164]	; (800a124 <send_hm10_reset_cmd+0xa8>)
 800a080:	4d29      	ldr	r5, [pc, #164]	; (800a128 <send_hm10_reset_cmd+0xac>)
{
	/** <b>Local variable ret:</b> Return value of either a HAL function type. */
	HAL_StatusTypeDef  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a082:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a086:	2201      	movs	r2, #1
 800a088:	4621      	mov	r1, r4
 800a08a:	6828      	ldr	r0, [r5, #0]
 800a08c:	f003 fc90 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a090:	2803      	cmp	r0, #3
 800a092:	d1f6      	bne.n	800a082 <send_hm10_reset_cmd+0x6>
	TxRx_Buffer[0] = 'A';
 800a094:	4925      	ldr	r1, [pc, #148]	; (800a12c <send_hm10_reset_cmd+0xb0>)
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <send_hm10_reset_cmd+0xb4>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a098:	f44f 73a0 	mov.w	r3, #320	; 0x140
	TxRx_Buffer[0] = 'A';
 800a09c:	e9c4 1200 	strd	r1, r2, [r4]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a0a0:	6828      	ldr	r0, [r5, #0]
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	491f      	ldr	r1, [pc, #124]	; (800a124 <send_hm10_reset_cmd+0xa8>)
 800a0a6:	f003 fbe1 	bl	800d86c <HAL_UART_Transmit>
	}
}

static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 800a0aa:	2801      	cmp	r0, #1
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a0ac:	4606      	mov	r6, r0
  switch (HAL_status)
 800a0ae:	d006      	beq.n	800a0be <send_hm10_reset_cmd+0x42>
 800a0b0:	1e83      	subs	r3, r0, #2
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d805      	bhi.n	800a0c4 <send_hm10_reset_cmd+0x48>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return HM10_EC_NR;
 800a0b8:	2602      	movs	r6, #2
}
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
			return HM10_EC_ERR;
 800a0be:	2604      	movs	r6, #4
}
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d1f8      	bne.n	800a0ba <send_hm10_reset_cmd+0x3e>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a0c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	4915      	ldr	r1, [pc, #84]	; (800a124 <send_hm10_reset_cmd+0xa8>)
 800a0d0:	6828      	ldr	r0, [r5, #0]
 800a0d2:	f003 fc6d 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a0d6:	2801      	cmp	r0, #1
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a0d8:	4606      	mov	r6, r0
  switch (HAL_status)
 800a0da:	d0f0      	beq.n	800a0be <send_hm10_reset_cmd+0x42>
 800a0dc:	1e83      	subs	r3, r0, #2
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d9e9      	bls.n	800a0b8 <send_hm10_reset_cmd+0x3c>
	if (ret != HAL_OK)
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d1e8      	bne.n	800a0ba <send_hm10_reset_cmd+0x3e>
		if (TxRx_Buffer[i] != HM10_Reset_resp[i])
 800a0e8:	7823      	ldrb	r3, [r4, #0]
 800a0ea:	2b4f      	cmp	r3, #79	; 0x4f
 800a0ec:	d1e7      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a0ee:	7863      	ldrb	r3, [r4, #1]
 800a0f0:	2b4b      	cmp	r3, #75	; 0x4b
 800a0f2:	d1e4      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a0f4:	78a3      	ldrb	r3, [r4, #2]
 800a0f6:	2b2b      	cmp	r3, #43	; 0x2b
 800a0f8:	d1e1      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a0fa:	78e3      	ldrb	r3, [r4, #3]
 800a0fc:	2b52      	cmp	r3, #82	; 0x52
 800a0fe:	d1de      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a100:	7923      	ldrb	r3, [r4, #4]
 800a102:	2b45      	cmp	r3, #69	; 0x45
 800a104:	d1db      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a106:	7963      	ldrb	r3, [r4, #5]
 800a108:	2b53      	cmp	r3, #83	; 0x53
 800a10a:	d1d8      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a10c:	79a3      	ldrb	r3, [r4, #6]
 800a10e:	2b45      	cmp	r3, #69	; 0x45
 800a110:	d1d5      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
 800a112:	79e3      	ldrb	r3, [r4, #7]
 800a114:	2b54      	cmp	r3, #84	; 0x54
 800a116:	d1d2      	bne.n	800a0be <send_hm10_reset_cmd+0x42>
	HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 800a118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a11c:	f001 fd58 	bl	800bbd0 <HAL_Delay>
	return HM10_EC_OK;
 800a120:	e7cb      	b.n	800a0ba <send_hm10_reset_cmd+0x3e>
 800a122:	bf00      	nop
 800a124:	20000488 	.word	0x20000488
 800a128:	2000049c 	.word	0x2000049c
 800a12c:	522b5441 	.word	0x522b5441
 800a130:	54455345 	.word	0x54455345

0800a134 <send_hm10_renew_cmd>:
{
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	4c29      	ldr	r4, [pc, #164]	; (800a1dc <send_hm10_renew_cmd+0xa8>)
 800a138:	4d29      	ldr	r5, [pc, #164]	; (800a1e0 <send_hm10_renew_cmd+0xac>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a13a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a13e:	2201      	movs	r2, #1
 800a140:	4621      	mov	r1, r4
 800a142:	6828      	ldr	r0, [r5, #0]
 800a144:	f003 fc34 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a148:	2803      	cmp	r0, #3
 800a14a:	d1f6      	bne.n	800a13a <send_hm10_renew_cmd+0x6>
    TxRx_Buffer[0] = 'A';
 800a14c:	4925      	ldr	r1, [pc, #148]	; (800a1e4 <send_hm10_renew_cmd+0xb0>)
 800a14e:	4a26      	ldr	r2, [pc, #152]	; (800a1e8 <send_hm10_renew_cmd+0xb4>)
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a150:	f44f 73a0 	mov.w	r3, #320	; 0x140
    TxRx_Buffer[0] = 'A';
 800a154:	e9c4 1200 	strd	r1, r2, [r4]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a158:	6828      	ldr	r0, [r5, #0]
 800a15a:	2208      	movs	r2, #8
 800a15c:	491f      	ldr	r1, [pc, #124]	; (800a1dc <send_hm10_renew_cmd+0xa8>)
 800a15e:	f003 fb85 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a162:	2801      	cmp	r0, #1
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a164:	4606      	mov	r6, r0
  switch (HAL_status)
 800a166:	d006      	beq.n	800a176 <send_hm10_renew_cmd+0x42>
 800a168:	1e83      	subs	r3, r0, #2
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d805      	bhi.n	800a17c <send_hm10_renew_cmd+0x48>
		return HM10_EC_NR;
 800a170:	2602      	movs	r6, #2
}
 800a172:	4630      	mov	r0, r6
 800a174:	bd70      	pop	{r4, r5, r6, pc}
            return HM10_EC_ERR;
 800a176:	2604      	movs	r6, #4
}
 800a178:	4630      	mov	r0, r6
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1f8      	bne.n	800a172 <send_hm10_renew_cmd+0x3e>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a180:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a184:	2208      	movs	r2, #8
 800a186:	4915      	ldr	r1, [pc, #84]	; (800a1dc <send_hm10_renew_cmd+0xa8>)
 800a188:	6828      	ldr	r0, [r5, #0]
 800a18a:	f003 fc11 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a18e:	2801      	cmp	r0, #1
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a190:	4606      	mov	r6, r0
  switch (HAL_status)
 800a192:	d0f0      	beq.n	800a176 <send_hm10_renew_cmd+0x42>
 800a194:	1e83      	subs	r3, r0, #2
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d9e9      	bls.n	800a170 <send_hm10_renew_cmd+0x3c>
    if (ret != HAL_OK)
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1e8      	bne.n	800a172 <send_hm10_renew_cmd+0x3e>
        if (TxRx_Buffer[i] != HM10_Renew_resp[i])
 800a1a0:	7823      	ldrb	r3, [r4, #0]
 800a1a2:	2b4f      	cmp	r3, #79	; 0x4f
 800a1a4:	d1e7      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1a6:	7863      	ldrb	r3, [r4, #1]
 800a1a8:	2b4b      	cmp	r3, #75	; 0x4b
 800a1aa:	d1e4      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1ac:	78a3      	ldrb	r3, [r4, #2]
 800a1ae:	2b2b      	cmp	r3, #43	; 0x2b
 800a1b0:	d1e1      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1b2:	78e3      	ldrb	r3, [r4, #3]
 800a1b4:	2b52      	cmp	r3, #82	; 0x52
 800a1b6:	d1de      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1b8:	7923      	ldrb	r3, [r4, #4]
 800a1ba:	2b45      	cmp	r3, #69	; 0x45
 800a1bc:	d1db      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1be:	7963      	ldrb	r3, [r4, #5]
 800a1c0:	2b4e      	cmp	r3, #78	; 0x4e
 800a1c2:	d1d8      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1c4:	79a3      	ldrb	r3, [r4, #6]
 800a1c6:	2b45      	cmp	r3, #69	; 0x45
 800a1c8:	d1d5      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
 800a1ca:	79e3      	ldrb	r3, [r4, #7]
 800a1cc:	2b57      	cmp	r3, #87	; 0x57
 800a1ce:	d1d2      	bne.n	800a176 <send_hm10_renew_cmd+0x42>
    HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 800a1d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1d4:	f001 fcfc 	bl	800bbd0 <HAL_Delay>
    return HM10_EC_OK;
 800a1d8:	e7cb      	b.n	800a172 <send_hm10_renew_cmd+0x3e>
 800a1da:	bf00      	nop
 800a1dc:	20000488 	.word	0x20000488
 800a1e0:	2000049c 	.word	0x2000049c
 800a1e4:	522b5441 	.word	0x522b5441
 800a1e8:	57454e45 	.word	0x57454e45

0800a1ec <set_hm10_name>:
	if (size > HM10_MAX_BLE_NAME_SIZE)
 800a1ec:	290c      	cmp	r1, #12
 800a1ee:	f200 8132 	bhi.w	800a456 <set_hm10_name+0x26a>
{
 800a1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f6:	460e      	mov	r6, r1
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	4c99      	ldr	r4, [pc, #612]	; (800a460 <set_hm10_name+0x274>)
 800a1fc:	4d99      	ldr	r5, [pc, #612]	; (800a464 <set_hm10_name+0x278>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a1fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a202:	2201      	movs	r2, #1
 800a204:	4621      	mov	r1, r4
 800a206:	6828      	ldr	r0, [r5, #0]
 800a208:	f003 fbd2 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a20c:	2803      	cmp	r0, #3
 800a20e:	d1f6      	bne.n	800a1fe <set_hm10_name+0x12>
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a210:	4b95      	ldr	r3, [pc, #596]	; (800a468 <set_hm10_name+0x27c>)
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 800a212:	2245      	movs	r2, #69	; 0x45
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a214:	6023      	str	r3, [r4, #0]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a216:	f644 5341 	movw	r3, #19777	; 0x4d41
	uint8_t size_with_offset = size + bytes_populated_in_TxRx_Buffer;
 800a21a:	f106 0807 	add.w	r8, r6, #7
 800a21e:	fa5f f888 	uxtb.w	r8, r8
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a222:	f1b8 0f07 	cmp.w	r8, #7
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 800a226:	71a2      	strb	r2, [r4, #6]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a228:	80a3      	strh	r3, [r4, #4]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a22a:	f000 8116 	beq.w	800a45a <set_hm10_name+0x26e>
 800a22e:	4b8f      	ldr	r3, [pc, #572]	; (800a46c <set_hm10_name+0x280>)
 800a230:	1bdb      	subs	r3, r3, r7
 800a232:	2b02      	cmp	r3, #2
 800a234:	f240 80cb 	bls.w	800a3ce <set_hm10_name+0x1e2>
 800a238:	1e73      	subs	r3, r6, #1
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	f240 80c7 	bls.w	800a3ce <set_hm10_name+0x1e2>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	f8c4 3007 	str.w	r3, [r4, #7]
 800a246:	08b3      	lsrs	r3, r6, #2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f000 80a2 	beq.w	800a392 <set_hm10_name+0x1a6>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	2b03      	cmp	r3, #3
 800a252:	f8c4 200b 	str.w	r2, [r4, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a256:	f040 809c 	bne.w	800a392 <set_hm10_name+0x1a6>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f8c4 300f 	str.w	r3, [r4, #15]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 800a260:	fa1f f288 	uxth.w	r2, r8
 800a264:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a268:	497d      	ldr	r1, [pc, #500]	; (800a460 <set_hm10_name+0x274>)
 800a26a:	6828      	ldr	r0, [r5, #0]
 800a26c:	f003 fafe 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a270:	2801      	cmp	r0, #1
 800a272:	f000 808b 	beq.w	800a38c <set_hm10_name+0x1a0>
 800a276:	1e83      	subs	r3, r0, #2
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d802      	bhi.n	800a284 <set_hm10_name+0x98>
		return HM10_EC_NR;
 800a27e:	2002      	movs	r0, #2
}
 800a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ret != HAL_OK)
 800a284:	2800      	cmp	r0, #0
 800a286:	d1fb      	bne.n	800a280 <set_hm10_name+0x94>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 800a288:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a28c:	4642      	mov	r2, r8
 800a28e:	6828      	ldr	r0, [r5, #0]
 800a290:	4973      	ldr	r1, [pc, #460]	; (800a460 <set_hm10_name+0x274>)
 800a292:	f003 fb8d 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a296:	2801      	cmp	r0, #1
 800a298:	d078      	beq.n	800a38c <set_hm10_name+0x1a0>
 800a29a:	1e83      	subs	r3, r0, #2
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d9ed      	bls.n	800a27e <set_hm10_name+0x92>
	if (ret != HAL_OK)
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1ec      	bne.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Name_resp_without_name_value[bytes_compared])
 800a2a6:	4b72      	ldr	r3, [pc, #456]	; (800a470 <set_hm10_name+0x284>)
 800a2a8:	7821      	ldrb	r1, [r4, #0]
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	4291      	cmp	r1, r2
 800a2ae:	d16d      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2b0:	7861      	ldrb	r1, [r4, #1]
 800a2b2:	785a      	ldrb	r2, [r3, #1]
 800a2b4:	4291      	cmp	r1, r2
 800a2b6:	d169      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2b8:	78a1      	ldrb	r1, [r4, #2]
 800a2ba:	789a      	ldrb	r2, [r3, #2]
 800a2bc:	4291      	cmp	r1, r2
 800a2be:	d165      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2c0:	78e1      	ldrb	r1, [r4, #3]
 800a2c2:	78da      	ldrb	r2, [r3, #3]
 800a2c4:	4291      	cmp	r1, r2
 800a2c6:	d161      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2c8:	7921      	ldrb	r1, [r4, #4]
 800a2ca:	791a      	ldrb	r2, [r3, #4]
 800a2cc:	4291      	cmp	r1, r2
 800a2ce:	d15d      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2d0:	7961      	ldrb	r1, [r4, #5]
 800a2d2:	795a      	ldrb	r2, [r3, #5]
 800a2d4:	4291      	cmp	r1, r2
 800a2d6:	d159      	bne.n	800a38c <set_hm10_name+0x1a0>
 800a2d8:	799b      	ldrb	r3, [r3, #6]
 800a2da:	79a2      	ldrb	r2, [r4, #6]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d155      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a2e0:	f1b8 0f07 	cmp.w	r8, #7
 800a2e4:	d0cc      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a2e6:	79e2      	ldrb	r2, [r4, #7]
 800a2e8:	783b      	ldrb	r3, [r7, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d14e      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a2ee:	f1b8 0f08 	cmp.w	r8, #8
 800a2f2:	d0c5      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a2f4:	7a22      	ldrb	r2, [r4, #8]
 800a2f6:	787b      	ldrb	r3, [r7, #1]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d147      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a2fc:	f1b8 0f09 	cmp.w	r8, #9
 800a300:	d0be      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a302:	7a62      	ldrb	r2, [r4, #9]
 800a304:	78bb      	ldrb	r3, [r7, #2]
 800a306:	429a      	cmp	r2, r3
 800a308:	d140      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a30a:	f1b8 0f0a 	cmp.w	r8, #10
 800a30e:	d0b7      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a310:	7aa2      	ldrb	r2, [r4, #10]
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	429a      	cmp	r2, r3
 800a316:	d139      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a318:	f1b8 0f0b 	cmp.w	r8, #11
 800a31c:	d0b0      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a31e:	7ae2      	ldrb	r2, [r4, #11]
 800a320:	793b      	ldrb	r3, [r7, #4]
 800a322:	429a      	cmp	r2, r3
 800a324:	d132      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a326:	f1b8 0f0c 	cmp.w	r8, #12
 800a32a:	d0a9      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a32c:	7b22      	ldrb	r2, [r4, #12]
 800a32e:	797b      	ldrb	r3, [r7, #5]
 800a330:	429a      	cmp	r2, r3
 800a332:	d12b      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a334:	f1b8 0f0d 	cmp.w	r8, #13
 800a338:	d0a2      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a33a:	7b62      	ldrb	r2, [r4, #13]
 800a33c:	79bb      	ldrb	r3, [r7, #6]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d124      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a342:	f1b8 0f0e 	cmp.w	r8, #14
 800a346:	d09b      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a348:	7ba2      	ldrb	r2, [r4, #14]
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d11d      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a350:	f1b8 0f0f 	cmp.w	r8, #15
 800a354:	d094      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a356:	7be2      	ldrb	r2, [r4, #15]
 800a358:	7a3b      	ldrb	r3, [r7, #8]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d116      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a35e:	f1b8 0f10 	cmp.w	r8, #16
 800a362:	d08d      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a364:	7c22      	ldrb	r2, [r4, #16]
 800a366:	7a7b      	ldrb	r3, [r7, #9]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d10f      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a36c:	f1b8 0f11 	cmp.w	r8, #17
 800a370:	d086      	beq.n	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a372:	7c62      	ldrb	r2, [r4, #17]
 800a374:	7abb      	ldrb	r3, [r7, #10]
 800a376:	429a      	cmp	r2, r3
 800a378:	d108      	bne.n	800a38c <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800a37a:	f1b8 0f13 	cmp.w	r8, #19
 800a37e:	f47f af7f 	bne.w	800a280 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 800a382:	7ca2      	ldrb	r2, [r4, #18]
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	429a      	cmp	r2, r3
 800a388:	f43f af7a 	beq.w	800a280 <set_hm10_name+0x94>
	  case HAL_ERROR:
		return HM10_EC_ERR;
 800a38c:	2004      	movs	r0, #4
}
 800a38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a392:	f006 03fc 	and.w	r3, r6, #252	; 0xfc
 800a396:	1dda      	adds	r2, r3, #7
 800a398:	429e      	cmp	r6, r3
 800a39a:	b2d2      	uxtb	r2, r2
 800a39c:	f43f af60 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3a0:	5cf9      	ldrb	r1, [r7, r3]
 800a3a2:	54a1      	strb	r1, [r4, r2]
 800a3a4:	f103 0208 	add.w	r2, r3, #8
 800a3a8:	b2d2      	uxtb	r2, r2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3aa:	1c59      	adds	r1, r3, #1
 800a3ac:	4590      	cmp	r8, r2
 800a3ae:	b2c9      	uxtb	r1, r1
 800a3b0:	f67f af56 	bls.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3b4:	5c79      	ldrb	r1, [r7, r1]
 800a3b6:	54a1      	strb	r1, [r4, r2]
 800a3b8:	f103 0209 	add.w	r2, r3, #9
 800a3bc:	b2d2      	uxtb	r2, r2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3be:	3302      	adds	r3, #2
 800a3c0:	4590      	cmp	r8, r2
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f67f af4c 	bls.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3c8:	5cfb      	ldrb	r3, [r7, r3]
 800a3ca:	54a3      	strb	r3, [r4, r2]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3cc:	e748      	b.n	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3ce:	783b      	ldrb	r3, [r7, #0]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3d0:	f1b8 0f08 	cmp.w	r8, #8
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3d4:	71e3      	strb	r3, [r4, #7]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3d6:	f43f af43 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3da:	787b      	ldrb	r3, [r7, #1]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3dc:	f1b8 0f09 	cmp.w	r8, #9
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3e0:	7223      	strb	r3, [r4, #8]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3e2:	f43f af3d 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3e6:	78bb      	ldrb	r3, [r7, #2]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3e8:	f1b8 0f0a 	cmp.w	r8, #10
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3ec:	7263      	strb	r3, [r4, #9]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3ee:	f43f af37 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3f4:	f1b8 0f0b 	cmp.w	r8, #11
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3f8:	72a3      	strb	r3, [r4, #10]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a3fa:	f43f af31 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a3fe:	793b      	ldrb	r3, [r7, #4]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a400:	f1b8 0f0c 	cmp.w	r8, #12
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a404:	72e3      	strb	r3, [r4, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a406:	f43f af2b 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a40a:	797b      	ldrb	r3, [r7, #5]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a40c:	f1b8 0f0d 	cmp.w	r8, #13
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a410:	7323      	strb	r3, [r4, #12]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a412:	f43f af25 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a416:	79bb      	ldrb	r3, [r7, #6]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a418:	f1b8 0f0e 	cmp.w	r8, #14
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a41c:	7363      	strb	r3, [r4, #13]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a41e:	f43f af1f 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a422:	79fb      	ldrb	r3, [r7, #7]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a424:	f1b8 0f0f 	cmp.w	r8, #15
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a428:	73a3      	strb	r3, [r4, #14]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a42a:	f43f af19 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a42e:	7a3b      	ldrb	r3, [r7, #8]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a430:	f1b8 0f10 	cmp.w	r8, #16
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a434:	73e3      	strb	r3, [r4, #15]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a436:	f43f af13 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a43a:	7a7b      	ldrb	r3, [r7, #9]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a43c:	f1b8 0f11 	cmp.w	r8, #17
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a440:	7423      	strb	r3, [r4, #16]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a442:	f43f af0d 	beq.w	800a260 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a446:	7abb      	ldrb	r3, [r7, #10]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a448:	f1b8 0f13 	cmp.w	r8, #19
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800a44c:	7463      	strb	r3, [r4, #17]
 800a44e:	bf04      	itt	eq
 800a450:	7afb      	ldrbeq	r3, [r7, #11]
 800a452:	74a3      	strbeq	r3, [r4, #18]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a454:	e704      	b.n	800a260 <set_hm10_name+0x74>
		return HM10_EC_ERR;
 800a456:	2004      	movs	r0, #4
}
 800a458:	4770      	bx	lr
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800a45a:	4642      	mov	r2, r8
 800a45c:	e702      	b.n	800a264 <set_hm10_name+0x78>
 800a45e:	bf00      	nop
 800a460:	20000488 	.word	0x20000488
 800a464:	2000049c 	.word	0x2000049c
 800a468:	4e2b5441 	.word	0x4e2b5441
 800a46c:	2000048e 	.word	0x2000048e
 800a470:	20000000 	.word	0x20000000

0800a474 <set_hm10_role>:
	switch (ble_role)
 800a474:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d901      	bls.n	800a480 <set_hm10_role+0xc>
			return HM10_EC_ERR;
 800a47c:	2004      	movs	r0, #4
}
 800a47e:	4770      	bx	lr
{
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4605      	mov	r5, r0
 800a484:	4c2d      	ldr	r4, [pc, #180]	; (800a53c <set_hm10_role+0xc8>)
 800a486:	4e2e      	ldr	r6, [pc, #184]	; (800a540 <set_hm10_role+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a488:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a48c:	2201      	movs	r2, #1
 800a48e:	4621      	mov	r1, r4
 800a490:	6830      	ldr	r0, [r6, #0]
 800a492:	f003 fa8d 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a496:	2803      	cmp	r0, #3
 800a498:	d1f6      	bne.n	800a488 <set_hm10_role+0x14>
	TxRx_Buffer[4] = 'O';
 800a49a:	f644 4e4f 	movw	lr, #19535	; 0x4c4f
	TxRx_Buffer[6] = 'E';
 800a49e:	f04f 0c45 	mov.w	ip, #69	; 0x45
	TxRx_Buffer[0] = 'A';
 800a4a2:	4b28      	ldr	r3, [pc, #160]	; (800a544 <set_hm10_role+0xd0>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a4a4:	2208      	movs	r2, #8
	TxRx_Buffer[0] = 'A';
 800a4a6:	6023      	str	r3, [r4, #0]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a4a8:	4924      	ldr	r1, [pc, #144]	; (800a53c <set_hm10_role+0xc8>)
 800a4aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a4ae:	6830      	ldr	r0, [r6, #0]
	TxRx_Buffer[7] = ble_role;
 800a4b0:	71e5      	strb	r5, [r4, #7]
	TxRx_Buffer[4] = 'O';
 800a4b2:	f8a4 e004 	strh.w	lr, [r4, #4]
	TxRx_Buffer[6] = 'E';
 800a4b6:	f884 c006 	strb.w	ip, [r4, #6]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a4ba:	f003 f9d7 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a4be:	2801      	cmp	r0, #1
 800a4c0:	d010      	beq.n	800a4e4 <set_hm10_role+0x70>
 800a4c2:	1e82      	subs	r2, r0, #2
 800a4c4:	b2d2      	uxtb	r2, r2
 800a4c6:	2a01      	cmp	r2, #1
 800a4c8:	d801      	bhi.n	800a4ce <set_hm10_role+0x5a>
		return HM10_EC_NR;
 800a4ca:	2002      	movs	r0, #2
}
 800a4cc:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d1fc      	bne.n	800a4cc <set_hm10_role+0x58>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_ROLE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a4d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a4d6:	2208      	movs	r2, #8
 800a4d8:	6830      	ldr	r0, [r6, #0]
 800a4da:	4918      	ldr	r1, [pc, #96]	; (800a53c <set_hm10_role+0xc8>)
 800a4dc:	f003 fa68 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a4e0:	2801      	cmp	r0, #1
 800a4e2:	d101      	bne.n	800a4e8 <set_hm10_role+0x74>
		return HM10_EC_ERR;
 800a4e4:	2004      	movs	r0, #4
}
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (HAL_status)
 800a4e8:	1e82      	subs	r2, r0, #2
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	2a01      	cmp	r2, #1
 800a4ee:	d9ec      	bls.n	800a4ca <set_hm10_role+0x56>
	if (ret != HAL_OK)
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d1eb      	bne.n	800a4cc <set_hm10_role+0x58>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Role_resp_without_role_value[bytes_compared])
 800a4f4:	4b14      	ldr	r3, [pc, #80]	; (800a548 <set_hm10_role+0xd4>)
 800a4f6:	7822      	ldrb	r2, [r4, #0]
 800a4f8:	7819      	ldrb	r1, [r3, #0]
 800a4fa:	4291      	cmp	r1, r2
 800a4fc:	d1f2      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a4fe:	7861      	ldrb	r1, [r4, #1]
 800a500:	785a      	ldrb	r2, [r3, #1]
 800a502:	4291      	cmp	r1, r2
 800a504:	d1ee      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a506:	78a1      	ldrb	r1, [r4, #2]
 800a508:	789a      	ldrb	r2, [r3, #2]
 800a50a:	4291      	cmp	r1, r2
 800a50c:	d1ea      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a50e:	78e1      	ldrb	r1, [r4, #3]
 800a510:	78da      	ldrb	r2, [r3, #3]
 800a512:	4291      	cmp	r1, r2
 800a514:	d1e6      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a516:	7921      	ldrb	r1, [r4, #4]
 800a518:	791a      	ldrb	r2, [r3, #4]
 800a51a:	4291      	cmp	r1, r2
 800a51c:	d1e2      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a51e:	7961      	ldrb	r1, [r4, #5]
 800a520:	795a      	ldrb	r2, [r3, #5]
 800a522:	4291      	cmp	r1, r2
 800a524:	d1de      	bne.n	800a4e4 <set_hm10_role+0x70>
 800a526:	79a2      	ldrb	r2, [r4, #6]
 800a528:	799b      	ldrb	r3, [r3, #6]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d1da      	bne.n	800a4e4 <set_hm10_role+0x70>
	if (TxRx_Buffer[bytes_compared] != ble_role)
 800a52e:	79e0      	ldrb	r0, [r4, #7]
 800a530:	1b40      	subs	r0, r0, r5
 800a532:	bf18      	it	ne
 800a534:	2001      	movne	r0, #1
 800a536:	0080      	lsls	r0, r0, #2
}
 800a538:	bd70      	pop	{r4, r5, r6, pc}
 800a53a:	bf00      	nop
 800a53c:	20000488 	.word	0x20000488
 800a540:	2000049c 	.word	0x2000049c
 800a544:	522b5441 	.word	0x522b5441
 800a548:	20000000 	.word	0x20000000

0800a54c <set_hm10_pin>:
{
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch (pin[current_pin_character])
 800a54e:	7803      	ldrb	r3, [r0, #0]
 800a550:	3b30      	subs	r3, #48	; 0x30
 800a552:	2b09      	cmp	r3, #9
 800a554:	f200 808a 	bhi.w	800a66c <set_hm10_pin+0x120>
 800a558:	7843      	ldrb	r3, [r0, #1]
 800a55a:	4605      	mov	r5, r0
 800a55c:	3b30      	subs	r3, #48	; 0x30
 800a55e:	2b09      	cmp	r3, #9
 800a560:	f100 0701 	add.w	r7, r0, #1
 800a564:	f200 8082 	bhi.w	800a66c <set_hm10_pin+0x120>
 800a568:	7883      	ldrb	r3, [r0, #2]
 800a56a:	3b30      	subs	r3, #48	; 0x30
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	d87d      	bhi.n	800a66c <set_hm10_pin+0x120>
 800a570:	78c3      	ldrb	r3, [r0, #3]
 800a572:	3b30      	subs	r3, #48	; 0x30
 800a574:	2b09      	cmp	r3, #9
 800a576:	d879      	bhi.n	800a66c <set_hm10_pin+0x120>
 800a578:	7903      	ldrb	r3, [r0, #4]
 800a57a:	3b30      	subs	r3, #48	; 0x30
 800a57c:	2b09      	cmp	r3, #9
 800a57e:	d875      	bhi.n	800a66c <set_hm10_pin+0x120>
 800a580:	7943      	ldrb	r3, [r0, #5]
 800a582:	3b30      	subs	r3, #48	; 0x30
 800a584:	2b09      	cmp	r3, #9
 800a586:	d871      	bhi.n	800a66c <set_hm10_pin+0x120>
 800a588:	4c40      	ldr	r4, [pc, #256]	; (800a68c <set_hm10_pin+0x140>)
 800a58a:	4e41      	ldr	r6, [pc, #260]	; (800a690 <set_hm10_pin+0x144>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a58c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a590:	2201      	movs	r2, #1
 800a592:	4621      	mov	r1, r4
 800a594:	6830      	ldr	r0, [r6, #0]
 800a596:	f003 fa0b 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a59a:	2803      	cmp	r0, #3
 800a59c:	d1f6      	bne.n	800a58c <set_hm10_pin+0x40>
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a59e:	4b3d      	ldr	r3, [pc, #244]	; (800a694 <set_hm10_pin+0x148>)
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 800a5a0:	2253      	movs	r2, #83	; 0x53
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a5a2:	6023      	str	r3, [r4, #0]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800a5a4:	f245 3341 	movw	r3, #21313	; 0x5341
 800a5a8:	80a3      	strh	r3, [r4, #4]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 800a5aa:	4b3b      	ldr	r3, [pc, #236]	; (800a698 <set_hm10_pin+0x14c>)
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 800a5ac:	71a2      	strb	r2, [r4, #6]
 800a5ae:	1bdb      	subs	r3, r3, r7
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d95d      	bls.n	800a670 <set_hm10_pin+0x124>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	f8c4 3007 	str.w	r3, [r4, #7]
 800a5ba:	792b      	ldrb	r3, [r5, #4]
 800a5bc:	72e3      	strb	r3, [r4, #11]
 800a5be:	796b      	ldrb	r3, [r5, #5]
 800a5c0:	7323      	strb	r3, [r4, #12]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_PIN_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a5c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a5c6:	220d      	movs	r2, #13
 800a5c8:	4930      	ldr	r1, [pc, #192]	; (800a68c <set_hm10_pin+0x140>)
 800a5ca:	6830      	ldr	r0, [r6, #0]
 800a5cc:	f003 f94e 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a5d0:	2801      	cmp	r0, #1
 800a5d2:	d04b      	beq.n	800a66c <set_hm10_pin+0x120>
 800a5d4:	1e83      	subs	r3, r0, #2
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d801      	bhi.n	800a5e0 <set_hm10_pin+0x94>
		return HM10_EC_NR;
 800a5dc:	2002      	movs	r0, #2
}
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ret != HAL_OK)
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d1fc      	bne.n	800a5de <set_hm10_pin+0x92>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_PIN_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a5e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a5e8:	220d      	movs	r2, #13
 800a5ea:	6830      	ldr	r0, [r6, #0]
 800a5ec:	4927      	ldr	r1, [pc, #156]	; (800a68c <set_hm10_pin+0x140>)
 800a5ee:	f003 f9df 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	d03a      	beq.n	800a66c <set_hm10_pin+0x120>
 800a5f6:	1e83      	subs	r3, r0, #2
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d9ee      	bls.n	800a5dc <set_hm10_pin+0x90>
	if (ret != HAL_OK)
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1ed      	bne.n	800a5de <set_hm10_pin+0x92>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Pin_resp_without_pin_value[bytes_compared])
 800a602:	4b26      	ldr	r3, [pc, #152]	; (800a69c <set_hm10_pin+0x150>)
 800a604:	7821      	ldrb	r1, [r4, #0]
 800a606:	781a      	ldrb	r2, [r3, #0]
 800a608:	4291      	cmp	r1, r2
 800a60a:	d12f      	bne.n	800a66c <set_hm10_pin+0x120>
 800a60c:	7861      	ldrb	r1, [r4, #1]
 800a60e:	785a      	ldrb	r2, [r3, #1]
 800a610:	4291      	cmp	r1, r2
 800a612:	d12b      	bne.n	800a66c <set_hm10_pin+0x120>
 800a614:	78a1      	ldrb	r1, [r4, #2]
 800a616:	789a      	ldrb	r2, [r3, #2]
 800a618:	4291      	cmp	r1, r2
 800a61a:	d127      	bne.n	800a66c <set_hm10_pin+0x120>
 800a61c:	78e1      	ldrb	r1, [r4, #3]
 800a61e:	78da      	ldrb	r2, [r3, #3]
 800a620:	4291      	cmp	r1, r2
 800a622:	d123      	bne.n	800a66c <set_hm10_pin+0x120>
 800a624:	7921      	ldrb	r1, [r4, #4]
 800a626:	791a      	ldrb	r2, [r3, #4]
 800a628:	4291      	cmp	r1, r2
 800a62a:	d11f      	bne.n	800a66c <set_hm10_pin+0x120>
 800a62c:	7961      	ldrb	r1, [r4, #5]
 800a62e:	795a      	ldrb	r2, [r3, #5]
 800a630:	4291      	cmp	r1, r2
 800a632:	d11b      	bne.n	800a66c <set_hm10_pin+0x120>
 800a634:	79a2      	ldrb	r2, [r4, #6]
 800a636:	799b      	ldrb	r3, [r3, #6]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d117      	bne.n	800a66c <set_hm10_pin+0x120>
		if (TxRx_Buffer[bytes_compared++] != pin[current_pin_character])
 800a63c:	79e2      	ldrb	r2, [r4, #7]
 800a63e:	782b      	ldrb	r3, [r5, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d113      	bne.n	800a66c <set_hm10_pin+0x120>
 800a644:	7a22      	ldrb	r2, [r4, #8]
 800a646:	786b      	ldrb	r3, [r5, #1]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d10f      	bne.n	800a66c <set_hm10_pin+0x120>
 800a64c:	7a62      	ldrb	r2, [r4, #9]
 800a64e:	78ab      	ldrb	r3, [r5, #2]
 800a650:	429a      	cmp	r2, r3
 800a652:	d10b      	bne.n	800a66c <set_hm10_pin+0x120>
 800a654:	7aa2      	ldrb	r2, [r4, #10]
 800a656:	78eb      	ldrb	r3, [r5, #3]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d107      	bne.n	800a66c <set_hm10_pin+0x120>
 800a65c:	7ae2      	ldrb	r2, [r4, #11]
 800a65e:	792b      	ldrb	r3, [r5, #4]
 800a660:	429a      	cmp	r2, r3
 800a662:	d103      	bne.n	800a66c <set_hm10_pin+0x120>
 800a664:	7b22      	ldrb	r2, [r4, #12]
 800a666:	796b      	ldrb	r3, [r5, #5]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d0b8      	beq.n	800a5de <set_hm10_pin+0x92>
				return HM10_EC_ERR;
 800a66c:	2004      	movs	r0, #4
}
 800a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 800a670:	782b      	ldrb	r3, [r5, #0]
 800a672:	71e3      	strb	r3, [r4, #7]
 800a674:	786b      	ldrb	r3, [r5, #1]
 800a676:	7223      	strb	r3, [r4, #8]
 800a678:	78ab      	ldrb	r3, [r5, #2]
 800a67a:	7263      	strb	r3, [r4, #9]
 800a67c:	78eb      	ldrb	r3, [r5, #3]
 800a67e:	72a3      	strb	r3, [r4, #10]
 800a680:	792b      	ldrb	r3, [r5, #4]
 800a682:	72e3      	strb	r3, [r4, #11]
 800a684:	796b      	ldrb	r3, [r5, #5]
 800a686:	7323      	strb	r3, [r4, #12]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 800a688:	e79b      	b.n	800a5c2 <set_hm10_pin+0x76>
 800a68a:	bf00      	nop
 800a68c:	20000488 	.word	0x20000488
 800a690:	2000049c 	.word	0x2000049c
 800a694:	502b5441 	.word	0x502b5441
 800a698:	2000048f 	.word	0x2000048f
 800a69c:	20000000 	.word	0x20000000

0800a6a0 <set_hm10_pin_code_mode>:
	switch (pin_code_mode)
 800a6a0:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 800a6a4:	2b30      	cmp	r3, #48	; 0x30
 800a6a6:	d001      	beq.n	800a6ac <set_hm10_pin_code_mode+0xc>
			return HM10_EC_ERR;
 800a6a8:	2004      	movs	r0, #4
}
 800a6aa:	4770      	bx	lr
{
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	4c2d      	ldr	r4, [pc, #180]	; (800a768 <set_hm10_pin_code_mode+0xc8>)
 800a6b2:	4d2e      	ldr	r5, [pc, #184]	; (800a76c <set_hm10_pin_code_mode+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a6b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	6828      	ldr	r0, [r5, #0]
 800a6be:	f003 f977 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a6c2:	2803      	cmp	r0, #3
 800a6c4:	d1f6      	bne.n	800a6b4 <set_hm10_pin_code_mode+0x14>
	TxRx_Buffer[4] = 'Y';
 800a6c6:	f245 0e59 	movw	lr, #20569	; 0x5059
	TxRx_Buffer[6] = 'E';
 800a6ca:	f04f 0c45 	mov.w	ip, #69	; 0x45
	TxRx_Buffer[0] = 'A';
 800a6ce:	4b28      	ldr	r3, [pc, #160]	; (800a770 <set_hm10_pin_code_mode+0xd0>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a6d0:	2208      	movs	r2, #8
	TxRx_Buffer[0] = 'A';
 800a6d2:	6023      	str	r3, [r4, #0]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a6d4:	4924      	ldr	r1, [pc, #144]	; (800a768 <set_hm10_pin_code_mode+0xc8>)
 800a6d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a6da:	6828      	ldr	r0, [r5, #0]
	TxRx_Buffer[7] = pin_code_mode;
 800a6dc:	71e6      	strb	r6, [r4, #7]
	TxRx_Buffer[4] = 'Y';
 800a6de:	f8a4 e004 	strh.w	lr, [r4, #4]
	TxRx_Buffer[6] = 'E';
 800a6e2:	f884 c006 	strb.w	ip, [r4, #6]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a6e6:	f003 f8c1 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a6ea:	2801      	cmp	r0, #1
 800a6ec:	d005      	beq.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a6ee:	1e83      	subs	r3, r0, #2
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d803      	bhi.n	800a6fe <set_hm10_pin_code_mode+0x5e>
		return HM10_EC_NR;
 800a6f6:	2002      	movs	r0, #2
}
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
			return HM10_EC_ERR;
 800a6fa:	2004      	movs	r0, #4
}
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d1fa      	bne.n	800a6f8 <set_hm10_pin_code_mode+0x58>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_TYPE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a702:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a706:	2208      	movs	r2, #8
 800a708:	6828      	ldr	r0, [r5, #0]
 800a70a:	4917      	ldr	r1, [pc, #92]	; (800a768 <set_hm10_pin_code_mode+0xc8>)
 800a70c:	f003 f950 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a710:	2801      	cmp	r0, #1
 800a712:	d0f2      	beq.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a714:	1e83      	subs	r3, r0, #2
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d9ec      	bls.n	800a6f6 <set_hm10_pin_code_mode+0x56>
	if (ret != HAL_OK)
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d1eb      	bne.n	800a6f8 <set_hm10_pin_code_mode+0x58>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Type_resp_without_type_value[bytes_compared])
 800a720:	4b14      	ldr	r3, [pc, #80]	; (800a774 <set_hm10_pin_code_mode+0xd4>)
 800a722:	7822      	ldrb	r2, [r4, #0]
 800a724:	7819      	ldrb	r1, [r3, #0]
 800a726:	4291      	cmp	r1, r2
 800a728:	d1e7      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a72a:	7861      	ldrb	r1, [r4, #1]
 800a72c:	785a      	ldrb	r2, [r3, #1]
 800a72e:	4291      	cmp	r1, r2
 800a730:	d1e3      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a732:	78a1      	ldrb	r1, [r4, #2]
 800a734:	789a      	ldrb	r2, [r3, #2]
 800a736:	4291      	cmp	r1, r2
 800a738:	d1df      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a73a:	78e1      	ldrb	r1, [r4, #3]
 800a73c:	78da      	ldrb	r2, [r3, #3]
 800a73e:	4291      	cmp	r1, r2
 800a740:	d1db      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a742:	7921      	ldrb	r1, [r4, #4]
 800a744:	791a      	ldrb	r2, [r3, #4]
 800a746:	4291      	cmp	r1, r2
 800a748:	d1d7      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a74a:	7961      	ldrb	r1, [r4, #5]
 800a74c:	795a      	ldrb	r2, [r3, #5]
 800a74e:	4291      	cmp	r1, r2
 800a750:	d1d3      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
 800a752:	79a2      	ldrb	r2, [r4, #6]
 800a754:	799b      	ldrb	r3, [r3, #6]
 800a756:	429a      	cmp	r2, r3
 800a758:	d1cf      	bne.n	800a6fa <set_hm10_pin_code_mode+0x5a>
	if (TxRx_Buffer[bytes_compared] != pin_code_mode)
 800a75a:	79e3      	ldrb	r3, [r4, #7]
 800a75c:	1b98      	subs	r0, r3, r6
 800a75e:	bf18      	it	ne
 800a760:	2001      	movne	r0, #1
 800a762:	0080      	lsls	r0, r0, #2
}
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	bf00      	nop
 800a768:	20000488 	.word	0x20000488
 800a76c:	2000049c 	.word	0x2000049c
 800a770:	542b5441 	.word	0x542b5441
 800a774:	20000000 	.word	0x20000000

0800a778 <set_hm10_module_work_mode>:
    switch (module_work_mode)
 800a778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <set_hm10_module_work_mode+0xc>
            return HM10_EC_ERR;
 800a780:	2004      	movs	r0, #4
}
 800a782:	4770      	bx	lr
{
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4606      	mov	r6, r0
 800a788:	4c2d      	ldr	r4, [pc, #180]	; (800a840 <set_hm10_module_work_mode+0xc8>)
 800a78a:	4d2e      	ldr	r5, [pc, #184]	; (800a844 <set_hm10_module_work_mode+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a78c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a790:	2201      	movs	r2, #1
 800a792:	4621      	mov	r1, r4
 800a794:	6828      	ldr	r0, [r5, #0]
 800a796:	f003 f90b 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a79a:	2803      	cmp	r0, #3
 800a79c:	d1f6      	bne.n	800a78c <set_hm10_module_work_mode+0x14>
    TxRx_Buffer[4] = 'O';
 800a79e:	f244 4e4f 	movw	lr, #17487	; 0x444f
    TxRx_Buffer[6] = 'E';
 800a7a2:	f04f 0c45 	mov.w	ip, #69	; 0x45
    TxRx_Buffer[0] = 'A';
 800a7a6:	4b28      	ldr	r3, [pc, #160]	; (800a848 <set_hm10_module_work_mode+0xd0>)
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a7a8:	2208      	movs	r2, #8
    TxRx_Buffer[0] = 'A';
 800a7aa:	6023      	str	r3, [r4, #0]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a7ac:	4924      	ldr	r1, [pc, #144]	; (800a840 <set_hm10_module_work_mode+0xc8>)
 800a7ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a7b2:	6828      	ldr	r0, [r5, #0]
    TxRx_Buffer[7] = module_work_mode;
 800a7b4:	71e6      	strb	r6, [r4, #7]
    TxRx_Buffer[4] = 'O';
 800a7b6:	f8a4 e004 	strh.w	lr, [r4, #4]
    TxRx_Buffer[6] = 'E';
 800a7ba:	f884 c006 	strb.w	ip, [r4, #6]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a7be:	f003 f855 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a7c2:	2801      	cmp	r0, #1
 800a7c4:	d005      	beq.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a7c6:	1e82      	subs	r2, r0, #2
 800a7c8:	b2d2      	uxtb	r2, r2
 800a7ca:	2a01      	cmp	r2, #1
 800a7cc:	d803      	bhi.n	800a7d6 <set_hm10_module_work_mode+0x5e>
		return HM10_EC_NR;
 800a7ce:	2002      	movs	r0, #2
}
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
		return HM10_EC_ERR;
 800a7d2:	2004      	movs	r0, #4
}
 800a7d4:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d1fa      	bne.n	800a7d0 <set_hm10_module_work_mode+0x58>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_MODE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a7da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a7de:	2208      	movs	r2, #8
 800a7e0:	6828      	ldr	r0, [r5, #0]
 800a7e2:	4917      	ldr	r1, [pc, #92]	; (800a840 <set_hm10_module_work_mode+0xc8>)
 800a7e4:	f003 f8e4 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a7e8:	2801      	cmp	r0, #1
 800a7ea:	d0f2      	beq.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a7ec:	1e82      	subs	r2, r0, #2
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	2a01      	cmp	r2, #1
 800a7f2:	d9ec      	bls.n	800a7ce <set_hm10_module_work_mode+0x56>
    if (ret != HAL_OK)
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d1eb      	bne.n	800a7d0 <set_hm10_module_work_mode+0x58>
        if (TxRx_Buffer[bytes_compared] != HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared])
 800a7f8:	4b14      	ldr	r3, [pc, #80]	; (800a84c <set_hm10_module_work_mode+0xd4>)
 800a7fa:	7822      	ldrb	r2, [r4, #0]
 800a7fc:	7819      	ldrb	r1, [r3, #0]
 800a7fe:	4291      	cmp	r1, r2
 800a800:	d1e7      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a802:	7861      	ldrb	r1, [r4, #1]
 800a804:	785a      	ldrb	r2, [r3, #1]
 800a806:	4291      	cmp	r1, r2
 800a808:	d1e3      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a80a:	78a1      	ldrb	r1, [r4, #2]
 800a80c:	789a      	ldrb	r2, [r3, #2]
 800a80e:	4291      	cmp	r1, r2
 800a810:	d1df      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a812:	78e1      	ldrb	r1, [r4, #3]
 800a814:	78da      	ldrb	r2, [r3, #3]
 800a816:	4291      	cmp	r1, r2
 800a818:	d1db      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a81a:	7921      	ldrb	r1, [r4, #4]
 800a81c:	791a      	ldrb	r2, [r3, #4]
 800a81e:	4291      	cmp	r1, r2
 800a820:	d1d7      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a822:	7961      	ldrb	r1, [r4, #5]
 800a824:	795a      	ldrb	r2, [r3, #5]
 800a826:	4291      	cmp	r1, r2
 800a828:	d1d3      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
 800a82a:	79a2      	ldrb	r2, [r4, #6]
 800a82c:	799b      	ldrb	r3, [r3, #6]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d1cf      	bne.n	800a7d2 <set_hm10_module_work_mode+0x5a>
    if (TxRx_Buffer[bytes_compared] != module_work_mode)
 800a832:	79e0      	ldrb	r0, [r4, #7]
 800a834:	1b80      	subs	r0, r0, r6
 800a836:	bf18      	it	ne
 800a838:	2001      	movne	r0, #1
 800a83a:	0080      	lsls	r0, r0, #2
}
 800a83c:	bd70      	pop	{r4, r5, r6, pc}
 800a83e:	bf00      	nop
 800a840:	20000488 	.word	0x20000488
 800a844:	2000049c 	.word	0x2000049c
 800a848:	4d2b5441 	.word	0x4d2b5441
 800a84c:	20000000 	.word	0x20000000

0800a850 <disconnect_hm10_from_bt_address>:
{
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4d2c      	ldr	r5, [pc, #176]	; (800a904 <disconnect_hm10_from_bt_address+0xb4>)
 800a854:	4c2c      	ldr	r4, [pc, #176]	; (800a908 <disconnect_hm10_from_bt_address+0xb8>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800a856:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a85a:	2201      	movs	r2, #1
 800a85c:	4629      	mov	r1, r5
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	f003 f8a6 	bl	800d9b0 <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800a864:	2803      	cmp	r0, #3
 800a866:	d1f6      	bne.n	800a856 <disconnect_hm10_from_bt_address+0x6>
    TxRx_Buffer[0] = 'A';
 800a868:	f245 4641 	movw	r6, #21569	; 0x5441
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a86c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a870:	2202      	movs	r2, #2
 800a872:	4924      	ldr	r1, [pc, #144]	; (800a904 <disconnect_hm10_from_bt_address+0xb4>)
 800a874:	6820      	ldr	r0, [r4, #0]
    TxRx_Buffer[0] = 'A';
 800a876:	802e      	strh	r6, [r5, #0]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a878:	f002 fff8 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a87c:	1e43      	subs	r3, r0, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d802      	bhi.n	800a88a <disconnect_hm10_from_bt_address+0x3a>
        return HM10_BT_Connection_Status_Unknown;
 800a884:	2600      	movs	r6, #0
}
 800a886:	4630      	mov	r0, r6
 800a888:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d1fa      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a88e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a892:	2202      	movs	r2, #2
 800a894:	491b      	ldr	r1, [pc, #108]	; (800a904 <disconnect_hm10_from_bt_address+0xb4>)
 800a896:	6820      	ldr	r0, [r4, #0]
 800a898:	f003 f88a 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a89c:	1e43      	subs	r3, r0, #1
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b02      	cmp	r3, #2
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800a8a2:	4606      	mov	r6, r0
  switch (HAL_status)
 800a8a4:	d9ee      	bls.n	800a884 <disconnect_hm10_from_bt_address+0x34>
    if (ret != HAL_OK)
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d1ec      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800a8aa:	782b      	ldrb	r3, [r5, #0]
 800a8ac:	2b4f      	cmp	r3, #79	; 0x4f
 800a8ae:	d1e9      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
 800a8b0:	786b      	ldrb	r3, [r5, #1]
 800a8b2:	2b4b      	cmp	r3, #75	; 0x4b
 800a8b4:	d1e6      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
    ret = HAL_UART_Receive(p_huart, &TxRx_Buffer[bytes_compared], HM10_OK_LOST_RESPONSE_SIZE_WITHOUT_THE_OK_PART, HM10_CUSTOM_HAL_TIMEOUT);
 800a8b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	4913      	ldr	r1, [pc, #76]	; (800a90c <disconnect_hm10_from_bt_address+0xbc>)
 800a8c0:	f003 f876 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a8c4:	2801      	cmp	r0, #1
 800a8c6:	d0de      	beq.n	800a886 <disconnect_hm10_from_bt_address+0x36>
 800a8c8:	1e83      	subs	r3, r0, #2
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d801      	bhi.n	800a8d4 <disconnect_hm10_from_bt_address+0x84>
 800a8d0:	2601      	movs	r6, #1
    if (ret != HAL_OK)
 800a8d2:	e7d8      	b.n	800a886 <disconnect_hm10_from_bt_address+0x36>
    ret = HAL_ret_handler(ret);
 800a8d4:	b200      	sxth	r0, r0
    if (ret != HAL_OK)
 800a8d6:	b980      	cbnz	r0, 800a8fa <disconnect_hm10_from_bt_address+0xaa>
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800a8d8:	78ab      	ldrb	r3, [r5, #2]
 800a8da:	2b2b      	cmp	r3, #43	; 0x2b
 800a8dc:	d1d2      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
 800a8de:	78eb      	ldrb	r3, [r5, #3]
 800a8e0:	2b4c      	cmp	r3, #76	; 0x4c
 800a8e2:	d1cf      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
 800a8e4:	792b      	ldrb	r3, [r5, #4]
 800a8e6:	2b4f      	cmp	r3, #79	; 0x4f
 800a8e8:	d1cc      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
 800a8ea:	796b      	ldrb	r3, [r5, #5]
 800a8ec:	2b53      	cmp	r3, #83	; 0x53
 800a8ee:	d1c9      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
 800a8f0:	79ab      	ldrb	r3, [r5, #6]
 800a8f2:	2b54      	cmp	r3, #84	; 0x54
 800a8f4:	d1c6      	bne.n	800a884 <disconnect_hm10_from_bt_address+0x34>
    return HM10_BT_Connection_Lost;
 800a8f6:	2602      	movs	r6, #2
 800a8f8:	e7c5      	b.n	800a886 <disconnect_hm10_from_bt_address+0x36>
        return HM10_BT_Connection_Status_Unknown;
 800a8fa:	1e83      	subs	r3, r0, #2
 800a8fc:	425e      	negs	r6, r3
 800a8fe:	415e      	adcs	r6, r3
        if (ret == HM10_EC_NR)
 800a900:	e7c1      	b.n	800a886 <disconnect_hm10_from_bt_address+0x36>
 800a902:	bf00      	nop
 800a904:	20000488 	.word	0x20000488
 800a908:	2000049c 	.word	0x2000049c
 800a90c:	2000048a 	.word	0x2000048a

0800a910 <send_hm10_ota_data>:
{
 800a910:	468c      	mov	ip, r1
 800a912:	b508      	push	{r3, lr}
 800a914:	4686      	mov	lr, r0
 800a916:	4613      	mov	r3, r2
	ret = HAL_UART_Transmit(p_huart, ble_ota_data, size, timeout);
 800a918:	4a07      	ldr	r2, [pc, #28]	; (800a938 <send_hm10_ota_data+0x28>)
 800a91a:	4671      	mov	r1, lr
 800a91c:	6810      	ldr	r0, [r2, #0]
 800a91e:	4662      	mov	r2, ip
 800a920:	f002 ffa4 	bl	800d86c <HAL_UART_Transmit>
  switch (HAL_status)
 800a924:	2801      	cmp	r0, #1
 800a926:	d005      	beq.n	800a934 <send_hm10_ota_data+0x24>
 800a928:	1e83      	subs	r3, r0, #2
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	bf98      	it	ls
 800a930:	2002      	movls	r0, #2
}
 800a932:	bd08      	pop	{r3, pc}
		return HM10_EC_ERR;
 800a934:	2004      	movs	r0, #4
}
 800a936:	bd08      	pop	{r3, pc}
 800a938:	2000049c 	.word	0x2000049c

0800a93c <get_hm10_ota_data>:
{
 800a93c:	468c      	mov	ip, r1
 800a93e:	b508      	push	{r3, lr}
 800a940:	4686      	mov	lr, r0
 800a942:	4613      	mov	r3, r2
	ret = HAL_UART_Receive(p_huart, ble_ota_data, size, timeout);
 800a944:	4a07      	ldr	r2, [pc, #28]	; (800a964 <get_hm10_ota_data+0x28>)
 800a946:	4671      	mov	r1, lr
 800a948:	6810      	ldr	r0, [r2, #0]
 800a94a:	4662      	mov	r2, ip
 800a94c:	f003 f830 	bl	800d9b0 <HAL_UART_Receive>
  switch (HAL_status)
 800a950:	2801      	cmp	r0, #1
 800a952:	d005      	beq.n	800a960 <get_hm10_ota_data+0x24>
 800a954:	1e83      	subs	r3, r0, #2
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	bf98      	it	ls
 800a95c:	2002      	movls	r0, #2
}
 800a95e:	bd08      	pop	{r3, pc}
		return HM10_EC_ERR;
 800a960:	2004      	movs	r0, #4
}
 800a962:	bd08      	pop	{r3, pc}
 800a964:	2000049c 	.word	0x2000049c

0800a968 <convert_number_to_ASCII.constprop.1.isra.0>:

    /* Initialize the 5641AS 7-segment Display Driver module. */
    init_5641as_display_module(&htim2, &display_peripherals, on_time_steps, off_time_steps);
}

static int convert_number_to_ASCII(float src, uint16_t *dst)
 800a968:	b538      	push	{r3, r4, r5, lr}
{
    if ((src>=100) || (src<=-10))
 800a96a:	4992      	ldr	r1, [pc, #584]	; (800abb4 <convert_number_to_ASCII.constprop.1.isra.0+0x24c>)
static int convert_number_to_ASCII(float src, uint16_t *dst)
 800a96c:	4604      	mov	r4, r0
    if ((src>=100) || (src<=-10))
 800a96e:	f7fe fb55 	bl	800901c <__aeabi_fcmpge>
 800a972:	bb50      	cbnz	r0, 800a9ca <convert_number_to_ASCII.constprop.1.isra.0+0x62>
 800a974:	4620      	mov	r0, r4
 800a976:	4990      	ldr	r1, [pc, #576]	; (800abb8 <convert_number_to_ASCII.constprop.1.isra.0+0x250>)
 800a978:	f7fe fb46 	bl	8009008 <__aeabi_fcmple>
 800a97c:	bb28      	cbnz	r0, 800a9ca <convert_number_to_ASCII.constprop.1.isra.0+0x62>
    {
        return -1;
    }

    if (src > 0)
 800a97e:	4620      	mov	r0, r4
 800a980:	2100      	movs	r1, #0
 800a982:	f7fe fb55 	bl	8009030 <__aeabi_fcmpgt>
 800a986:	b1a0      	cbz	r0, 800a9b2 <convert_number_to_ASCII.constprop.1.isra.0+0x4a>
    {
        uint8_t first_character = src/10;
 800a988:	498c      	ldr	r1, [pc, #560]	; (800abbc <convert_number_to_ASCII.constprop.1.isra.0+0x254>)
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7fe fa48 	bl	8008e20 <__aeabi_fdiv>
 800a990:	f7fe fb58 	bl	8009044 <__aeabi_f2uiz>
 800a994:	b2c0      	uxtb	r0, r0
        switch (first_character)
 800a996:	2809      	cmp	r0, #9
 800a998:	d81b      	bhi.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
 800a99a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a99e:	00c3      	.short	0x00c3
 800a9a0:	00cb00c7 	.word	0x00cb00c7
 800a9a4:	00d300cf 	.word	0x00d300cf
 800a9a8:	00db00d7 	.word	0x00db00d7
 800a9ac:	001700df 	.word	0x001700df
 800a9b0:	00e3      	.short	0x00e3
                break;
            default:
                // This case should not give place ever.
        }
    }
    else if (src == 0)
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f7fe fb13 	bl	8008fe0 <__aeabi_fcmpeq>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d03d      	beq.n	800aa3a <convert_number_to_ASCII.constprop.1.isra.0+0xd2>
    {
        dst[0] = Command_NULL_in_ASCII;
 800a9be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
        dst[1] = Number_0Dp_in_ASCII;
        dst[2] = Number_0_in_ASCII;
 800a9c2:	2230      	movs	r2, #48	; 0x30
        dst[0] = Command_NULL_in_ASCII;
 800a9c4:	4b7e      	ldr	r3, [pc, #504]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800a9c6:	6019      	str	r1, [r3, #0]
        dst[2] = Number_0_in_ASCII;
 800a9c8:	809a      	strh	r2, [r3, #4]
                // This case should not give place ever.
        }
    }

    return 0;
}
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
                dst[0] = Number_8_in_ASCII;
 800a9cc:	2338      	movs	r3, #56	; 0x38
 800a9ce:	4d7c      	ldr	r5, [pc, #496]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800a9d0:	802b      	strh	r3, [r5, #0]
        uint8_t second_character = src - (first_character*10);
 800a9d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9d6:	0040      	lsls	r0, r0, #1
 800a9d8:	f7fe f91a 	bl	8008c10 <__aeabi_i2f>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7fe f860 	bl	8008aa4 <__aeabi_fsub>
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	f7fe fb2d 	bl	8009044 <__aeabi_f2uiz>
 800a9ea:	b2c0      	uxtb	r0, r0
        switch (second_character)
 800a9ec:	2809      	cmp	r0, #9
 800a9ee:	d80f      	bhi.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
 800a9f0:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a9f4:	00c100bc 	.word	0x00c100bc
 800a9f8:	007f00c6 	.word	0x007f00c6
 800a9fc:	00890084 	.word	0x00890084
 800aa00:	007a008e 	.word	0x007a008e
 800aa04:	0093000a 	.word	0x0093000a
                dst[1] = Number_8Dp_in_ASCII;
 800aa08:	f44f 7384 	mov.w	r3, #264	; 0x108
 800aa0c:	4d6c      	ldr	r5, [pc, #432]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800aa0e:	806b      	strh	r3, [r5, #2]
        uint8_t third_character = (src - (first_character*10) - (second_character)) * 10;
 800aa10:	f7fe f8fe 	bl	8008c10 <__aeabi_i2f>
 800aa14:	4601      	mov	r1, r0
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7fe f844 	bl	8008aa4 <__aeabi_fsub>
 800aa1c:	4967      	ldr	r1, [pc, #412]	; (800abbc <convert_number_to_ASCII.constprop.1.isra.0+0x254>)
 800aa1e:	f7fe f94b 	bl	8008cb8 <__aeabi_fmul>
 800aa22:	f7fe fb0f 	bl	8009044 <__aeabi_f2uiz>
        switch (third_character)
 800aa26:	b2c0      	uxtb	r0, r0
 800aa28:	2809      	cmp	r0, #9
 800aa2a:	d8ce      	bhi.n	800a9ca <convert_number_to_ASCII.constprop.1.isra.0+0x62>
 800aa2c:	e8df f000 	tbb	[pc, r0]
 800aa30:	44403c38 	.word	0x44403c38
 800aa34:	54504c48 	.word	0x54504c48
 800aa38:	3458      	.short	0x3458
        dst[0] = Letter_minus_sign_in_ASCII;
 800aa3a:	232d      	movs	r3, #45	; 0x2d
 800aa3c:	4d60      	ldr	r5, [pc, #384]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
        uint8_t second_character = (-1)*src;
 800aa3e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800aa42:	4620      	mov	r0, r4
        dst[0] = Letter_minus_sign_in_ASCII;
 800aa44:	802b      	strh	r3, [r5, #0]
        uint8_t second_character = (-1)*src;
 800aa46:	f7fe fafd 	bl	8009044 <__aeabi_f2uiz>
 800aa4a:	b2c0      	uxtb	r0, r0
        switch (second_character)
 800aa4c:	2809      	cmp	r0, #9
 800aa4e:	d80e      	bhi.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
 800aa50:	e8df f010 	tbh	[pc, r0, lsl #1]
 800aa54:	009b00a3 	.word	0x009b00a3
 800aa58:	00ab009f 	.word	0x00ab009f
 800aa5c:	00bc00b8 	.word	0x00bc00b8
 800aa60:	00c400c0 	.word	0x00c400c0
 800aa64:	00a7000a 	.word	0x00a7000a
                dst[1] = Number_8Dp_in_ASCII;
 800aa68:	f44f 7384 	mov.w	r3, #264	; 0x108
 800aa6c:	806b      	strh	r3, [r5, #2]
        uint8_t third_character = ((src*-1) - second_character) * 10;
 800aa6e:	f7fe f8cf 	bl	8008c10 <__aeabi_i2f>
 800aa72:	4601      	mov	r1, r0
 800aa74:	4620      	mov	r0, r4
 800aa76:	f7fe f815 	bl	8008aa4 <__aeabi_fsub>
 800aa7a:	4950      	ldr	r1, [pc, #320]	; (800abbc <convert_number_to_ASCII.constprop.1.isra.0+0x254>)
 800aa7c:	f7fe f91c 	bl	8008cb8 <__aeabi_fmul>
 800aa80:	f7fe fae0 	bl	8009044 <__aeabi_f2uiz>
        switch (third_character)
 800aa84:	b2c0      	uxtb	r0, r0
 800aa86:	2809      	cmp	r0, #9
 800aa88:	d89f      	bhi.n	800a9ca <convert_number_to_ASCII.constprop.1.isra.0+0x62>
 800aa8a:	e8df f000 	tbb	[pc, r0]
 800aa8e:	0e0a      	.short	0x0e0a
 800aa90:	1e1a1612 	.word	0x1e1a1612
 800aa94:	062a2622 	.word	0x062a2622
 800aa98:	4d49      	ldr	r5, [pc, #292]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_9_in_ASCII;
 800aa9a:	2339      	movs	r3, #57	; 0x39
 800aa9c:	80ab      	strh	r3, [r5, #4]
}
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	4d47      	ldr	r5, [pc, #284]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_0_in_ASCII;
 800aaa2:	2330      	movs	r3, #48	; 0x30
 800aaa4:	80ab      	strh	r3, [r5, #4]
}
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	4d45      	ldr	r5, [pc, #276]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_1_in_ASCII;
 800aaaa:	2331      	movs	r3, #49	; 0x31
 800aaac:	80ab      	strh	r3, [r5, #4]
}
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	4d43      	ldr	r5, [pc, #268]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_2_in_ASCII;
 800aab2:	2332      	movs	r3, #50	; 0x32
 800aab4:	80ab      	strh	r3, [r5, #4]
}
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	4d41      	ldr	r5, [pc, #260]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_3_in_ASCII;
 800aaba:	2333      	movs	r3, #51	; 0x33
 800aabc:	80ab      	strh	r3, [r5, #4]
}
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	4d3f      	ldr	r5, [pc, #252]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_4_in_ASCII;
 800aac2:	2334      	movs	r3, #52	; 0x34
 800aac4:	80ab      	strh	r3, [r5, #4]
}
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	4d3d      	ldr	r5, [pc, #244]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_5_in_ASCII;
 800aaca:	2335      	movs	r3, #53	; 0x35
 800aacc:	80ab      	strh	r3, [r5, #4]
}
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	4d3b      	ldr	r5, [pc, #236]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_6_in_ASCII;
 800aad2:	2336      	movs	r3, #54	; 0x36
 800aad4:	80ab      	strh	r3, [r5, #4]
}
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	4d39      	ldr	r5, [pc, #228]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_7_in_ASCII;
 800aada:	2337      	movs	r3, #55	; 0x37
 800aadc:	80ab      	strh	r3, [r5, #4]
}
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	4d37      	ldr	r5, [pc, #220]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
                dst[2] = Number_8_in_ASCII;
 800aae2:	2338      	movs	r3, #56	; 0x38
 800aae4:	80ab      	strh	r3, [r5, #4]
}
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
                dst[1] = Number_7Dp_in_ASCII;
 800aae8:	f240 1307 	movw	r3, #263	; 0x107
 800aaec:	4d34      	ldr	r5, [pc, #208]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800aaee:	806b      	strh	r3, [r5, #2]
                break;
 800aaf0:	e78e      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_3Dp_in_ASCII;
 800aaf2:	f240 1303 	movw	r3, #259	; 0x103
 800aaf6:	4d32      	ldr	r5, [pc, #200]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800aaf8:	806b      	strh	r3, [r5, #2]
                break;
 800aafa:	e789      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_4Dp_in_ASCII;
 800aafc:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ab00:	4d2f      	ldr	r5, [pc, #188]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab02:	806b      	strh	r3, [r5, #2]
                break;
 800ab04:	e784      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_5Dp_in_ASCII;
 800ab06:	f240 1305 	movw	r3, #261	; 0x105
 800ab0a:	4d2d      	ldr	r5, [pc, #180]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab0c:	806b      	strh	r3, [r5, #2]
                break;
 800ab0e:	e77f      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_6Dp_in_ASCII;
 800ab10:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ab14:	4d2a      	ldr	r5, [pc, #168]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab16:	806b      	strh	r3, [r5, #2]
                break;
 800ab18:	e77a      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_9Dp_in_ASCII;
 800ab1a:	f240 1309 	movw	r3, #265	; 0x109
 800ab1e:	4d28      	ldr	r5, [pc, #160]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab20:	806b      	strh	r3, [r5, #2]
                break;
 800ab22:	e775      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[0] = Command_NULL_in_ASCII;
 800ab24:	2300      	movs	r3, #0
 800ab26:	4d26      	ldr	r5, [pc, #152]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab28:	802b      	strh	r3, [r5, #0]
                break;
 800ab2a:	e752      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_1_in_ASCII;
 800ab2c:	2331      	movs	r3, #49	; 0x31
 800ab2e:	4d24      	ldr	r5, [pc, #144]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab30:	802b      	strh	r3, [r5, #0]
                break;
 800ab32:	e74e      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_2_in_ASCII;
 800ab34:	2332      	movs	r3, #50	; 0x32
 800ab36:	4d22      	ldr	r5, [pc, #136]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab38:	802b      	strh	r3, [r5, #0]
                break;
 800ab3a:	e74a      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_3_in_ASCII;
 800ab3c:	2333      	movs	r3, #51	; 0x33
 800ab3e:	4d20      	ldr	r5, [pc, #128]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab40:	802b      	strh	r3, [r5, #0]
                break;
 800ab42:	e746      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_4_in_ASCII;
 800ab44:	2334      	movs	r3, #52	; 0x34
 800ab46:	4d1e      	ldr	r5, [pc, #120]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab48:	802b      	strh	r3, [r5, #0]
                break;
 800ab4a:	e742      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_5_in_ASCII;
 800ab4c:	2335      	movs	r3, #53	; 0x35
 800ab4e:	4d1c      	ldr	r5, [pc, #112]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab50:	802b      	strh	r3, [r5, #0]
                break;
 800ab52:	e73e      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_6_in_ASCII;
 800ab54:	2336      	movs	r3, #54	; 0x36
 800ab56:	4d1a      	ldr	r5, [pc, #104]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab58:	802b      	strh	r3, [r5, #0]
                break;
 800ab5a:	e73a      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_7_in_ASCII;
 800ab5c:	2337      	movs	r3, #55	; 0x37
 800ab5e:	4d18      	ldr	r5, [pc, #96]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab60:	802b      	strh	r3, [r5, #0]
                break;
 800ab62:	e736      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[0] = Number_9_in_ASCII;
 800ab64:	2339      	movs	r3, #57	; 0x39
 800ab66:	4d16      	ldr	r5, [pc, #88]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab68:	802b      	strh	r3, [r5, #0]
                break;
 800ab6a:	e732      	b.n	800a9d2 <convert_number_to_ASCII.constprop.1.isra.0+0x6a>
                dst[1] = Number_0Dp_in_ASCII;
 800ab6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab70:	4d13      	ldr	r5, [pc, #76]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab72:	806b      	strh	r3, [r5, #2]
                break;
 800ab74:	e74c      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_1Dp_in_ASCII;
 800ab76:	f240 1301 	movw	r3, #257	; 0x101
 800ab7a:	4d11      	ldr	r5, [pc, #68]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab7c:	806b      	strh	r3, [r5, #2]
                break;
 800ab7e:	e747      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_2Dp_in_ASCII;
 800ab80:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ab84:	4d0e      	ldr	r5, [pc, #56]	; (800abc0 <convert_number_to_ASCII.constprop.1.isra.0+0x258>)
 800ab86:	806b      	strh	r3, [r5, #2]
                break;
 800ab88:	e742      	b.n	800aa10 <convert_number_to_ASCII.constprop.1.isra.0+0xa8>
                dst[1] = Number_1Dp_in_ASCII;
 800ab8a:	f240 1301 	movw	r3, #257	; 0x101
 800ab8e:	806b      	strh	r3, [r5, #2]
                break;
 800ab90:	e76d      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_2Dp_in_ASCII;
 800ab92:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ab96:	806b      	strh	r3, [r5, #2]
                break;
 800ab98:	e769      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_0Dp_in_ASCII;
 800ab9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab9e:	806b      	strh	r3, [r5, #2]
                break;
 800aba0:	e765      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_9Dp_in_ASCII;
 800aba2:	f240 1309 	movw	r3, #265	; 0x109
 800aba6:	806b      	strh	r3, [r5, #2]
                break;
 800aba8:	e761      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_3Dp_in_ASCII;
 800abaa:	f240 1303 	movw	r3, #259	; 0x103
 800abae:	806b      	strh	r3, [r5, #2]
                break;
 800abb0:	e75d      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
 800abb2:	bf00      	nop
 800abb4:	42c80000 	.word	0x42c80000
 800abb8:	c1200000 	.word	0xc1200000
 800abbc:	41200000 	.word	0x41200000
 800abc0:	200004bc 	.word	0x200004bc
                dst[1] = Number_4Dp_in_ASCII;
 800abc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 800abc8:	806b      	strh	r3, [r5, #2]
                break;
 800abca:	e750      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_5Dp_in_ASCII;
 800abcc:	f240 1305 	movw	r3, #261	; 0x105
 800abd0:	806b      	strh	r3, [r5, #2]
                break;
 800abd2:	e74c      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_6Dp_in_ASCII;
 800abd4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800abd8:	806b      	strh	r3, [r5, #2]
                break;
 800abda:	e748      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
                dst[1] = Number_7Dp_in_ASCII;
 800abdc:	f240 1307 	movw	r3, #263	; 0x107
 800abe0:	806b      	strh	r3, [r5, #2]
                break;
 800abe2:	e744      	b.n	800aa6e <convert_number_to_ASCII.constprop.1.isra.0+0x106>
 800abe4:	0000      	movs	r0, r0
	...

0800abe8 <update_current_cold_water_temperature>:
    /* Return the PWM Compare value required to set the requested PWM Duty Cycle. */
    return (desired_duty_cycle*max_compare_value)/100;
}

static void update_current_cold_water_temperature(void)
{
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800abec:	2201      	movs	r2, #1
    sConfig.Channel = adc_channel;
 800abee:	2400      	movs	r4, #0
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800abf0:	2307      	movs	r3, #7
{
 800abf2:	b084      	sub	sp, #16
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800abf4:	482c      	ldr	r0, [pc, #176]	; (800aca8 <update_current_cold_water_temperature+0xc0>)
 800abf6:	a901      	add	r1, sp, #4
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800abf8:	e9cd 4201 	strd	r4, r2, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800abfc:	9303      	str	r3, [sp, #12]
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800abfe:	f001 f9c9 	bl	800bf94 <HAL_ADC_ConfigChannel>
    if (ret != HAL_OK)
 800ac02:	b1d0      	cbz	r0, 800ac3a <update_current_cold_water_temperature+0x52>
 800ac04:	4d29      	ldr	r5, [pc, #164]	; (800acac <update_current_cold_water_temperature+0xc4>)
 800ac06:	4c2a      	ldr	r4, [pc, #168]	; (800acb0 <update_current_cold_water_temperature+0xc8>)
                dst[0] = Number_1_in_ASCII;
 800ac08:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800acb4 <update_current_cold_water_temperature+0xcc>
	{
		while (1)
		{
			convert_number_to_ASCII(MTKATR001_COLD_WATER_TEMP_ADC_ERR, ascii_error_code);
			ascii_error_code[3] = 0;
			display_output[0] = 'E';
 800ac0c:	4f2a      	ldr	r7, [pc, #168]	; (800acb8 <update_current_cold_water_temperature+0xd0>)
 800ac0e:	4e2b      	ldr	r6, [pc, #172]	; (800acbc <update_current_cold_water_temperature+0xd4>)
                dst[0] = Number_1_in_ASCII;
 800ac10:	2330      	movs	r3, #48	; 0x30
			display_output[0] = 'E';
 800ac12:	e9c4 7600 	strd	r7, r6, [r4]
			display_output[1] = 'r';
			display_output[2] = 'r';
			display_output[3] = '=';
			set_5641as_display_output(display_output);
 800ac16:	4826      	ldr	r0, [pc, #152]	; (800acb0 <update_current_cold_water_temperature+0xc8>)
                dst[0] = Number_1_in_ASCII;
 800ac18:	606b      	str	r3, [r5, #4]
 800ac1a:	f8c5 8000 	str.w	r8, [r5]
			set_5641as_display_output(display_output);
 800ac1e:	f7fe fb1f 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800ac22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac26:	f000 ffd3 	bl	800bbd0 <HAL_Delay>
			set_5641as_display_output(ascii_error_code);
 800ac2a:	4820      	ldr	r0, [pc, #128]	; (800acac <update_current_cold_water_temperature+0xc4>)
 800ac2c:	f7fe fb18 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800ac30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac34:	f000 ffcc 	bl	800bbd0 <HAL_Delay>
		while (1)
 800ac38:	e7ea      	b.n	800ac10 <update_current_cold_water_temperature+0x28>
    ret = HAL_ADC_Start(hadc);
 800ac3a:	481b      	ldr	r0, [pc, #108]	; (800aca8 <update_current_cold_water_temperature+0xc0>)
 800ac3c:	f001 fa88 	bl	800c150 <HAL_ADC_Start>
    if (ret != HAL_OK)
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d1df      	bne.n	800ac04 <update_current_cold_water_temperature+0x1c>
    ret = HAL_ADC_PollForConversion(hadc, ADC_POLL_TIMEOUT); // Polling a single conversion from the selected ADC and Channel.
 800ac44:	2164      	movs	r1, #100	; 0x64
 800ac46:	4818      	ldr	r0, [pc, #96]	; (800aca8 <update_current_cold_water_temperature+0xc0>)
 800ac48:	f001 f8d2 	bl	800bdf0 <HAL_ADC_PollForConversion>
    if (ret != HAL_OK)
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d1d9      	bne.n	800ac04 <update_current_cold_water_temperature+0x1c>
    *dst = HAL_ADC_GetValue(hadc); // Retrieve the polled value from the selected ADC Channel.
 800ac50:	4815      	ldr	r0, [pc, #84]	; (800aca8 <update_current_cold_water_temperature+0xc0>)
 800ac52:	f001 f99b 	bl	800bf8c <HAL_ADC_GetValue>
 800ac56:	f7fd ffd7 	bl	8008c08 <__aeabi_ui2f>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4c18      	ldr	r4, [pc, #96]	; (800acc0 <update_current_cold_water_temperature+0xd8>)
    return HAL_ADC_Stop(hadc);
 800ac5e:	4812      	ldr	r0, [pc, #72]	; (800aca8 <update_current_cold_water_temperature+0xc0>)
    *dst = HAL_ADC_GetValue(hadc); // Retrieve the polled value from the selected ADC Channel.
 800ac60:	6023      	str	r3, [r4, #0]
    return HAL_ADC_Stop(hadc);
 800ac62:	f001 f887 	bl	800bd74 <HAL_ADC_Stop>
	if (ret != HAL_OK)
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d1cc      	bne.n	800ac04 <update_current_cold_water_temperature+0x1c>
		}
	}
	current_cold_water_temperature = ((current_cold_water_temperature)*(LM35_VOLTAGE_TO_CELSIUS_CONSTANT)*(MCU_POWER_SUPPLY_VOLTAGE))/(ADC_BITS_IN_DECIMAL_VALUE); // Converting the Polled value to the Temperature that it stands for.
 800ac6a:	6820      	ldr	r0, [r4, #0]
 800ac6c:	4915      	ldr	r1, [pc, #84]	; (800acc4 <update_current_cold_water_temperature+0xdc>)
 800ac6e:	f7fe f823 	bl	8008cb8 <__aeabi_fmul>
 800ac72:	f7fd fbd1 	bl	8008418 <__aeabi_f2d>
 800ac76:	a308      	add	r3, pc, #32	; (adr r3, 800ac98 <update_current_cold_water_temperature+0xb0>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f7fd fc24 	bl	80084c8 <__aeabi_dmul>
 800ac80:	a307      	add	r3, pc, #28	; (adr r3, 800aca0 <update_current_cold_water_temperature+0xb8>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7fd fd49 	bl	800871c <__aeabi_ddiv>
 800ac8a:	f7fd feb7 	bl	80089fc <__aeabi_d2f>
 800ac8e:	6020      	str	r0, [r4, #0]
}
 800ac90:	b004      	add	sp, #16
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	bf00      	nop
 800ac98:	66666666 	.word	0x66666666
 800ac9c:	400a6666 	.word	0x400a6666
 800aca0:	00000000 	.word	0x00000000
 800aca4:	40affe00 	.word	0x40affe00
 800aca8:	2000092c 	.word	0x2000092c
 800acac:	200004a8 	.word	0x200004a8
 800acb0:	200004bc 	.word	0x200004bc
 800acb4:	01010031 	.word	0x01010031
 800acb8:	00720045 	.word	0x00720045
 800acbc:	003d0072 	.word	0x003d0072
 800acc0:	200004b0 	.word	0x200004b0
 800acc4:	447a0000 	.word	0x447a0000

0800acc8 <update_current_hot_water_temperature>:
    sConfig.Channel = adc_channel;
 800acc8:	2301      	movs	r3, #1
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800acca:	2207      	movs	r2, #7

static void update_current_hot_water_temperature(void)
{
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	b084      	sub	sp, #16
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800acd2:	482d      	ldr	r0, [pc, #180]	; (800ad88 <update_current_hot_water_temperature+0xc0>)
 800acd4:	a901      	add	r1, sp, #4
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800acd6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800acda:	9203      	str	r2, [sp, #12]
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800acdc:	f001 f95a 	bl	800bf94 <HAL_ADC_ConfigChannel>
    if (ret != HAL_OK)
 800ace0:	b1d0      	cbz	r0, 800ad18 <update_current_hot_water_temperature+0x50>
 800ace2:	4d2a      	ldr	r5, [pc, #168]	; (800ad8c <update_current_hot_water_temperature+0xc4>)
 800ace4:	4c2a      	ldr	r4, [pc, #168]	; (800ad90 <update_current_hot_water_temperature+0xc8>)
                dst[0] = Number_1_in_ASCII;
 800ace6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ad94 <update_current_hot_water_temperature+0xcc>
	{
		while (1)
		{
			convert_number_to_ASCII(MTKATR001_HOT_WATER_TEMP_ADC_ERR, ascii_error_code);
			ascii_error_code[3] = 0;
			display_output[0] = 'E';
 800acea:	4f2b      	ldr	r7, [pc, #172]	; (800ad98 <update_current_hot_water_temperature+0xd0>)
 800acec:	4e2b      	ldr	r6, [pc, #172]	; (800ad9c <update_current_hot_water_temperature+0xd4>)
                dst[0] = Number_1_in_ASCII;
 800acee:	2330      	movs	r3, #48	; 0x30
			display_output[0] = 'E';
 800acf0:	e9c4 7600 	strd	r7, r6, [r4]
			display_output[1] = 'r';
			display_output[2] = 'r';
			display_output[3] = '=';
			set_5641as_display_output(display_output);
 800acf4:	4826      	ldr	r0, [pc, #152]	; (800ad90 <update_current_hot_water_temperature+0xc8>)
                dst[0] = Number_1_in_ASCII;
 800acf6:	606b      	str	r3, [r5, #4]
 800acf8:	f8c5 8000 	str.w	r8, [r5]
			set_5641as_display_output(display_output);
 800acfc:	f7fe fab0 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800ad00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad04:	f000 ff64 	bl	800bbd0 <HAL_Delay>
			set_5641as_display_output(ascii_error_code);
 800ad08:	4820      	ldr	r0, [pc, #128]	; (800ad8c <update_current_hot_water_temperature+0xc4>)
 800ad0a:	f7fe faa9 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800ad0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad12:	f000 ff5d 	bl	800bbd0 <HAL_Delay>
		while (1)
 800ad16:	e7ea      	b.n	800acee <update_current_hot_water_temperature+0x26>
    ret = HAL_ADC_Start(hadc);
 800ad18:	481b      	ldr	r0, [pc, #108]	; (800ad88 <update_current_hot_water_temperature+0xc0>)
 800ad1a:	f001 fa19 	bl	800c150 <HAL_ADC_Start>
    if (ret != HAL_OK)
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d1df      	bne.n	800ace2 <update_current_hot_water_temperature+0x1a>
    ret = HAL_ADC_PollForConversion(hadc, ADC_POLL_TIMEOUT); // Polling a single conversion from the selected ADC and Channel.
 800ad22:	2164      	movs	r1, #100	; 0x64
 800ad24:	4818      	ldr	r0, [pc, #96]	; (800ad88 <update_current_hot_water_temperature+0xc0>)
 800ad26:	f001 f863 	bl	800bdf0 <HAL_ADC_PollForConversion>
    if (ret != HAL_OK)
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1d9      	bne.n	800ace2 <update_current_hot_water_temperature+0x1a>
    *dst = HAL_ADC_GetValue(hadc); // Retrieve the polled value from the selected ADC Channel.
 800ad2e:	4816      	ldr	r0, [pc, #88]	; (800ad88 <update_current_hot_water_temperature+0xc0>)
 800ad30:	f001 f92c 	bl	800bf8c <HAL_ADC_GetValue>
 800ad34:	f7fd ff68 	bl	8008c08 <__aeabi_ui2f>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	4c19      	ldr	r4, [pc, #100]	; (800ada0 <update_current_hot_water_temperature+0xd8>)
    return HAL_ADC_Stop(hadc);
 800ad3c:	4812      	ldr	r0, [pc, #72]	; (800ad88 <update_current_hot_water_temperature+0xc0>)
    *dst = HAL_ADC_GetValue(hadc); // Retrieve the polled value from the selected ADC Channel.
 800ad3e:	6023      	str	r3, [r4, #0]
    return HAL_ADC_Stop(hadc);
 800ad40:	f001 f818 	bl	800bd74 <HAL_ADC_Stop>
	if (ret != HAL_OK)
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d1cc      	bne.n	800ace2 <update_current_hot_water_temperature+0x1a>
		}
	}
	current_hot_water_temperature = ((current_hot_water_temperature)*(LM35_VOLTAGE_TO_CELSIUS_CONSTANT)*(MCU_POWER_SUPPLY_VOLTAGE))/(ADC_BITS_IN_DECIMAL_VALUE); // Converting the Polled value to the Temperature that it stands for.
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	4916      	ldr	r1, [pc, #88]	; (800ada4 <update_current_hot_water_temperature+0xdc>)
 800ad4c:	f7fd ffb4 	bl	8008cb8 <__aeabi_fmul>
 800ad50:	f7fd fb62 	bl	8008418 <__aeabi_f2d>
 800ad54:	a308      	add	r3, pc, #32	; (adr r3, 800ad78 <update_current_hot_water_temperature+0xb0>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7fd fbb5 	bl	80084c8 <__aeabi_dmul>
 800ad5e:	a308      	add	r3, pc, #32	; (adr r3, 800ad80 <update_current_hot_water_temperature+0xb8>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f7fd fcda 	bl	800871c <__aeabi_ddiv>
 800ad68:	f7fd fe48 	bl	80089fc <__aeabi_d2f>
 800ad6c:	6020      	str	r0, [r4, #0]
}
 800ad6e:	b004      	add	sp, #16
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	f3af 8000 	nop.w
 800ad78:	66666666 	.word	0x66666666
 800ad7c:	400a6666 	.word	0x400a6666
 800ad80:	00000000 	.word	0x00000000
 800ad84:	40affe00 	.word	0x40affe00
 800ad88:	2000092c 	.word	0x2000092c
 800ad8c:	200004a8 	.word	0x200004a8
 800ad90:	200004bc 	.word	0x200004bc
 800ad94:	01020031 	.word	0x01020031
 800ad98:	00720045 	.word	0x00720045
 800ad9c:	003d0072 	.word	0x003d0072
 800ada0:	200004b4 	.word	0x200004b4
 800ada4:	447a0000 	.word	0x447a0000

0800ada8 <SystemClock_Config>:
{
 800ada8:	b530      	push	{r4, r5, lr}
 800adaa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800adac:	2220      	movs	r2, #32
 800adae:	2100      	movs	r1, #0
 800adb0:	a80c      	add	r0, sp, #48	; 0x30
 800adb2:	f003 f8ad 	bl	800df10 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adb6:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800adb8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adba:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800adbe:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adc0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800adc4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800adc8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800add0:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800add6:	f001 fd07 	bl	800c7e8 <HAL_RCC_OscConfig>
 800adda:	b108      	cbz	r0, 800ade0 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800addc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800adde:	e7fe      	b.n	800adde <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ade0:	4601      	mov	r1, r0
 800ade2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800ade4:	2301      	movs	r3, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800ade6:	2490      	movs	r4, #144	; 0x90
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800ade8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800adea:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800adee:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800adf2:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800adf4:	f001 fee8 	bl	800cbc8 <HAL_RCC_ClockConfig>
 800adf8:	b108      	cbz	r0, 800adfe <SystemClock_Config+0x56>
 800adfa:	b672      	cpsid	i
  while (1)
 800adfc:	e7fe      	b.n	800adfc <SystemClock_Config+0x54>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800adfe:	2202      	movs	r2, #2
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800ae00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ae04:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800ae06:	9201      	str	r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800ae08:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ae0a:	f001 ffbf 	bl	800cd8c <HAL_RCCEx_PeriphCLKConfig>
 800ae0e:	b108      	cbz	r0, 800ae14 <SystemClock_Config+0x6c>
 800ae10:	b672      	cpsid	i
  while (1)
 800ae12:	e7fe      	b.n	800ae12 <SystemClock_Config+0x6a>
}
 800ae14:	b015      	add	sp, #84	; 0x54
 800ae16:	bd30      	pop	{r4, r5, pc}

0800ae18 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae18:	2400      	movs	r4, #0
{
 800ae1a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800ae1e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 800ae20:	f000 feb2 	bl	800bb88 <HAL_Init>
  SystemClock_Config();
 800ae24:	f7ff ffc0 	bl	800ada8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae28:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800ae2c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae30:	4b91      	ldr	r3, [pc, #580]	; (800b078 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae32:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae34:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800ae36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae3a:	f042 0210 	orr.w	r2, r2, #16
 800ae3e:	619a      	str	r2, [r3, #24]
 800ae40:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800ae42:	488e      	ldr	r0, [pc, #568]	; (800b07c <main+0x264>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae44:	f002 0210 	and.w	r2, r2, #16
 800ae48:	9203      	str	r2, [sp, #12]
 800ae4a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae4c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae4e:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae50:	f042 0220 	orr.w	r2, r2, #32
 800ae54:	619a      	str	r2, [r3, #24]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	f002 0220 	and.w	r2, r2, #32
 800ae5c:	9204      	str	r2, [sp, #16]
 800ae5e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae60:	699a      	ldr	r2, [r3, #24]
 800ae62:	f042 0204 	orr.w	r2, r2, #4
 800ae66:	619a      	str	r2, [r3, #24]
 800ae68:	699a      	ldr	r2, [r3, #24]
 800ae6a:	f002 0204 	and.w	r2, r2, #4
 800ae6e:	9205      	str	r2, [sp, #20]
 800ae70:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	f042 0208 	orr.w	r2, r2, #8
 800ae78:	619a      	str	r2, [r3, #24]
 800ae7a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800ae7c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800ae86:	f001 fcab 	bl	800c7e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ae90:	487b      	ldr	r0, [pc, #492]	; (800b080 <main+0x268>)
 800ae92:	f001 fca5 	bl	800c7e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Hot_Water_Pump_GPIO_Output_Pin|Display_E_terminal_GPIO_Output_Pin
 800ae96:	4622      	mov	r2, r4
 800ae98:	f248 11e3 	movw	r1, #33251	; 0x81e3
 800ae9c:	4879      	ldr	r0, [pc, #484]	; (800b084 <main+0x26c>)
 800ae9e:	f001 fc9f 	bl	800c7e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin|Display_K4_terminal_GPIO_Output_Pin|Display_K1_terminal_GPIO_Output_Pin, GPIO_PIN_SET);
 800aea2:	4632      	mov	r2, r6
 800aea4:	f44f 41e4 	mov.w	r1, #29184	; 0x7200
 800aea8:	4876      	ldr	r0, [pc, #472]	; (800b084 <main+0x26c>)
 800aeaa:	f001 fc99 	bl	800c7e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IIATR_LED_GPIO_Output_Pin;
 800aeae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(IIATR_LED_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 800aeb2:	4872      	ldr	r0, [pc, #456]	; (800b07c <main+0x264>)
 800aeb4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = IIATR_LED_GPIO_Output_Pin;
 800aeb6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeb8:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aebc:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(IIATR_LED_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 800aebe:	f001 fb7b 	bl	800c5b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HM10_is_default_settings_GPIO_Input_Pin;
 800aec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(HM10_is_default_settings_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 800aec6:	486d      	ldr	r0, [pc, #436]	; (800b07c <main+0x264>)
 800aec8:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = HM10_is_default_settings_GPIO_Input_Pin;
 800aeca:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aecc:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(HM10_is_default_settings_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 800aed0:	f001 fb72 	bl	800c5b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Show_cold_fan_duty_cycle_GPIO_Input_Pin;
 800aed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(Show_cold_fan_duty_cycle_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 800aed8:	4868      	ldr	r0, [pc, #416]	; (800b07c <main+0x264>)
 800aeda:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = Show_cold_fan_duty_cycle_GPIO_Input_Pin;
 800aedc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aede:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(Show_cold_fan_duty_cycle_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 800aee2:	f001 fb69 	bl	800c5b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin;
 800aee6:	f44f 7396 	mov.w	r3, #300	; 0x12c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aeea:	4865      	ldr	r0, [pc, #404]	; (800b080 <main+0x268>)
 800aeec:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin;
 800aeee:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef0:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aef4:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aef6:	f001 fb5f 	bl	800c5b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin
 800aefa:	f24f 33e3 	movw	r3, #62435	; 0xf3e3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aefe:	4861      	ldr	r0, [pc, #388]	; (800b084 <main+0x26c>)
 800af00:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin
 800af02:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af04:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af08:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af0a:	f001 fb55 	bl	800c5b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Hot_Water_Shortcircuit_Indicator_GPIO_Input_Pin|Cold_Water_Shortcircuit_Indicator_GPIO_Input_Pin|Show_desired_internal_ambient_temperature_GPIO_Input_Pin|Show_current_firmware_version_GPIO_Input_Pin
 800af0e:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af12:	485b      	ldr	r0, [pc, #364]	; (800b080 <main+0x268>)
 800af14:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = Hot_Water_Shortcircuit_Indicator_GPIO_Input_Pin|Cold_Water_Shortcircuit_Indicator_GPIO_Input_Pin|Show_desired_internal_ambient_temperature_GPIO_Input_Pin|Show_current_firmware_version_GPIO_Input_Pin
 800af16:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800af18:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af1c:	f001 fb4c 	bl	800c5b8 <HAL_GPIO_Init>
  huart3.Init.Mode = UART_MODE_TX_RX;
 800af20:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 9600;
 800af22:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart3.Instance = USART3;
 800af26:	4858      	ldr	r0, [pc, #352]	; (800b088 <main+0x270>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 800af28:	6143      	str	r3, [r0, #20]
  huart3.Instance = USART3;
 800af2a:	4b58      	ldr	r3, [pc, #352]	; (800b08c <main+0x274>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800af2c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800af30:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.Parity = UART_PARITY_NONE;
 800af34:	6104      	str	r4, [r0, #16]
  huart3.Init.BaudRate = 9600;
 800af36:	6042      	str	r2, [r0, #4]
  huart3.Instance = USART3;
 800af38:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800af3a:	f002 fc29 	bl	800d790 <HAL_UART_Init>
 800af3e:	b108      	cbz	r0, 800af44 <main+0x12c>
 800af40:	b672      	cpsid	i
  while (1)
 800af42:	e7fe      	b.n	800af42 <main+0x12a>
  htim2.Instance = TIM2;
 800af44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 416-1;
 800af48:	f240 139f 	movw	r3, #415	; 0x19f
  htim2.Instance = TIM2;
 800af4c:	4c50      	ldr	r4, [pc, #320]	; (800b090 <main+0x278>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af4e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 800af52:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af56:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af5a:	9009      	str	r0, [sp, #36]	; 0x24
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af5c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af5e:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af60:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800af62:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800af64:	6022      	str	r2, [r4, #0]
  htim2.Init.Period = 416-1;
 800af66:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800af68:	f001 fffa 	bl	800cf60 <HAL_TIM_Base_Init>
 800af6c:	b108      	cbz	r0, 800af72 <main+0x15a>
 800af6e:	b672      	cpsid	i
  while (1)
 800af70:	e7fe      	b.n	800af70 <main+0x158>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af72:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800af76:	4620      	mov	r0, r4
 800af78:	a90d      	add	r1, sp, #52	; 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af7a:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800af7c:	f002 fa70 	bl	800d460 <HAL_TIM_ConfigClockSource>
 800af80:	4603      	mov	r3, r0
 800af82:	b108      	cbz	r0, 800af88 <main+0x170>
 800af84:	b672      	cpsid	i
  while (1)
 800af86:	e7fe      	b.n	800af86 <main+0x16e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800af88:	4620      	mov	r0, r4
 800af8a:	a909      	add	r1, sp, #36	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af8c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800af90:	f002 fbc8 	bl	800d724 <HAL_TIMEx_MasterConfigSynchronization>
 800af94:	b9e0      	cbnz	r0, 800afd0 <main+0x1b8>
  htim3.Init.Period = 1818-1;
 800af96:	f240 7219 	movw	r2, #1817	; 0x719
  htim3.Instance = TIM3;
 800af9a:	4d3e      	ldr	r5, [pc, #248]	; (800b094 <main+0x27c>)
 800af9c:	4b3e      	ldr	r3, [pc, #248]	; (800b098 <main+0x280>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af9e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800afa2:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800afa6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 800afaa:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 800afae:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afb2:	e9c5 0001 	strd	r0, r0, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afb6:	9007      	str	r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800afb8:	9013      	str	r0, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afba:	9008      	str	r0, [sp, #32]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afbc:	6128      	str	r0, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afbe:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800afc0:	4628      	mov	r0, r5
  htim3.Init.Period = 1818-1;
 800afc2:	60ea      	str	r2, [r5, #12]
  htim3.Instance = TIM3;
 800afc4:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800afc6:	f001 ffcb 	bl	800cf60 <HAL_TIM_Base_Init>
 800afca:	b118      	cbz	r0, 800afd4 <main+0x1bc>
 800afcc:	b672      	cpsid	i
  while (1)
 800afce:	e7fe      	b.n	800afce <main+0x1b6>
 800afd0:	b672      	cpsid	i
 800afd2:	e7fe      	b.n	800afd2 <main+0x1ba>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800afd4:	4628      	mov	r0, r5
 800afd6:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afd8:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800afda:	f002 fa41 	bl	800d460 <HAL_TIM_ConfigClockSource>
 800afde:	b108      	cbz	r0, 800afe4 <main+0x1cc>
 800afe0:	b672      	cpsid	i
  while (1)
 800afe2:	e7fe      	b.n	800afe2 <main+0x1ca>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800afe4:	4628      	mov	r0, r5
 800afe6:	f002 f871 	bl	800d0cc <HAL_TIM_PWM_Init>
 800afea:	4603      	mov	r3, r0
 800afec:	b108      	cbz	r0, 800aff2 <main+0x1da>
 800afee:	b672      	cpsid	i
  while (1)
 800aff0:	e7fe      	b.n	800aff0 <main+0x1d8>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800aff2:	4628      	mov	r0, r5
 800aff4:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aff6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800affa:	f002 fb93 	bl	800d724 <HAL_TIMEx_MasterConfigSynchronization>
 800affe:	4602      	mov	r2, r0
 800b000:	b108      	cbz	r0, 800b006 <main+0x1ee>
 800b002:	b672      	cpsid	i
  while (1)
 800b004:	e7fe      	b.n	800b004 <main+0x1ec>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b006:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b008:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b00c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b00e:	a90d      	add	r1, sp, #52	; 0x34
 800b010:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b012:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b014:	f002 f924 	bl	800d260 <HAL_TIM_PWM_ConfigChannel>
 800b018:	b108      	cbz	r0, 800b01e <main+0x206>
 800b01a:	b672      	cpsid	i
  while (1)
 800b01c:	e7fe      	b.n	800b01c <main+0x204>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b01e:	2204      	movs	r2, #4
 800b020:	4628      	mov	r0, r5
 800b022:	a90d      	add	r1, sp, #52	; 0x34
 800b024:	f002 f91c 	bl	800d260 <HAL_TIM_PWM_ConfigChannel>
 800b028:	b108      	cbz	r0, 800b02e <main+0x216>
 800b02a:	b672      	cpsid	i
  while (1)
 800b02c:	e7fe      	b.n	800b02c <main+0x214>
  HAL_TIM_MspPostInit(&htim3);
 800b02e:	4819      	ldr	r0, [pc, #100]	; (800b094 <main+0x27c>)
 800b030:	f000 fccc 	bl	800b9cc <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 800b034:	4c19      	ldr	r4, [pc, #100]	; (800b09c <main+0x284>)
 800b036:	4a1a      	ldr	r2, [pc, #104]	; (800b0a0 <main+0x288>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800b038:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 800b03a:	6022      	str	r2, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 800b03c:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b03e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b042:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 800b044:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800b048:	930f      	str	r3, [sp, #60]	; 0x3c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b04a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b04c:	7323      	strb	r3, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b04e:	7523      	strb	r3, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b050:	6063      	str	r3, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b052:	61e2      	str	r2, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800b054:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b056:	f000 fdcd 	bl	800bbf4 <HAL_ADC_Init>
 800b05a:	4603      	mov	r3, r0
 800b05c:	b108      	cbz	r0, 800b062 <main+0x24a>
 800b05e:	b672      	cpsid	i
  while (1)
 800b060:	e7fe      	b.n	800b060 <main+0x248>
  sConfig.Channel = ADC_CHANNEL_0;
 800b062:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800b064:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b066:	4620      	mov	r0, r4
 800b068:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b06a:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800b06c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b06e:	f000 ff91 	bl	800bf94 <HAL_ADC_ConfigChannel>
 800b072:	b1b8      	cbz	r0, 800b0a4 <main+0x28c>
 800b074:	b672      	cpsid	i
  while (1)
 800b076:	e7fe      	b.n	800b076 <main+0x25e>
 800b078:	40021000 	.word	0x40021000
 800b07c:	40011000 	.word	0x40011000
 800b080:	40010800 	.word	0x40010800
 800b084:	40010c00 	.word	0x40010c00
 800b088:	200009ec 	.word	0x200009ec
 800b08c:	40004800 	.word	0x40004800
 800b090:	2000095c 	.word	0x2000095c
 800b094:	200009a4 	.word	0x200009a4
 800b098:	40000400 	.word	0x40000400
 800b09c:	2000092c 	.word	0x2000092c
 800b0a0:	40012400 	.word	0x40012400
    display_peripherals.A.GPIO_Port = GPIOB;
 800b0a4:	49b9      	ldr	r1, [pc, #740]	; (800b38c <main+0x574>)
    display_peripherals.A.GPIO_Pin = GPIO_PIN_0;
 800b0a6:	4bba      	ldr	r3, [pc, #744]	; (800b390 <main+0x578>)
 800b0a8:	4aba      	ldr	r2, [pc, #744]	; (800b394 <main+0x57c>)
    display_peripherals.Dp.GPIO_Port = GPIOB;
 800b0aa:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 800b398 <main+0x580>
    display_peripherals.A.GPIO_Pin = GPIO_PIN_0;
 800b0ae:	e9c1 3200 	strd	r3, r2, [r1]
    display_peripherals.B.GPIO_Port = GPIOB;
 800b0b2:	4aba      	ldr	r2, [pc, #744]	; (800b39c <main+0x584>)
    display_peripherals.E.GPIO_Port = GPIOB;
 800b0b4:	618b      	str	r3, [r1, #24]
    display_peripherals.B.GPIO_Port = GPIOB;
 800b0b6:	608a      	str	r2, [r1, #8]
    display_peripherals.C.GPIO_Port = GPIOA;
 800b0b8:	4ab9      	ldr	r2, [pc, #740]	; (800b3a0 <main+0x588>)
    display_peripherals.G.GPIO_Port = GPIOB;
 800b0ba:	624b      	str	r3, [r1, #36]	; 0x24
    display_peripherals.C.GPIO_Port = GPIOA;
 800b0bc:	60ca      	str	r2, [r1, #12]
    display_peripherals.C.GPIO_Pin = GPIO_PIN_2;
 800b0be:	4ab9      	ldr	r2, [pc, #740]	; (800b3a4 <main+0x58c>)
    display_peripherals.K1.GPIO_Port = GPIOB;
 800b0c0:	630b      	str	r3, [r1, #48]	; 0x30
    display_peripherals.C.GPIO_Pin = GPIO_PIN_2;
 800b0c2:	610a      	str	r2, [r1, #16]
    display_peripherals.D.GPIO_Port = GPIOA;
 800b0c4:	4ab8      	ldr	r2, [pc, #736]	; (800b3a8 <main+0x590>)
    display_peripherals.K3.GPIO_Port = GPIOB;
 800b0c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    display_peripherals.D.GPIO_Port = GPIOA;
 800b0c8:	614a      	str	r2, [r1, #20]
    display_peripherals.E.GPIO_Pin = GPIO_PIN_5;
 800b0ca:	4ab8      	ldr	r2, [pc, #736]	; (800b3ac <main+0x594>)
    display_peripherals.K3.GPIO_Pin = GPIO_PIN_13;
 800b0cc:	4bb8      	ldr	r3, [pc, #736]	; (800b3b0 <main+0x598>)
    display_peripherals.E.GPIO_Pin = GPIO_PIN_5;
 800b0ce:	61ca      	str	r2, [r1, #28]
    display_peripherals.F.GPIO_Port = GPIOB;
 800b0d0:	4ab8      	ldr	r2, [pc, #736]	; (800b3b4 <main+0x59c>)
    display_peripherals.K3.GPIO_Pin = GPIO_PIN_13;
 800b0d2:	640b      	str	r3, [r1, #64]	; 0x40
    display_peripherals.F.GPIO_Port = GPIOB;
 800b0d4:	620a      	str	r2, [r1, #32]
    display_peripherals.Dp.GPIO_Port = GPIOB;
 800b0d6:	4ab8      	ldr	r2, [pc, #736]	; (800b3b8 <main+0x5a0>)
    display_peripherals.K4.GPIO_Port = GPIOB;
 800b0d8:	4bb8      	ldr	r3, [pc, #736]	; (800b3bc <main+0x5a4>)
    display_peripherals.Dp.GPIO_Port = GPIOB;
 800b0da:	e9c1 e20a 	strd	lr, r2, [r1, #40]	; 0x28
    display_peripherals.K2.GPIO_Port = GPIOB;
 800b0de:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 800b3c0 <main+0x5a8>
 800b0e2:	4ab8      	ldr	r2, [pc, #736]	; (800b3c4 <main+0x5ac>)
    display_peripherals.K4.GPIO_Port = GPIOB;
 800b0e4:	644b      	str	r3, [r1, #68]	; 0x44
    display_peripherals.K2.GPIO_Port = GPIOB;
 800b0e6:	e9c1 820d 	strd	r8, r2, [r1, #52]	; 0x34
    init_5641as_display_module(&htim2, &display_peripherals, on_time_steps, off_time_steps);
 800b0ea:	2304      	movs	r3, #4
 800b0ec:	2206      	movs	r2, #6
 800b0ee:	48b6      	ldr	r0, [pc, #728]	; (800b3c8 <main+0x5b0>)
 800b0f0:	f7fe f896 	bl	8009220 <init_5641as_display_module>
    display_output[0] = Number_8Dp_in_ASCII;
 800b0f4:	4cb5      	ldr	r4, [pc, #724]	; (800b3cc <main+0x5b4>)
 800b0f6:	4bb6      	ldr	r3, [pc, #728]	; (800b3d0 <main+0x5b8>)
    set_5641as_display_output(display_output);
 800b0f8:	4620      	mov	r0, r4
    display_output[0] = Number_8Dp_in_ASCII;
 800b0fa:	e9c4 3300 	strd	r3, r3, [r4]
    set_5641as_display_output(display_output);
 800b0fe:	f7fe f8af 	bl	8009260 <set_5641as_display_output>
 800b102:	2603      	movs	r6, #3
        end_tick = HAL_GetTick() + 500;
 800b104:	f000 fd5e 	bl	800bbc4 <HAL_GetTick>
        current_tick = 0;
 800b108:	2300      	movs	r3, #0
        end_tick = HAL_GetTick() + 500;
 800b10a:	f500 77fa 	add.w	r7, r0, #500	; 0x1f4
        while (current_tick < end_tick)
 800b10e:	e002      	b.n	800b116 <main+0x2fe>
            current_tick = HAL_GetTick();
 800b110:	f000 fd58 	bl	800bbc4 <HAL_GetTick>
 800b114:	4603      	mov	r3, r0
        while (current_tick < end_tick)
 800b116:	429f      	cmp	r7, r3
 800b118:	d8fa      	bhi.n	800b110 <main+0x2f8>
        ret = firmware_update_configurations_init();
 800b11a:	f7fe ff0d 	bl	8009f38 <firmware_update_configurations_init>
        if (ret == FIRM_UPDT_CONF_EC_OK)
 800b11e:	b1e8      	cbz	r0, 800b15c <main+0x344>
    while(attempts < 3);
 800b120:	3e01      	subs	r6, #1
 800b122:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800b126:	d1ed      	bne.n	800b104 <main+0x2ec>
 800b128:	4daa      	ldr	r5, [pc, #680]	; (800b3d4 <main+0x5bc>)
                dst[0] = Command_NULL_in_ASCII;
 800b12a:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800b3d8 <main+0x5c0>
		display_output[0] = 'E';
 800b12e:	4fab      	ldr	r7, [pc, #684]	; (800b3dc <main+0x5c4>)
 800b130:	4eab      	ldr	r6, [pc, #684]	; (800b3e0 <main+0x5c8>)
                dst[0] = Command_NULL_in_ASCII;
 800b132:	2330      	movs	r3, #48	; 0x30
		display_output[0] = 'E';
 800b134:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Command_NULL_in_ASCII;
 800b138:	606b      	str	r3, [r5, #4]
 800b13a:	f8c5 8000 	str.w	r8, [r5]
        set_5641as_display_output(display_output);
 800b13e:	48a3      	ldr	r0, [pc, #652]	; (800b3cc <main+0x5b4>)
 800b140:	f7fe f88e 	bl	8009260 <set_5641as_display_output>
        HAL_Delay(2000);
 800b144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b148:	f000 fd42 	bl	800bbd0 <HAL_Delay>
        set_5641as_display_output(ascii_error_code);
 800b14c:	48a1      	ldr	r0, [pc, #644]	; (800b3d4 <main+0x5bc>)
 800b14e:	f7fe f887 	bl	8009260 <set_5641as_display_output>
        HAL_Delay(2000);
 800b152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b156:	f000 fd3b 	bl	800bbd0 <HAL_Delay>
    while (1)
 800b15a:	e7ea      	b.n	800b132 <main+0x31a>
            firmware_update_configurations_read(&fw_config);
 800b15c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800b3e4 <main+0x5cc>
    GPIO_is_hm10_default_settings.GPIO_Port = HM10_is_default_settings_GPIO_Input_GPIO_Port;
 800b160:	4fa1      	ldr	r7, [pc, #644]	; (800b3e8 <main+0x5d0>)
            firmware_update_configurations_read(&fw_config);
 800b162:	4640      	mov	r0, r8
 800b164:	f7fe ff52 	bl	800a00c <firmware_update_configurations_read>
    GPIO_is_hm10_default_settings.GPIO_Pin = HM10_is_default_settings_GPIO_Input_Pin;
 800b168:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    GPIO_is_hm10_default_settings.GPIO_Port = HM10_is_default_settings_GPIO_Input_GPIO_Port;
 800b16c:	4b9f      	ldr	r3, [pc, #636]	; (800b3ec <main+0x5d4>)
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings, &etx_ota_custom_data);
 800b16e:	2001      	movs	r0, #1
    GPIO_is_hm10_default_settings.GPIO_Pin = HM10_is_default_settings_GPIO_Input_Pin;
 800b170:	809a      	strh	r2, [r3, #4]
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings, &etx_ota_custom_data);
 800b172:	4a9f      	ldr	r2, [pc, #636]	; (800b3f0 <main+0x5d8>)
 800b174:	499f      	ldr	r1, [pc, #636]	; (800b3f4 <main+0x5dc>)
 800b176:	9200      	str	r2, [sp, #0]
 800b178:	4642      	mov	r2, r8
    GPIO_is_hm10_default_settings.GPIO_Port = HM10_is_default_settings_GPIO_Input_GPIO_Port;
 800b17a:	601f      	str	r7, [r3, #0]
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings, &etx_ota_custom_data);
 800b17c:	f7fe fc06 	bl	800998c <init_firmware_update_module>
    if (ret != ETX_OTA_EC_OK)
 800b180:	4606      	mov	r6, r0
 800b182:	b1d0      	cbz	r0, 800b1ba <main+0x3a2>
 800b184:	4d93      	ldr	r5, [pc, #588]	; (800b3d4 <main+0x5bc>)
			display_output[0] = 'E';
 800b186:	f8df 8254 	ldr.w	r8, [pc, #596]	; 800b3dc <main+0x5c4>
 800b18a:	4f95      	ldr	r7, [pc, #596]	; (800b3e0 <main+0x5c8>)
            set_5641as_display_output(display_output);
 800b18c:	4e8f      	ldr	r6, [pc, #572]	; (800b3cc <main+0x5b4>)
                dst[0] = Command_NULL_in_ASCII;
 800b18e:	f04f 7c83 	mov.w	ip, #17170432	; 0x1060000
 800b192:	2330      	movs	r3, #48	; 0x30
            set_5641as_display_output(display_output);
 800b194:	4630      	mov	r0, r6
                dst[0] = Command_NULL_in_ASCII;
 800b196:	e9c5 c300 	strd	ip, r3, [r5]
			display_output[0] = 'E';
 800b19a:	e9c4 8700 	strd	r8, r7, [r4]
            set_5641as_display_output(display_output);
 800b19e:	f7fe f85f 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b1a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1a6:	f000 fd13 	bl	800bbd0 <HAL_Delay>
            set_5641as_display_output(ascii_error_code);
 800b1aa:	488a      	ldr	r0, [pc, #552]	; (800b3d4 <main+0x5bc>)
 800b1ac:	f7fe f858 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b1b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1b4:	f000 fd0c 	bl	800bbd0 <HAL_Delay>
        while (1)
 800b1b8:	e7e9      	b.n	800b18e <main+0x376>
    if ((fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 800b1ba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b1be:	1e4b      	subs	r3, r1, #1
 800b1c0:	3303      	adds	r3, #3
 800b1c2:	d91a      	bls.n	800b1fa <main+0x3e2>
 800b1c4:	4d83      	ldr	r5, [pc, #524]	; (800b3d4 <main+0x5bc>)
			display_output[0] = 'E';
 800b1c6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800b3dc <main+0x5c4>
 800b1ca:	4f85      	ldr	r7, [pc, #532]	; (800b3e0 <main+0x5c8>)
            set_5641as_display_output(display_output);
 800b1cc:	4e7f      	ldr	r6, [pc, #508]	; (800b3cc <main+0x5b4>)
                dst[0] = Command_NULL_in_ASCII;
 800b1ce:	2330      	movs	r3, #48	; 0x30
 800b1d0:	f04f 7084 	mov.w	r0, #17301504	; 0x1080000
			display_output[0] = 'E';
 800b1d4:	e9c4 8700 	strd	r8, r7, [r4]
                dst[0] = Command_NULL_in_ASCII;
 800b1d8:	e9c5 0300 	strd	r0, r3, [r5]
            set_5641as_display_output(display_output);
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f7fe f83f 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b1e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1e6:	f000 fcf3 	bl	800bbd0 <HAL_Delay>
            set_5641as_display_output(ascii_error_code);
 800b1ea:	487a      	ldr	r0, [pc, #488]	; (800b3d4 <main+0x5bc>)
 800b1ec:	f7fe f838 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b1f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1f4:	f000 fcec 	bl	800bbd0 <HAL_Delay>
        while (1)
 800b1f8:	e7e9      	b.n	800b1ce <main+0x3b6>
    if (fw_config.App_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
 800b1fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	d021      	beq.n	800b246 <main+0x42e>
	uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 800b202:	487d      	ldr	r0, [pc, #500]	; (800b3f8 <main+0x5e0>)
 800b204:	f7fe fe4c 	bl	8009ea0 <crc32_mpeg2>
    if (cal_crc != fw_config.App_fw_rec_crc)
 800b208:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b20c:	4298      	cmp	r0, r3
 800b20e:	d035      	beq.n	800b27c <main+0x464>
 800b210:	4d70      	ldr	r5, [pc, #448]	; (800b3d4 <main+0x5bc>)
			display_output[0] = 'E';
 800b212:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800b3dc <main+0x5c4>
 800b216:	4f72      	ldr	r7, [pc, #456]	; (800b3e0 <main+0x5c8>)
            set_5641as_display_output(display_output);
 800b218:	4e6c      	ldr	r6, [pc, #432]	; (800b3cc <main+0x5b4>)
                dst[0] = Command_NULL_in_ASCII;
 800b21a:	f04f 7284 	mov.w	r2, #17301504	; 0x1080000
 800b21e:	2330      	movs	r3, #48	; 0x30
            set_5641as_display_output(display_output);
 800b220:	4630      	mov	r0, r6
                dst[0] = Command_NULL_in_ASCII;
 800b222:	e9c5 2300 	strd	r2, r3, [r5]
			display_output[0] = 'E';
 800b226:	e9c4 8700 	strd	r8, r7, [r4]
            set_5641as_display_output(display_output);
 800b22a:	f7fe f819 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b22e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b232:	f000 fccd 	bl	800bbd0 <HAL_Delay>
            set_5641as_display_output(ascii_error_code);
 800b236:	4867      	ldr	r0, [pc, #412]	; (800b3d4 <main+0x5bc>)
 800b238:	f7fe f812 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b23c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b240:	f000 fcc6 	bl	800bbd0 <HAL_Delay>
        while (1)
 800b244:	e7e9      	b.n	800b21a <main+0x402>
 800b246:	4d63      	ldr	r5, [pc, #396]	; (800b3d4 <main+0x5bc>)
			display_output[0] = 'E';
 800b248:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800b3dc <main+0x5c4>
 800b24c:	4f64      	ldr	r7, [pc, #400]	; (800b3e0 <main+0x5c8>)
            set_5641as_display_output(display_output);
 800b24e:	4e5f      	ldr	r6, [pc, #380]	; (800b3cc <main+0x5b4>)
                dst[0] = Command_NULL_in_ASCII;
 800b250:	f04f 7184 	mov.w	r1, #17301504	; 0x1080000
 800b254:	2330      	movs	r3, #48	; 0x30
            set_5641as_display_output(display_output);
 800b256:	4630      	mov	r0, r6
                dst[0] = Command_NULL_in_ASCII;
 800b258:	e9c5 1300 	strd	r1, r3, [r5]
			display_output[0] = 'E';
 800b25c:	e9c4 8700 	strd	r8, r7, [r4]
            set_5641as_display_output(display_output);
 800b260:	f7fd fffe 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b264:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b268:	f000 fcb2 	bl	800bbd0 <HAL_Delay>
            set_5641as_display_output(ascii_error_code);
 800b26c:	4859      	ldr	r0, [pc, #356]	; (800b3d4 <main+0x5bc>)
 800b26e:	f7fd fff7 	bl	8009260 <set_5641as_display_output>
            HAL_Delay(2000);
 800b272:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b276:	f000 fcab 	bl	800bbd0 <HAL_Delay>
        while (1)
 800b27a:	e7e9      	b.n	800b250 <main+0x438>
    HAL_TIM_PWM_Start(&htim3, COLD_FAN_TIMER_CHANNEL); // Starting the PWM of Timer3-CH1 for the Cold Fan.
 800b27c:	4631      	mov	r1, r6
 800b27e:	485f      	ldr	r0, [pc, #380]	; (800b3fc <main+0x5e4>)
 800b280:	f001 ff92 	bl	800d1a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, HOT_FAN_TIMER_CHANNEL); // Starting the PWM of Timer3-CH2 for the Hot Fan.
 800b284:	2104      	movs	r1, #4
 800b286:	485d      	ldr	r0, [pc, #372]	; (800b3fc <main+0x5e4>)
 800b288:	f001 ff8e 	bl	800d1a8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, COLD_FAN_TIMER_CHANNEL, 0); // Setting the High State Duration (i.e., Pulse Width) of the Cold Fan to zero.
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	f8df a170 	ldr.w	sl, [pc, #368]	; 800b400 <main+0x5e8>
 800b292:	635e      	str	r6, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, HOT_FAN_TIMER_CHANNEL, 0); // Setting the High State Duration (i.e., Pulse Width) of the Hot Fan to zero.
 800b294:	639e      	str	r6, [r3, #56]	; 0x38
      if (HAL_GPIO_ReadPin(Hot_Water_Shortcircuit_Indicator_GPIO_Input_GPIO_Port, Hot_Water_Shortcircuit_Indicator_GPIO_Input_Pin) == GPIO_PIN_RESET)
 800b296:	4e42      	ldr	r6, [pc, #264]	; (800b3a0 <main+0x588>)
 800b298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b29c:	4630      	mov	r0, r6
 800b29e:	f001 fa99 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b2a2:	b378      	cbz	r0, 800b304 <main+0x4ec>
      else if (HAL_GPIO_ReadPin(Cold_Water_Shortcircuit_Indicator_GPIO_Input_GPIO_Port, Cold_Water_Shortcircuit_Indicator_GPIO_Input_Pin) == GPIO_PIN_RESET)
 800b2a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f001 fa93 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f000 8161 	beq.w	800b576 <main+0x75e>
      else if (HAL_GPIO_ReadPin(Show_desired_internal_ambient_temperature_GPIO_Input_GPIO_Port, Show_desired_internal_ambient_temperature_GPIO_Input_Pin) == GPIO_PIN_SET)
 800b2b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f001 fa8b 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b2be:	2801      	cmp	r0, #1
 800b2c0:	f000 8153 	beq.w	800b56a <main+0x752>
      else if (HAL_GPIO_ReadPin(Show_current_firmware_version_GPIO_Input_GPIO_Port, Show_current_firmware_version_GPIO_Input_Pin) == GPIO_PIN_SET)
 800b2c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f001 fa83 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b2ce:	2801      	cmp	r0, #1
 800b2d0:	d042      	beq.n	800b358 <main+0x540>
      else if (HAL_GPIO_ReadPin(Show_hot_fan_duty_cycle_GPIO_Input_GPIO_Port, Show_hot_fan_duty_cycle_GPIO_Input_Pin) == GPIO_PIN_SET)
 800b2d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f001 fa7c 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b2dc:	2801      	cmp	r0, #1
 800b2de:	d12b      	bne.n	800b338 <main+0x520>
          if (desired_hot_fan_duty_cycle == 100)
 800b2e0:	4b48      	ldr	r3, [pc, #288]	; (800b404 <main+0x5ec>)
 800b2e2:	7818      	ldrb	r0, [r3, #0]
 800b2e4:	2864      	cmp	r0, #100	; 0x64
 800b2e6:	d032      	beq.n	800b34e <main+0x536>
              convert_number_to_ASCII((float) desired_hot_fan_duty_cycle, display_output);
 800b2e8:	f7fd fc8e 	bl	8008c08 <__aeabi_ui2f>
 800b2ec:	f7ff fb3c 	bl	800a968 <convert_number_to_ASCII.constprop.1.isra.0>
              display_output[3] = 'D';
 800b2f0:	2344      	movs	r3, #68	; 0x44
                  display_output[3] = 'C';
 800b2f2:	80e3      	strh	r3, [r4, #6]
                  set_5641as_display_output(display_output);
 800b2f4:	4835      	ldr	r0, [pc, #212]	; (800b3cc <main+0x5b4>)
 800b2f6:	f7fd ffb3 	bl	8009260 <set_5641as_display_output>
                  HAL_Delay(1000);
 800b2fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2fe:	f000 fc67 	bl	800bbd0 <HAL_Delay>
 800b302:	e7c9      	b.n	800b298 <main+0x480>
 800b304:	4d33      	ldr	r5, [pc, #204]	; (800b3d4 <main+0x5bc>)
                dst[0] = Command_NULL_in_ASCII;
 800b306:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800b408 <main+0x5f0>
			  display_output[0] = 'E';
 800b30a:	4f34      	ldr	r7, [pc, #208]	; (800b3dc <main+0x5c4>)
 800b30c:	4e34      	ldr	r6, [pc, #208]	; (800b3e0 <main+0x5c8>)
                dst[0] = Command_NULL_in_ASCII;
 800b30e:	2330      	movs	r3, #48	; 0x30
			  display_output[0] = 'E';
 800b310:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Command_NULL_in_ASCII;
 800b314:	606b      	str	r3, [r5, #4]
 800b316:	f8c5 8000 	str.w	r8, [r5]
			  set_5641as_display_output(display_output);
 800b31a:	482c      	ldr	r0, [pc, #176]	; (800b3cc <main+0x5b4>)
 800b31c:	f7fd ffa0 	bl	8009260 <set_5641as_display_output>
			  HAL_Delay(2000);
 800b320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b324:	f000 fc54 	bl	800bbd0 <HAL_Delay>
			  set_5641as_display_output(ascii_error_code);
 800b328:	482a      	ldr	r0, [pc, #168]	; (800b3d4 <main+0x5bc>)
 800b32a:	f7fd ff99 	bl	8009260 <set_5641as_display_output>
			  HAL_Delay(2000);
 800b32e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b332:	f000 fc4d 	bl	800bbd0 <HAL_Delay>
		  while (1)
 800b336:	e7ea      	b.n	800b30e <main+0x4f6>
      else if (HAL_GPIO_ReadPin(Show_cold_fan_duty_cycle_GPIO_Input_GPIO_Port, Show_cold_fan_duty_cycle_GPIO_Input_Pin) == GPIO_PIN_SET)
 800b338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b33c:	4638      	mov	r0, r7
 800b33e:	f001 fa49 	bl	800c7d4 <HAL_GPIO_ReadPin>
 800b342:	2801      	cmp	r0, #1
 800b344:	d16c      	bne.n	800b420 <main+0x608>
          if (desired_cold_fan_duty_cycle == 100)
 800b346:	4b31      	ldr	r3, [pc, #196]	; (800b40c <main+0x5f4>)
 800b348:	7818      	ldrb	r0, [r3, #0]
 800b34a:	2864      	cmp	r0, #100	; 0x64
 800b34c:	d1cc      	bne.n	800b2e8 <main+0x4d0>
              display_output[2] = '0';
 800b34e:	2330      	movs	r3, #48	; 0x30
 800b350:	80a3      	strh	r3, [r4, #4]
              display_output[0] = '1';
 800b352:	4b2f      	ldr	r3, [pc, #188]	; (800b410 <main+0x5f8>)
 800b354:	6023      	str	r3, [r4, #0]
              display_output[3] = 'D';
 800b356:	e7cb      	b.n	800b2f0 <main+0x4d8>
                dst[0] = Command_NULL_in_ASCII;
 800b358:	f04f 0b30 	mov.w	fp, #48	; 0x30
          display_output[0] = 'A';
 800b35c:	4b2d      	ldr	r3, [pc, #180]	; (800b414 <main+0x5fc>)
 800b35e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800b418 <main+0x600>
          set_5641as_display_output(display_output);
 800b362:	481a      	ldr	r0, [pc, #104]	; (800b3cc <main+0x5b4>)
          display_output[0] = 'A';
 800b364:	e9c4 9300 	strd	r9, r3, [r4]
          set_5641as_display_output(display_output);
 800b368:	f7fd ff7a 	bl	8009260 <set_5641as_display_output>
          HAL_Delay(500);
 800b36c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b370:	f000 fc2e 	bl	800bbd0 <HAL_Delay>
                dst[0] = Command_NULL_in_ASCII;
 800b374:	4b29      	ldr	r3, [pc, #164]	; (800b41c <main+0x604>)
          set_5641as_display_output(display_output);
 800b376:	4815      	ldr	r0, [pc, #84]	; (800b3cc <main+0x5b4>)
                dst[0] = Command_NULL_in_ASCII;
 800b378:	e9c4 3b00 	strd	r3, fp, [r4]
          set_5641as_display_output(display_output);
 800b37c:	f7fd ff70 	bl	8009260 <set_5641as_display_output>
          HAL_Delay(500);
 800b380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b384:	f000 fc24 	bl	800bbd0 <HAL_Delay>
 800b388:	e786      	b.n	800b298 <main+0x480>
 800b38a:	bf00      	nop
 800b38c:	200004c4 	.word	0x200004c4
 800b390:	40010c00 	.word	0x40010c00
 800b394:	0c000001 	.word	0x0c000001
 800b398:	0c000080 	.word	0x0c000080
 800b39c:	00024001 	.word	0x00024001
 800b3a0:	40010800 	.word	0x40010800
 800b3a4:	08000004 	.word	0x08000004
 800b3a8:	00084001 	.word	0x00084001
 800b3ac:	0c000020 	.word	0x0c000020
 800b3b0:	0c002000 	.word	0x0c002000
 800b3b4:	00404001 	.word	0x00404001
 800b3b8:	01004001 	.word	0x01004001
 800b3bc:	40004001 	.word	0x40004001
 800b3c0:	0c000200 	.word	0x0c000200
 800b3c4:	10004001 	.word	0x10004001
 800b3c8:	2000095c 	.word	0x2000095c
 800b3cc:	200004bc 	.word	0x200004bc
 800b3d0:	01080108 	.word	0x01080108
 800b3d4:	200004a8 	.word	0x200004a8
 800b3d8:	01050000 	.word	0x01050000
 800b3dc:	00720045 	.word	0x00720045
 800b3e0:	003d0072 	.word	0x003d0072
 800b3e4:	20000914 	.word	0x20000914
 800b3e8:	40011000 	.word	0x40011000
 800b3ec:	200004a0 	.word	0x200004a0
 800b3f0:	2000050c 	.word	0x2000050c
 800b3f4:	200009ec 	.word	0x200009ec
 800b3f8:	08008000 	.word	0x08008000
 800b3fc:	200009a4 	.word	0x200009a4
 800b400:	200004b8 	.word	0x200004b8
 800b404:	20000009 	.word	0x20000009
 800b408:	01090000 	.word	0x01090000
 800b40c:	20000007 	.word	0x20000007
 800b410:	00300031 	.word	0x00300031
 800b414:	003d0056 	.word	0x003d0056
 800b418:	00460041 	.word	0x00460041
 800b41c:	01010000 	.word	0x01010000
          update_current_cold_water_temperature();
 800b420:	f7ff fbe2 	bl	800abe8 <update_current_cold_water_temperature>
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800b424:	f04f 0804 	mov.w	r8, #4
          update_current_hot_water_temperature();
 800b428:	f7ff fc4e 	bl	800acc8 <update_current_hot_water_temperature>
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e9cd 830d 	strd	r8, r3, [sp, #52]	; 0x34
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800b432:	2307      	movs	r3, #7
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800b434:	48c2      	ldr	r0, [pc, #776]	; (800b740 <main+0x928>)
 800b436:	a90d      	add	r1, sp, #52	; 0x34
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800b438:	930f      	str	r3, [sp, #60]	; 0x3c
    ret = HAL_ADC_ConfigChannel(hadc, &sConfig);
 800b43a:	f000 fdab 	bl	800bf94 <HAL_ADC_ConfigChannel>
    if (ret != HAL_OK)
 800b43e:	b998      	cbnz	r0, 800b468 <main+0x650>
    ret = HAL_ADC_Start(hadc);
 800b440:	48bf      	ldr	r0, [pc, #764]	; (800b740 <main+0x928>)
 800b442:	f000 fe85 	bl	800c150 <HAL_ADC_Start>
    if (ret != HAL_OK)
 800b446:	b978      	cbnz	r0, 800b468 <main+0x650>
    ret = HAL_ADC_PollForConversion(hadc, ADC_POLL_TIMEOUT); // Polling a single conversion from the selected ADC and Channel.
 800b448:	2164      	movs	r1, #100	; 0x64
 800b44a:	48bd      	ldr	r0, [pc, #756]	; (800b740 <main+0x928>)
 800b44c:	f000 fcd0 	bl	800bdf0 <HAL_ADC_PollForConversion>
    if (ret != HAL_OK)
 800b450:	b950      	cbnz	r0, 800b468 <main+0x650>
    *dst = HAL_ADC_GetValue(hadc); // Retrieve the polled value from the selected ADC Channel.
 800b452:	48bb      	ldr	r0, [pc, #748]	; (800b740 <main+0x928>)
 800b454:	f000 fd9a 	bl	800bf8c <HAL_ADC_GetValue>
 800b458:	f7fd fbd6 	bl	8008c08 <__aeabi_ui2f>
 800b45c:	f8ca 0000 	str.w	r0, [sl]
    return HAL_ADC_Stop(hadc);
 800b460:	48b7      	ldr	r0, [pc, #732]	; (800b740 <main+0x928>)
 800b462:	f000 fc87 	bl	800bd74 <HAL_ADC_Stop>
	if (ret != HAL_OK)
 800b466:	b1c8      	cbz	r0, 800b49c <main+0x684>
 800b468:	4db6      	ldr	r5, [pc, #728]	; (800b744 <main+0x92c>)
                dst[0] = Number_1_in_ASCII;
 800b46a:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800b748 <main+0x930>
			display_output[0] = 'E';
 800b46e:	4fb7      	ldr	r7, [pc, #732]	; (800b74c <main+0x934>)
 800b470:	4eb7      	ldr	r6, [pc, #732]	; (800b750 <main+0x938>)
                dst[0] = Number_1_in_ASCII;
 800b472:	2330      	movs	r3, #48	; 0x30
			display_output[0] = 'E';
 800b474:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Number_1_in_ASCII;
 800b478:	606b      	str	r3, [r5, #4]
 800b47a:	f8c5 8000 	str.w	r8, [r5]
			set_5641as_display_output(display_output);
 800b47e:	48b5      	ldr	r0, [pc, #724]	; (800b754 <main+0x93c>)
 800b480:	f7fd feee 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800b484:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b488:	f000 fba2 	bl	800bbd0 <HAL_Delay>
			set_5641as_display_output(ascii_error_code);
 800b48c:	48ad      	ldr	r0, [pc, #692]	; (800b744 <main+0x92c>)
 800b48e:	f7fd fee7 	bl	8009260 <set_5641as_display_output>
			HAL_Delay(2000);
 800b492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b496:	f000 fb9b 	bl	800bbd0 <HAL_Delay>
		while (1)
 800b49a:	e7ea      	b.n	800b472 <main+0x65a>
	current_internal_ambient_temperature = ((current_internal_ambient_temperature)*(LM35_VOLTAGE_TO_CELSIUS_CONSTANT)*(MCU_POWER_SUPPLY_VOLTAGE))/(ADC_BITS_IN_DECIMAL_VALUE); // Converting the Polled value to the Temperature that it stands for.
 800b49c:	49ae      	ldr	r1, [pc, #696]	; (800b758 <main+0x940>)
 800b49e:	f8da 0000 	ldr.w	r0, [sl]
 800b4a2:	f7fd fc09 	bl	8008cb8 <__aeabi_fmul>
 800b4a6:	f7fc ffb7 	bl	8008418 <__aeabi_f2d>
 800b4aa:	a3a1      	add	r3, pc, #644	; (adr r3, 800b730 <main+0x918>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7fd f80a 	bl	80084c8 <__aeabi_dmul>
 800b4b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b738 <main+0x920>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7fd f92f 	bl	800871c <__aeabi_ddiv>
 800b4be:	f7fd fa9d 	bl	80089fc <__aeabi_d2f>
 800b4c2:	f8ca 0000 	str.w	r0, [sl]
          if (current_internal_ambient_temperature >= (((float) desired_internal_ambient_temperature)-INTERNAL_AMBIENT_TEMP_ERROR_ALLOWED))
 800b4c6:	f7fc ffa7 	bl	8008418 <__aeabi_f2d>
 800b4ca:	4ba4      	ldr	r3, [pc, #656]	; (800b75c <main+0x944>)
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	f993 0000 	ldrsb.w	r0, [r3]
 800b4d2:	4689      	mov	r9, r1
 800b4d4:	f7fd fb9c 	bl	8008c10 <__aeabi_i2f>
 800b4d8:	f7fc ff9e 	bl	8008418 <__aeabi_f2d>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4ba0      	ldr	r3, [pc, #640]	; (800b760 <main+0x948>)
 800b4e0:	f7fc fe3a 	bl	8008158 <__aeabi_dsub>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	f7fd fa72 	bl	80089d4 <__aeabi_dcmpge>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f000 809e 	beq.w	800b634 <main+0x81c>
              __HAL_TIM_SET_COMPARE(&htim3, HOT_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(0, HOT_FAN_MAX_COMPARE_VALUE));
 800b4f8:	f04f 0b00 	mov.w	fp, #0
 800b4fc:	682b      	ldr	r3, [r5, #0]
              HAL_GPIO_WritePin(Hot_Water_Pump_GPIO_Output_GPIO_Port, Hot_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b4fe:	465a      	mov	r2, fp
              __HAL_TIM_SET_COMPARE(&htim3, HOT_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(0, HOT_FAN_MAX_COMPARE_VALUE));
 800b500:	f8c3 b038 	str.w	fp, [r3, #56]	; 0x38
              HAL_GPIO_WritePin(Hot_Water_Pump_GPIO_Output_GPIO_Port, Hot_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b508:	4896      	ldr	r0, [pc, #600]	; (800b764 <main+0x94c>)
 800b50a:	f001 f969 	bl	800c7e0 <HAL_GPIO_WritePin>
              if (current_internal_ambient_temperature <= (((float) desired_internal_ambient_temperature)+INTERNAL_AMBIENT_TEMP_ERROR_ALLOWED))
 800b50e:	f8da 0000 	ldr.w	r0, [sl]
 800b512:	f7fc ff81 	bl	8008418 <__aeabi_f2d>
 800b516:	4b91      	ldr	r3, [pc, #580]	; (800b75c <main+0x944>)
 800b518:	4680      	mov	r8, r0
 800b51a:	f993 0000 	ldrsb.w	r0, [r3]
 800b51e:	4689      	mov	r9, r1
 800b520:	f7fd fb76 	bl	8008c10 <__aeabi_i2f>
 800b524:	f7fc ff78 	bl	8008418 <__aeabi_f2d>
 800b528:	2200      	movs	r2, #0
 800b52a:	4b8d      	ldr	r3, [pc, #564]	; (800b760 <main+0x948>)
 800b52c:	f7fc fe16 	bl	800815c <__adddf3>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4640      	mov	r0, r8
 800b536:	4649      	mov	r1, r9
 800b538:	f7fd fa42 	bl	80089c0 <__aeabi_dcmple>
 800b53c:	4602      	mov	r2, r0
 800b53e:	b3a0      	cbz	r0, 800b5aa <main+0x792>
                  __HAL_TIM_SET_COMPARE(&htim3, COLD_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(0, COLD_FAN_MAX_COMPARE_VALUE));
 800b540:	682b      	ldr	r3, [r5, #0]
                  HAL_GPIO_WritePin(Cold_Water_Pump_GPIO_Output_GPIO_Port, Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b542:	465a      	mov	r2, fp
 800b544:	4630      	mov	r0, r6
 800b546:	f44f 7180 	mov.w	r1, #256	; 0x100
                  __HAL_TIM_SET_COMPARE(&htim3, COLD_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(0, COLD_FAN_MAX_COMPARE_VALUE));
 800b54a:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
                  HAL_GPIO_WritePin(Cold_Water_Pump_GPIO_Output_GPIO_Port, Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b54e:	f001 f947 	bl	800c7e0 <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_SET);
 800b552:	2201      	movs	r2, #1
 800b554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b558:	4638      	mov	r0, r7
                  HAL_GPIO_WritePin(Water_Heating_Resistor_GPIO_Output_GPIO_Port, Water_Heating_Resistor_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b55a:	f001 f941 	bl	800c7e0 <HAL_GPIO_WritePin>
                  convert_number_to_ASCII(current_internal_ambient_temperature, display_output);
 800b55e:	f8da 0000 	ldr.w	r0, [sl]
 800b562:	f7ff fa01 	bl	800a968 <convert_number_to_ASCII.constprop.1.isra.0>
                  display_output[3] = 'C';
 800b566:	2343      	movs	r3, #67	; 0x43
 800b568:	e6c3      	b.n	800b2f2 <main+0x4da>
          convert_number_to_ASCII((float) desired_internal_ambient_temperature, display_output);
 800b56a:	4b7c      	ldr	r3, [pc, #496]	; (800b75c <main+0x944>)
 800b56c:	f993 0000 	ldrsb.w	r0, [r3]
 800b570:	f7fd fb4e 	bl	8008c10 <__aeabi_i2f>
 800b574:	e7f5      	b.n	800b562 <main+0x74a>
 800b576:	4d73      	ldr	r5, [pc, #460]	; (800b744 <main+0x92c>)
                dst[0] = Number_1_in_ASCII;
 800b578:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800b768 <main+0x950>
			  display_output[0] = 'E';
 800b57c:	4f73      	ldr	r7, [pc, #460]	; (800b74c <main+0x934>)
 800b57e:	4e74      	ldr	r6, [pc, #464]	; (800b750 <main+0x938>)
                dst[0] = Number_1_in_ASCII;
 800b580:	2330      	movs	r3, #48	; 0x30
			  display_output[0] = 'E';
 800b582:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Number_1_in_ASCII;
 800b586:	606b      	str	r3, [r5, #4]
 800b588:	f8c5 8000 	str.w	r8, [r5]
			  set_5641as_display_output(display_output);
 800b58c:	4871      	ldr	r0, [pc, #452]	; (800b754 <main+0x93c>)
 800b58e:	f7fd fe67 	bl	8009260 <set_5641as_display_output>
			  HAL_Delay(2000);
 800b592:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b596:	f000 fb1b 	bl	800bbd0 <HAL_Delay>
			  set_5641as_display_output(ascii_error_code);
 800b59a:	486a      	ldr	r0, [pc, #424]	; (800b744 <main+0x92c>)
 800b59c:	f7fd fe60 	bl	8009260 <set_5641as_display_output>
			  HAL_Delay(2000);
 800b5a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5a4:	f000 fb14 	bl	800bbd0 <HAL_Delay>
		  while (1)
 800b5a8:	e7ea      	b.n	800b580 <main+0x768>
                  HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b5aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f001 f916 	bl	800c7e0 <HAL_GPIO_WritePin>
                      display_output[0] = 'n';
 800b5b4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800b76c <main+0x954>
 800b5b8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800b770 <main+0x958>
                      set_5641as_display_output(display_output);
 800b5bc:	f8df 8194 	ldr.w	r8, [pc, #404]	; 800b754 <main+0x93c>
                  while (current_cold_water_temperature > ((float) desired_cold_water_max_temperature))
 800b5c0:	4b6c      	ldr	r3, [pc, #432]	; (800b774 <main+0x95c>)
 800b5c2:	7818      	ldrb	r0, [r3, #0]
 800b5c4:	f7fd fb20 	bl	8008c08 <__aeabi_ui2f>
 800b5c8:	4b6b      	ldr	r3, [pc, #428]	; (800b778 <main+0x960>)
 800b5ca:	6819      	ldr	r1, [r3, #0]
 800b5cc:	f7fd fd12 	bl	8008ff4 <__aeabi_fcmplt>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d050      	beq.n	800b676 <main+0x85e>
                      set_5641as_display_output(display_output);
 800b5d4:	4640      	mov	r0, r8
                      display_output[0] = 'n';
 800b5d6:	e9c4 b900 	strd	fp, r9, [r4]
                      set_5641as_display_output(display_output);
 800b5da:	f7fd fe41 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b5de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b5e2:	f000 faf5 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 'C';
 800b5e6:	4b65      	ldr	r3, [pc, #404]	; (800b77c <main+0x964>)
 800b5e8:	4865      	ldr	r0, [pc, #404]	; (800b780 <main+0x968>)
 800b5ea:	e9c4 0300 	strd	r0, r3, [r4]
                      set_5641as_display_output(display_output);
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	f7fd fe36 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b5f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b5f8:	f000 faea 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 'A';
 800b5fc:	f8df c184 	ldr.w	ip, [pc, #388]	; 800b784 <main+0x96c>
 800b600:	4b52      	ldr	r3, [pc, #328]	; (800b74c <main+0x934>)
                      set_5641as_display_output(display_output);
 800b602:	4640      	mov	r0, r8
                      display_output[0] = 'A';
 800b604:	e9c4 c300 	strd	ip, r3, [r4]
                      set_5641as_display_output(display_output);
 800b608:	f7fd fe2a 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b60c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b610:	f000 fade 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 0;
 800b614:	f44f 1e38 	mov.w	lr, #3014656	; 0x2e0000
 800b618:	f04f 132e 	mov.w	r3, #3014702	; 0x2e002e
                      set_5641as_display_output(display_output);
 800b61c:	4640      	mov	r0, r8
                      display_output[0] = 0;
 800b61e:	e9c4 e300 	strd	lr, r3, [r4]
                      set_5641as_display_output(display_output);
 800b622:	f7fd fe1d 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b62a:	f000 fad1 	bl	800bbd0 <HAL_Delay>
                      update_current_cold_water_temperature();
 800b62e:	f7ff fadb 	bl	800abe8 <update_current_cold_water_temperature>
 800b632:	e7c5      	b.n	800b5c0 <main+0x7a8>
              HAL_GPIO_WritePin(IIATR_LED_GPIO_Output_GPIO_Port, IIATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b638:	4638      	mov	r0, r7
 800b63a:	f001 f8d1 	bl	800c7e0 <HAL_GPIO_WritePin>
              if (current_hot_water_temperature >= ((float) desired_hot_water_min_temperature))
 800b63e:	4b52      	ldr	r3, [pc, #328]	; (800b788 <main+0x970>)
 800b640:	7818      	ldrb	r0, [r3, #0]
 800b642:	f7fd fae1 	bl	8008c08 <__aeabi_ui2f>
 800b646:	4b51      	ldr	r3, [pc, #324]	; (800b78c <main+0x974>)
 800b648:	6819      	ldr	r1, [r3, #0]
 800b64a:	f7fd fcdd 	bl	8009008 <__aeabi_fcmple>
 800b64e:	b328      	cbz	r0, 800b69c <main+0x884>
    return (desired_duty_cycle*max_compare_value)/100;
 800b650:	4b4f      	ldr	r3, [pc, #316]	; (800b790 <main+0x978>)
 800b652:	f240 721a 	movw	r2, #1818	; 0x71a
 800b656:	781b      	ldrb	r3, [r3, #0]
                  HAL_GPIO_WritePin(Hot_Water_Pump_GPIO_Output_GPIO_Port, Hot_Water_Pump_GPIO_Output_Pin, GPIO_PIN_SET);
 800b658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    return (desired_duty_cycle*max_compare_value)/100;
 800b65c:	2b64      	cmp	r3, #100	; 0x64
 800b65e:	bf28      	it	cs
 800b660:	2364      	movcs	r3, #100	; 0x64
 800b662:	fb02 f303 	mul.w	r3, r2, r3
 800b666:	2264      	movs	r2, #100	; 0x64
 800b668:	fbb3 f3f2 	udiv	r3, r3, r2
                  __HAL_TIM_SET_COMPARE(&htim3, HOT_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(desired_hot_fan_duty_cycle, HOT_FAN_MAX_COMPARE_VALUE));
 800b66c:	682a      	ldr	r2, [r5, #0]
                  HAL_GPIO_WritePin(Hot_Water_Pump_GPIO_Output_GPIO_Port, Hot_Water_Pump_GPIO_Output_Pin, GPIO_PIN_SET);
 800b66e:	483d      	ldr	r0, [pc, #244]	; (800b764 <main+0x94c>)
                  __HAL_TIM_SET_COMPARE(&htim3, HOT_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(desired_hot_fan_duty_cycle, HOT_FAN_MAX_COMPARE_VALUE));
 800b670:	6393      	str	r3, [r2, #56]	; 0x38
                  HAL_GPIO_WritePin(Hot_Water_Pump_GPIO_Output_GPIO_Port, Hot_Water_Pump_GPIO_Output_Pin, GPIO_PIN_SET);
 800b672:	2201      	movs	r2, #1
 800b674:	e771      	b.n	800b55a <main+0x742>
    return (desired_duty_cycle*max_compare_value)/100;
 800b676:	4b47      	ldr	r3, [pc, #284]	; (800b794 <main+0x97c>)
 800b678:	f240 721a 	movw	r2, #1818	; 0x71a
 800b67c:	781b      	ldrb	r3, [r3, #0]
                  HAL_GPIO_WritePin(Cold_Water_Pump_GPIO_Output_GPIO_Port, Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_SET);
 800b67e:	f44f 7180 	mov.w	r1, #256	; 0x100
    return (desired_duty_cycle*max_compare_value)/100;
 800b682:	2b64      	cmp	r3, #100	; 0x64
 800b684:	bf28      	it	cs
 800b686:	2364      	movcs	r3, #100	; 0x64
 800b688:	fb02 f303 	mul.w	r3, r2, r3
 800b68c:	2264      	movs	r2, #100	; 0x64
 800b68e:	fbb3 f3f2 	udiv	r3, r3, r2
                  __HAL_TIM_SET_COMPARE(&htim3, COLD_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(desired_cold_fan_duty_cycle, COLD_FAN_MAX_COMPARE_VALUE));
 800b692:	682a      	ldr	r2, [r5, #0]
                  HAL_GPIO_WritePin(Water_Heating_Resistor_GPIO_Output_GPIO_Port, Water_Heating_Resistor_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b694:	4630      	mov	r0, r6
                  __HAL_TIM_SET_COMPARE(&htim3, COLD_FAN_TIMER_CHANNEL, get_compare_value_for_fan_pwm(desired_cold_fan_duty_cycle, COLD_FAN_MAX_COMPARE_VALUE));
 800b696:	6353      	str	r3, [r2, #52]	; 0x34
                  HAL_GPIO_WritePin(Cold_Water_Pump_GPIO_Output_GPIO_Port, Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_SET);
 800b698:	2201      	movs	r2, #1
 800b69a:	e75e      	b.n	800b55a <main+0x742>
                  HAL_GPIO_WritePin(Water_Heating_Resistor_GPIO_Output_GPIO_Port, Water_Heating_Resistor_GPIO_Output_Pin, GPIO_PIN_SET);
 800b69c:	2201      	movs	r2, #1
 800b69e:	2120      	movs	r1, #32
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f001 f89d 	bl	800c7e0 <HAL_GPIO_WritePin>
                      display_output[0] = 'H';
 800b6a6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 800b798 <main+0x980>
 800b6aa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800b784 <main+0x96c>
                      set_5641as_display_output(display_output);
 800b6ae:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800b754 <main+0x93c>
                  while (current_hot_water_temperature < ((float) desired_hot_water_temperature))
 800b6b2:	4b3a      	ldr	r3, [pc, #232]	; (800b79c <main+0x984>)
 800b6b4:	7818      	ldrb	r0, [r3, #0]
 800b6b6:	f7fd faa7 	bl	8008c08 <__aeabi_ui2f>
 800b6ba:	4b34      	ldr	r3, [pc, #208]	; (800b78c <main+0x974>)
 800b6bc:	6819      	ldr	r1, [r3, #0]
 800b6be:	f7fd fcb7 	bl	8009030 <__aeabi_fcmpgt>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	b378      	cbz	r0, 800b726 <main+0x90e>
                      set_5641as_display_output(display_output);
 800b6c6:	4640      	mov	r0, r8
                      display_output[0] = 'H';
 800b6c8:	e9c4 b900 	strd	fp, r9, [r4]
                      set_5641as_display_output(display_output);
 800b6cc:	f7fd fdc8 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b6d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b6d4:	f000 fa7c 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 0;
 800b6d8:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
 800b6dc:	4b30      	ldr	r3, [pc, #192]	; (800b7a0 <main+0x988>)
                      set_5641as_display_output(display_output);
 800b6de:	4640      	mov	r0, r8
                      display_output[0] = 0;
 800b6e0:	e9c4 2300 	strd	r2, r3, [r4]
                      set_5641as_display_output(display_output);
 800b6e4:	f7fd fdbc 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b6e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b6ec:	f000 fa70 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 'A';
 800b6f0:	4b16      	ldr	r3, [pc, #88]	; (800b74c <main+0x934>)
                      set_5641as_display_output(display_output);
 800b6f2:	4640      	mov	r0, r8
                      display_output[0] = 'A';
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	f8c4 9000 	str.w	r9, [r4]
                      set_5641as_display_output(display_output);
 800b6fa:	f7fd fdb1 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b6fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b702:	f000 fa65 	bl	800bbd0 <HAL_Delay>
                      display_output[0] = 0;
 800b706:	f44f 1138 	mov.w	r1, #3014656	; 0x2e0000
 800b70a:	f04f 132e 	mov.w	r3, #3014702	; 0x2e002e
                      set_5641as_display_output(display_output);
 800b70e:	4640      	mov	r0, r8
                      display_output[0] = 0;
 800b710:	e9c4 1300 	strd	r1, r3, [r4]
                      set_5641as_display_output(display_output);
 800b714:	f7fd fda4 	bl	8009260 <set_5641as_display_output>
                      HAL_Delay(500);
 800b718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b71c:	f000 fa58 	bl	800bbd0 <HAL_Delay>
                      update_current_hot_water_temperature();
 800b720:	f7ff fad2 	bl	800acc8 <update_current_hot_water_temperature>
 800b724:	e7c5      	b.n	800b6b2 <main+0x89a>
                  HAL_GPIO_WritePin(Water_Heating_Resistor_GPIO_Output_GPIO_Port, Water_Heating_Resistor_GPIO_Output_Pin, GPIO_PIN_RESET);
 800b726:	2120      	movs	r1, #32
 800b728:	4630      	mov	r0, r6
 800b72a:	e716      	b.n	800b55a <main+0x742>
 800b72c:	f3af 8000 	nop.w
 800b730:	66666666 	.word	0x66666666
 800b734:	400a6666 	.word	0x400a6666
 800b738:	00000000 	.word	0x00000000
 800b73c:	40affe00 	.word	0x40affe00
 800b740:	2000092c 	.word	0x2000092c
 800b744:	200004a8 	.word	0x200004a8
 800b748:	01030031 	.word	0x01030031
 800b74c:	00720045 	.word	0x00720045
 800b750:	003d0072 	.word	0x003d0072
 800b754:	200004bc 	.word	0x200004bc
 800b758:	447a0000 	.word	0x447a0000
 800b75c:	2000000c 	.word	0x2000000c
 800b760:	3fe00000 	.word	0x3fe00000
 800b764:	40010c00 	.word	0x40010c00
 800b768:	01000031 	.word	0x01000031
 800b76c:	0045006e 	.word	0x0045006e
 800b770:	00640045 	.word	0x00640045
 800b774:	20000008 	.word	0x20000008
 800b778:	200004b0 	.word	0x200004b0
 800b77c:	0064006c 	.word	0x0064006c
 800b780:	006f0043 	.word	0x006f0043
 800b784:	00740041 	.word	0x00740041
 800b788:	2000000a 	.word	0x2000000a
 800b78c:	200004b4 	.word	0x200004b4
 800b790:	20000009 	.word	0x20000009
 800b794:	20000007 	.word	0x20000007
 800b798:	00450048 	.word	0x00450048
 800b79c:	2000000b 	.word	0x2000000b
 800b7a0:	0074006f 	.word	0x0074006f

0800b7a4 <etx_ota_pre_transaction_handler>:
    stop_5641as_display_module();
 800b7a4:	f7fd bd56 	b.w	8009254 <stop_5641as_display_module>

0800b7a8 <etx_ota_status_resp_handler>:
{
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	4604      	mov	r4, r0
	start_5641as_display_module(); // We start back again the 5641AS Driver Timer's Base generation in Interrupt Mode.
 800b7ac:	f7fd fd4c 	bl	8009248 <start_5641as_display_module>
    switch (resp)
 800b7b0:	2c04      	cmp	r4, #4
 800b7b2:	d854      	bhi.n	800b85e <etx_ota_status_resp_handler+0xb6>
 800b7b4:	e8df f004 	tbb	[pc, r4]
 800b7b8:	362a2b3e 	.word	0x362a2b3e
 800b7bc:	3a          	.byte	0x3a
 800b7bd:	00          	.byte	0x00
				display_output[0] = 'E';
 800b7be:	4b35      	ldr	r3, [pc, #212]	; (800b894 <etx_ota_status_resp_handler+0xec>)
 800b7c0:	e9c0 2300 	strd	r2, r3, [r0]
				set_5641as_display_output(display_output);
 800b7c4:	f7fd fd4c 	bl	8009260 <set_5641as_display_output>
				desired_hot_fan_duty_cycle = (etx_ota_custom_data.data[1] - 32) + (etx_ota_custom_data.data[2] - 32);
 800b7c8:	7aa1      	ldrb	r1, [r4, #10]
 800b7ca:	7a63      	ldrb	r3, [r4, #9]
				desired_internal_ambient_temperature = etx_ota_custom_data.data[0] - 42;
 800b7cc:	7a22      	ldrb	r2, [r4, #8]
				desired_hot_fan_duty_cycle = (etx_ota_custom_data.data[1] - 32) + (etx_ota_custom_data.data[2] - 32);
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3b40      	subs	r3, #64	; 0x40
				desired_internal_ambient_temperature = etx_ota_custom_data.data[0] - 42;
 800b7d2:	4931      	ldr	r1, [pc, #196]	; (800b898 <etx_ota_status_resp_handler+0xf0>)
				desired_hot_fan_duty_cycle = (etx_ota_custom_data.data[1] - 32) + (etx_ota_custom_data.data[2] - 32);
 800b7d4:	b2db      	uxtb	r3, r3
				desired_internal_ambient_temperature = etx_ota_custom_data.data[0] - 42;
 800b7d6:	3a2a      	subs	r2, #42	; 0x2a
				if (desired_hot_fan_duty_cycle > 100)
 800b7d8:	2b64      	cmp	r3, #100	; 0x64
				desired_internal_ambient_temperature = etx_ota_custom_data.data[0] - 42;
 800b7da:	700a      	strb	r2, [r1, #0]
				if (desired_hot_fan_duty_cycle > 100)
 800b7dc:	d837      	bhi.n	800b84e <etx_ota_status_resp_handler+0xa6>
				desired_hot_fan_duty_cycle = (etx_ota_custom_data.data[1] - 32) + (etx_ota_custom_data.data[2] - 32);
 800b7de:	4a2f      	ldr	r2, [pc, #188]	; (800b89c <etx_ota_status_resp_handler+0xf4>)
 800b7e0:	7013      	strb	r3, [r2, #0]
				desired_cold_fan_duty_cycle = (etx_ota_custom_data.data[3] - 32) + (etx_ota_custom_data.data[4] - 32);
 800b7e2:	7ae3      	ldrb	r3, [r4, #11]
 800b7e4:	7b22      	ldrb	r2, [r4, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	3b40      	subs	r3, #64	; 0x40
 800b7ea:	b2db      	uxtb	r3, r3
				if (desired_cold_fan_duty_cycle > 100)
 800b7ec:	2b64      	cmp	r3, #100	; 0x64
 800b7ee:	d832      	bhi.n	800b856 <etx_ota_status_resp_handler+0xae>
				desired_cold_fan_duty_cycle = (etx_ota_custom_data.data[3] - 32) + (etx_ota_custom_data.data[4] - 32);
 800b7f0:	4a2b      	ldr	r2, [pc, #172]	; (800b8a0 <etx_ota_status_resp_handler+0xf8>)
 800b7f2:	7013      	strb	r3, [r2, #0]
				desired_hot_water_temperature = etx_ota_custom_data.data[5];
 800b7f4:	4a2b      	ldr	r2, [pc, #172]	; (800b8a4 <etx_ota_status_resp_handler+0xfc>)
 800b7f6:	f894 c00d 	ldrb.w	ip, [r4, #13]
				desired_cold_water_max_temperature = etx_ota_custom_data.data[7] - 42;
 800b7fa:	7be3      	ldrb	r3, [r4, #15]
				desired_hot_water_temperature = etx_ota_custom_data.data[5];
 800b7fc:	f882 c000 	strb.w	ip, [r2]
				desired_hot_water_min_temperature = etx_ota_custom_data.data[6];
 800b800:	4929      	ldr	r1, [pc, #164]	; (800b8a8 <etx_ota_status_resp_handler+0x100>)
 800b802:	7ba0      	ldrb	r0, [r4, #14]
				desired_cold_water_max_temperature = etx_ota_custom_data.data[7] - 42;
 800b804:	4a29      	ldr	r2, [pc, #164]	; (800b8ac <etx_ota_status_resp_handler+0x104>)
 800b806:	3b2a      	subs	r3, #42	; 0x2a
				desired_hot_water_min_temperature = etx_ota_custom_data.data[6];
 800b808:	7008      	strb	r0, [r1, #0]
				desired_cold_water_max_temperature = etx_ota_custom_data.data[7] - 42;
 800b80a:	7013      	strb	r3, [r2, #0]
}
 800b80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            display_output[0] = 'E';
 800b80e:	4b28      	ldr	r3, [pc, #160]	; (800b8b0 <etx_ota_status_resp_handler+0x108>)
 800b810:	4828      	ldr	r0, [pc, #160]	; (800b8b4 <etx_ota_status_resp_handler+0x10c>)
 800b812:	4a29      	ldr	r2, [pc, #164]	; (800b8b8 <etx_ota_status_resp_handler+0x110>)
 800b814:	e9c0 2300 	strd	r2, r3, [r0]
            set_5641as_display_output(display_output);
 800b818:	f7fd fd22 	bl	8009260 <set_5641as_display_output>
}
 800b81c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			start_etx_ota();
 800b820:	f7fe b91c 	b.w	8009a5c <start_etx_ota>
}
 800b824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_NVIC_SystemReset(); // We reset our MCU/MPU to try installing a Firmware Image there.
 800b828:	f000 bd56 	b.w	800c2d8 <HAL_NVIC_SystemReset>
}
 800b82c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        	start_etx_ota();
 800b830:	f7fe b914 	b.w	8009a5c <start_etx_ota>
        	if (etx_ota_custom_data.size != 8)
 800b834:	4c21      	ldr	r4, [pc, #132]	; (800b8bc <etx_ota_status_resp_handler+0x114>)
				display_output[0] = 'E';
 800b836:	481f      	ldr	r0, [pc, #124]	; (800b8b4 <etx_ota_status_resp_handler+0x10c>)
        	if (etx_ota_custom_data.size != 8)
 800b838:	6823      	ldr	r3, [r4, #0]
				display_output[0] = 'E';
 800b83a:	4a1f      	ldr	r2, [pc, #124]	; (800b8b8 <etx_ota_status_resp_handler+0x110>)
        	if (etx_ota_custom_data.size != 8)
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d0be      	beq.n	800b7be <etx_ota_status_resp_handler+0x16>
				display_output[0] = 'E';
 800b840:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <etx_ota_status_resp_handler+0x118>)
 800b842:	e9c0 2300 	strd	r2, r3, [r0]
}
 800b846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				set_5641as_display_output(display_output);
 800b84a:	f7fd bd09 	b.w	8009260 <set_5641as_display_output>
					desired_hot_fan_duty_cycle = 100;
 800b84e:	2264      	movs	r2, #100	; 0x64
 800b850:	4b12      	ldr	r3, [pc, #72]	; (800b89c <etx_ota_status_resp_handler+0xf4>)
 800b852:	701a      	strb	r2, [r3, #0]
 800b854:	e7c5      	b.n	800b7e2 <etx_ota_status_resp_handler+0x3a>
					desired_cold_fan_duty_cycle = 100;
 800b856:	2264      	movs	r2, #100	; 0x64
 800b858:	4b11      	ldr	r3, [pc, #68]	; (800b8a0 <etx_ota_status_resp_handler+0xf8>)
 800b85a:	701a      	strb	r2, [r3, #0]
 800b85c:	e7ca      	b.n	800b7f4 <etx_ota_status_resp_handler+0x4c>
 800b85e:	4c15      	ldr	r4, [pc, #84]	; (800b8b4 <etx_ota_status_resp_handler+0x10c>)
 800b860:	4d18      	ldr	r5, [pc, #96]	; (800b8c4 <etx_ota_status_resp_handler+0x11c>)
				display_output[0] = 'E';
 800b862:	4f19      	ldr	r7, [pc, #100]	; (800b8c8 <etx_ota_status_resp_handler+0x120>)
 800b864:	4e19      	ldr	r6, [pc, #100]	; (800b8cc <etx_ota_status_resp_handler+0x124>)
                dst[0] = Command_NULL_in_ASCII;
 800b866:	f04f 7382 	mov.w	r3, #17039360	; 0x1040000
 800b86a:	2230      	movs	r2, #48	; 0x30
                set_5641as_display_output(display_output);
 800b86c:	4620      	mov	r0, r4
				display_output[0] = 'E';
 800b86e:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Command_NULL_in_ASCII;
 800b872:	e9c5 3200 	strd	r3, r2, [r5]
                set_5641as_display_output(display_output);
 800b876:	f7fd fcf3 	bl	8009260 <set_5641as_display_output>
                HAL_Delay(2000);
 800b87a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b87e:	f000 f9a7 	bl	800bbd0 <HAL_Delay>
                set_5641as_display_output(ascii_error_code);
 800b882:	4810      	ldr	r0, [pc, #64]	; (800b8c4 <etx_ota_status_resp_handler+0x11c>)
 800b884:	f7fd fcec 	bl	8009260 <set_5641as_display_output>
                HAL_Delay(2000);
 800b888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b88c:	f000 f9a0 	bl	800bbd0 <HAL_Delay>
            while (1)
 800b890:	e7e9      	b.n	800b866 <etx_ota_status_resp_handler+0xbe>
 800b892:	bf00      	nop
 800b894:	00440020 	.word	0x00440020
 800b898:	2000000c 	.word	0x2000000c
 800b89c:	20000009 	.word	0x20000009
 800b8a0:	20000007 	.word	0x20000007
 800b8a4:	2000000b 	.word	0x2000000b
 800b8a8:	2000000a 	.word	0x2000000a
 800b8ac:	20000008 	.word	0x20000008
 800b8b0:	00510020 	.word	0x00510020
 800b8b4:	200004bc 	.word	0x200004bc
 800b8b8:	004f0045 	.word	0x004f0045
 800b8bc:	2000050c 	.word	0x2000050c
 800b8c0:	00490020 	.word	0x00490020
 800b8c4:	200004a8 	.word	0x200004a8
 800b8c8:	00720045 	.word	0x00720045
 800b8cc:	003d0072 	.word	0x003d0072

0800b8d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <HAL_MspInit+0x2c>)
{
 800b8d2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800b8d4:	699a      	ldr	r2, [r3, #24]
 800b8d6:	f042 0201 	orr.w	r2, r2, #1
 800b8da:	619a      	str	r2, [r3, #24]
 800b8dc:	699a      	ldr	r2, [r3, #24]
 800b8de:	f002 0201 	and.w	r2, r2, #1
 800b8e2:	9200      	str	r2, [sp, #0]
 800b8e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8e6:	69da      	ldr	r2, [r3, #28]
 800b8e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b8ec:	61da      	str	r2, [r3, #28]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b8f8:	b002      	add	sp, #8
 800b8fa:	4770      	bx	lr
 800b8fc:	40021000 	.word	0x40021000

0800b900 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b900:	2300      	movs	r3, #0
{
 800b902:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 800b904:	4a15      	ldr	r2, [pc, #84]	; (800b95c <HAL_ADC_MspInit+0x5c>)
 800b906:	6801      	ldr	r1, [r0, #0]
{
 800b908:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 800b90a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b90c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b910:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 800b914:	d001      	beq.n	800b91a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b916:	b007      	add	sp, #28
 800b918:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = Cold_Water_Temp_Sensor_ADC1_IN0_Pin|Hot_Water_Temp_Sensor_ADC1_IN1_Pin|Internal_Ambient_Temp_Sensor_ADC1_IN4_Pin;
 800b91a:	2413      	movs	r4, #19
 800b91c:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b91e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b922:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b926:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b928:	480d      	ldr	r0, [pc, #52]	; (800b960 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b92a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b92e:	619a      	str	r2, [r3, #24]
 800b930:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b932:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b934:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800b938:	9200      	str	r2, [sp, #0]
 800b93a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	f042 0204 	orr.w	r2, r2, #4
 800b942:	619a      	str	r2, [r3, #24]
 800b944:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = Cold_Water_Temp_Sensor_ADC1_IN0_Pin|Hot_Water_Temp_Sensor_ADC1_IN1_Pin|Internal_Ambient_Temp_Sensor_ADC1_IN4_Pin;
 800b946:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b94a:	f003 0304 	and.w	r3, r3, #4
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b952:	f000 fe31 	bl	800c5b8 <HAL_GPIO_Init>
}
 800b956:	b007      	add	sp, #28
 800b958:	bd30      	pop	{r4, r5, pc}
 800b95a:	bf00      	nop
 800b95c:	40012400 	.word	0x40012400
 800b960:	40010800 	.word	0x40010800

0800b964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b964:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 800b966:	6803      	ldr	r3, [r0, #0]
{
 800b968:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800b96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b96e:	d012      	beq.n	800b996 <HAL_TIM_Base_MspInit+0x32>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800b970:	4a14      	ldr	r2, [pc, #80]	; (800b9c4 <HAL_TIM_Base_MspInit+0x60>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d002      	beq.n	800b97c <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800b976:	b003      	add	sp, #12
 800b978:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b97c:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <HAL_TIM_Base_MspInit+0x64>)
 800b97e:	69da      	ldr	r2, [r3, #28]
 800b980:	f042 0202 	orr.w	r2, r2, #2
 800b984:	61da      	str	r2, [r3, #28]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	f003 0302 	and.w	r3, r3, #2
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	9b01      	ldr	r3, [sp, #4]
}
 800b990:	b003      	add	sp, #12
 800b992:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b996:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b998:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b99c:	69d9      	ldr	r1, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b99e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b9a0:	f041 0101 	orr.w	r1, r1, #1
 800b9a4:	61d9      	str	r1, [r3, #28]
 800b9a6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b9a8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b9b2:	f000 fc45 	bl	800c240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b9b6:	201c      	movs	r0, #28
}
 800b9b8:	b003      	add	sp, #12
 800b9ba:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b9be:	f000 bc7d 	b.w	800c2bc <HAL_NVIC_EnableIRQ>
 800b9c2:	bf00      	nop
 800b9c4:	40000400 	.word	0x40000400
 800b9c8:	40021000 	.word	0x40021000

0800b9cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9cc:	2300      	movs	r3, #0
{
 800b9ce:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 800b9d0:	4a11      	ldr	r2, [pc, #68]	; (800ba18 <HAL_TIM_MspPostInit+0x4c>)
 800b9d2:	6801      	ldr	r1, [r0, #0]
{
 800b9d4:	b086      	sub	sp, #24
  if(htim->Instance==TIM3)
 800b9d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM3)
 800b9e0:	d001      	beq.n	800b9e6 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b9e2:	b006      	add	sp, #24
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = Cold_Fan_PWM_TIM3_CH1_Pin|Hot_Fan_PWM_TIM3_CH2_Pin;
 800b9e6:	24c0      	movs	r4, #192	; 0xc0
 800b9e8:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9ea:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b9f4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9f6:	4809      	ldr	r0, [pc, #36]	; (800ba1c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9f8:	f042 0204 	orr.w	r2, r2, #4
 800b9fc:	619a      	str	r2, [r3, #24]
 800b9fe:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba00:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba02:	f003 0304 	and.w	r3, r3, #4
 800ba06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Cold_Fan_PWM_TIM3_CH1_Pin|Hot_Fan_PWM_TIM3_CH2_Pin;
 800ba08:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba0e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba10:	f000 fdd2 	bl	800c5b8 <HAL_GPIO_Init>
}
 800ba14:	b006      	add	sp, #24
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	40000400 	.word	0x40000400
 800ba1c:	40010800 	.word	0x40010800

0800ba20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ba20:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba22:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 800ba24:	4b1e      	ldr	r3, [pc, #120]	; (800baa0 <HAL_UART_MspInit+0x80>)
 800ba26:	6802      	ldr	r2, [r0, #0]
{
 800ba28:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 800ba2a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba2c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800ba30:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART3)
 800ba34:	d001      	beq.n	800ba3a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ba36:	b006      	add	sp, #24
 800ba38:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba3a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800ba3e:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 800ba40:	f44f 6680 	mov.w	r6, #1024	; 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ba48:	61da      	str	r2, [r3, #28]
 800ba4a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 800ba4c:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba4e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800ba52:	9200      	str	r2, [sp, #0]
 800ba54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba56:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 800ba58:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba5a:	f042 0208 	orr.w	r2, r2, #8
 800ba5e:	619a      	str	r2, [r3, #24]
 800ba60:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 800ba62:	4810      	ldr	r0, [pc, #64]	; (800baa4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba64:	f003 0308 	and.w	r3, r3, #8
 800ba68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ba6a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba6c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ba6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 800ba70:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 800ba74:	f000 fda0 	bl	800c5b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 800ba7e:	a902      	add	r1, sp, #8
 800ba80:	4808      	ldr	r0, [pc, #32]	; (800baa4 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 800ba82:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba86:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 800ba88:	f000 fd96 	bl	800c5b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4621      	mov	r1, r4
 800ba90:	2027      	movs	r0, #39	; 0x27
 800ba92:	f000 fbd5 	bl	800c240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ba96:	2027      	movs	r0, #39	; 0x27
 800ba98:	f000 fc10 	bl	800c2bc <HAL_NVIC_EnableIRQ>
}
 800ba9c:	b006      	add	sp, #24
 800ba9e:	bdd0      	pop	{r4, r6, r7, pc}
 800baa0:	40004800 	.word	0x40004800
 800baa4:	40010c00 	.word	0x40010c00

0800baa8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800baa8:	e7fe      	b.n	800baa8 <NMI_Handler>
 800baaa:	bf00      	nop

0800baac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800baac:	e7fe      	b.n	800baac <HardFault_Handler>
 800baae:	bf00      	nop

0800bab0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bab0:	e7fe      	b.n	800bab0 <MemManage_Handler>
 800bab2:	bf00      	nop

0800bab4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bab4:	e7fe      	b.n	800bab4 <BusFault_Handler>
 800bab6:	bf00      	nop

0800bab8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bab8:	e7fe      	b.n	800bab8 <UsageFault_Handler>
 800baba:	bf00      	nop

0800babc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop

0800bac0 <DebugMon_Handler>:
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop

0800bac4 <PendSV_Handler>:
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop

0800bac8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bac8:	f000 b870 	b.w	800bbac <HAL_IncTick>

0800bacc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <TIM2_IRQHandler+0x8>)
 800bace:	f001 bd7f 	b.w	800d5d0 <HAL_TIM_IRQHandler>
 800bad2:	bf00      	nop
 800bad4:	2000095c 	.word	0x2000095c

0800bad8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800bad8:	4801      	ldr	r0, [pc, #4]	; (800bae0 <USART3_IRQHandler+0x8>)
 800bada:	f002 b88b 	b.w	800dbf4 <HAL_UART_IRQHandler>
 800bade:	bf00      	nop
 800bae0:	200009ec 	.word	0x200009ec

0800bae4 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800bae4:	4b01      	ldr	r3, [pc, #4]	; (800baec <SystemInit+0x8>)
 800bae6:	4a02      	ldr	r2, [pc, #8]	; (800baf0 <SystemInit+0xc>)
 800bae8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800baea:	4770      	bx	lr
 800baec:	e000ed00 	.word	0xe000ed00
 800baf0:	08008000 	.word	0x08008000

0800baf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800baf4:	f7ff fff6 	bl	800bae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800baf8:	480b      	ldr	r0, [pc, #44]	; (800bb28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800bafa:	490c      	ldr	r1, [pc, #48]	; (800bb2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800bafc:	4a0c      	ldr	r2, [pc, #48]	; (800bb30 <LoopFillZerobss+0x16>)
  movs r3, #0
 800bafe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bb00:	e002      	b.n	800bb08 <LoopCopyDataInit>

0800bb02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bb02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bb04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bb06:	3304      	adds	r3, #4

0800bb08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bb08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bb0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bb0c:	d3f9      	bcc.n	800bb02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bb0e:	4a09      	ldr	r2, [pc, #36]	; (800bb34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800bb10:	4c09      	ldr	r4, [pc, #36]	; (800bb38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bb12:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bb14:	e001      	b.n	800bb1a <LoopFillZerobss>

0800bb16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bb16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bb18:	3204      	adds	r2, #4

0800bb1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bb1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bb1c:	d3fb      	bcc.n	800bb16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bb1e:	f002 f9ff 	bl	800df20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800bb22:	f7ff f979 	bl	800ae18 <main>
  bx lr
 800bb26:	4770      	bx	lr
  ldr r0, =_sdata
 800bb28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bb2c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800bb30:	0800e3dc 	.word	0x0800e3dc
  ldr r2, =_sbss
 800bb34:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800bb38:	20000a58 	.word	0x20000a58

0800bb3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800bb3c:	e7fe      	b.n	800bb3c <ADC1_2_IRQHandler>
	...

0800bb40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb40:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bb42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb46:	4a0d      	ldr	r2, [pc, #52]	; (800bb7c <HAL_InitTick+0x3c>)
{
 800bb48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bb4a:	7811      	ldrb	r1, [r2, #0]
 800bb4c:	4a0c      	ldr	r2, [pc, #48]	; (800bb80 <HAL_InitTick+0x40>)
 800bb4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	fbb2 f0f3 	udiv	r0, r2, r3
 800bb58:	f000 fbd0 	bl	800c2fc <HAL_SYSTICK_Config>
 800bb5c:	b908      	cbnz	r0, 800bb62 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bb5e:	2d0f      	cmp	r5, #15
 800bb60:	d901      	bls.n	800bb66 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800bb62:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800bb64:	bd38      	pop	{r3, r4, r5, pc}
 800bb66:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bb68:	4602      	mov	r2, r0
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	f000 fb66 	bl	800c240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bb74:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <HAL_InitTick+0x44>)
 800bb76:	4620      	mov	r0, r4
 800bb78:	601d      	str	r5, [r3, #0]
}
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20000014 	.word	0x20000014
 800bb80:	20000010 	.word	0x20000010
 800bb84:	20000018 	.word	0x20000018

0800bb88 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb88:	4a07      	ldr	r2, [pc, #28]	; (800bba8 <HAL_Init+0x20>)
{
 800bb8a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb8c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb8e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb90:	f043 0310 	orr.w	r3, r3, #16
 800bb94:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb96:	f000 fb41 	bl	800c21c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb9a:	200f      	movs	r0, #15
 800bb9c:	f7ff ffd0 	bl	800bb40 <HAL_InitTick>
  HAL_MspInit();
 800bba0:	f7ff fe96 	bl	800b8d0 <HAL_MspInit>
}
 800bba4:	2000      	movs	r0, #0
 800bba6:	bd08      	pop	{r3, pc}
 800bba8:	40022000 	.word	0x40022000

0800bbac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800bbac:	4a03      	ldr	r2, [pc, #12]	; (800bbbc <HAL_IncTick+0x10>)
 800bbae:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <HAL_IncTick+0x14>)
 800bbb0:	6811      	ldr	r1, [r2, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	440b      	add	r3, r1
 800bbb6:	6013      	str	r3, [r2, #0]
}
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20000a34 	.word	0x20000a34
 800bbc0:	20000014 	.word	0x20000014

0800bbc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800bbc4:	4b01      	ldr	r3, [pc, #4]	; (800bbcc <HAL_GetTick+0x8>)
 800bbc6:	6818      	ldr	r0, [r3, #0]
}
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	20000a34 	.word	0x20000a34

0800bbd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bbd4:	f7ff fff6 	bl	800bbc4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bbd8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800bbda:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800bbdc:	d002      	beq.n	800bbe4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800bbde:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <HAL_Delay+0x20>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bbe4:	f7ff ffee 	bl	800bbc4 <HAL_GetTick>
 800bbe8:	1b40      	subs	r0, r0, r5
 800bbea:	42a0      	cmp	r0, r4
 800bbec:	d3fa      	bcc.n	800bbe4 <HAL_Delay+0x14>
  {
  }
}
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	20000014 	.word	0x20000014

0800bbf4 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f000 808b 	beq.w	800bd10 <HAL_ADC_Init+0x11c>
{
 800bbfa:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bbfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bbfe:	4604      	mov	r4, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d06d      	beq.n	800bce0 <HAL_ADC_Init+0xec>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	07d1      	lsls	r1, r2, #31
 800bc0a:	d442      	bmi.n	800bc92 <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800bc0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bc0e:	06d2      	lsls	r2, r2, #27
 800bc10:	d460      	bmi.n	800bcd4 <HAL_ADC_Init+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 800bc12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800bc14:	6861      	ldr	r1, [r4, #4]
 800bc16:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800bc18:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800bc1c:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800bc1e:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800bc22:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 800bc24:	f042 0202 	orr.w	r2, r2, #2
 800bc28:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800bc2a:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bc2e:	68a1      	ldr	r1, [r4, #8]
 800bc30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bc34:	d05a      	beq.n	800bcec <HAL_ADC_Init+0xf8>
 800bc36:	f1a1 0001 	sub.w	r0, r1, #1
 800bc3a:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bc3e:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bc42:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bc44:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bc48:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bc4c:	d06c      	beq.n	800bd28 <HAL_ADC_Init+0x134>
      MODIFY_REG(hadc->Instance->CR1,
 800bc4e:	685d      	ldr	r5, [r3, #4]
 800bc50:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800bc54:	4328      	orrs	r0, r5
 800bc56:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800bc58:	689d      	ldr	r5, [r3, #8]
 800bc5a:	4844      	ldr	r0, [pc, #272]	; (800bd6c <HAL_ADC_Init+0x178>)
 800bc5c:	4028      	ands	r0, r5
 800bc5e:	4310      	orrs	r0, r2
 800bc60:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800bc62:	2901      	cmp	r1, #1
 800bc64:	d050      	beq.n	800bd08 <HAL_ADC_Init+0x114>
  uint32_t tmp_sqr1 = 0U;
 800bc66:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 800bc68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc6a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800bc6e:	4301      	orrs	r1, r0
 800bc70:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800bc72:	6899      	ldr	r1, [r3, #8]
 800bc74:	4b3e      	ldr	r3, [pc, #248]	; (800bd70 <HAL_ADC_Init+0x17c>)
 800bc76:	400b      	ands	r3, r1
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d04b      	beq.n	800bd14 <HAL_ADC_Init+0x120>
      tmp_hal_status = HAL_ERROR;
 800bc7c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800bc7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc80:	f023 0312 	bic.w	r3, r3, #18
 800bc84:	f043 0310 	orr.w	r3, r3, #16
 800bc88:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc8c:	4303      	orrs	r3, r0
 800bc8e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800bc90:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	f022 0201 	bic.w	r2, r2, #1
 800bc98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bc9a:	f7ff ff93 	bl	800bbc4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800bc9e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800bca0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	07d2      	lsls	r2, r2, #31
 800bca6:	d5b1      	bpl.n	800bc0c <HAL_ADC_Init+0x18>
 800bca8:	e002      	b.n	800bcb0 <HAL_ADC_Init+0xbc>
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	07d1      	lsls	r1, r2, #31
 800bcae:	d5ad      	bpl.n	800bc0c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bcb0:	f7ff ff88 	bl	800bbc4 <HAL_GetTick>
 800bcb4:	1b40      	subs	r0, r0, r5
 800bcb6:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800bcb8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bcba:	d9f6      	bls.n	800bcaa <HAL_ADC_Init+0xb6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800bcbc:	689a      	ldr	r2, [r3, #8]
 800bcbe:	07d0      	lsls	r0, r2, #31
 800bcc0:	d5f3      	bpl.n	800bcaa <HAL_ADC_Init+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bcc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bcc4:	f043 0310 	orr.w	r3, r3, #16
 800bcc8:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bcca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bccc:	f043 0301 	orr.w	r3, r3, #1
 800bcd0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800bcd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bcd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800bcd6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bcd8:	f043 0310 	orr.w	r3, r3, #16
 800bcdc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800bce0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800bce2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800bce6:	f7ff fe0b 	bl	800b900 <HAL_ADC_MspInit>
 800bcea:	e78b      	b.n	800bc04 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bcec:	7d20      	ldrb	r0, [r4, #20]
 800bcee:	2801      	cmp	r0, #1
 800bcf0:	d019      	beq.n	800bd26 <HAL_ADC_Init+0x132>
      MODIFY_REG(hadc->Instance->CR1,
 800bcf2:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800bcf4:	491d      	ldr	r1, [pc, #116]	; (800bd6c <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 800bcf6:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800bcfa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800bcfe:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800bd00:	6898      	ldr	r0, [r3, #8]
 800bd02:	4001      	ands	r1, r0
 800bd04:	4311      	orrs	r1, r2
 800bd06:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800bd08:	6920      	ldr	r0, [r4, #16]
 800bd0a:	3801      	subs	r0, #1
 800bd0c:	0500      	lsls	r0, r0, #20
 800bd0e:	e7ab      	b.n	800bc68 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 800bd10:	2001      	movs	r0, #1
}
 800bd12:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800bd14:	2000      	movs	r0, #0
 800bd16:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800bd18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bd26:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800bd28:	b1c5      	cbz	r5, 800bd5c <HAL_ADC_Init+0x168>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd2a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bd2c:	f045 0520 	orr.w	r5, r5, #32
 800bd30:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bd32:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800bd34:	f045 0501 	orr.w	r5, r5, #1
 800bd38:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 800bd3a:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800bd3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800bd40:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800bd44:	ea40 0005 	orr.w	r0, r0, r5
 800bd48:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800bd4a:	689d      	ldr	r5, [r3, #8]
 800bd4c:	4807      	ldr	r0, [pc, #28]	; (800bd6c <HAL_ADC_Init+0x178>)
 800bd4e:	ea00 0005 	and.w	r0, r0, r5
 800bd52:	ea40 0002 	orr.w	r0, r0, r2
 800bd56:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800bd58:	d183      	bne.n	800bc62 <HAL_ADC_Init+0x6e>
 800bd5a:	e7d5      	b.n	800bd08 <HAL_ADC_Init+0x114>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800bd5c:	69a5      	ldr	r5, [r4, #24]
 800bd5e:	3d01      	subs	r5, #1
 800bd60:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800bd64:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800bd68:	e7e7      	b.n	800bd3a <HAL_ADC_Init+0x146>
 800bd6a:	bf00      	nop
 800bd6c:	ffe1f7fd 	.word	0xffe1f7fd
 800bd70:	ff1f0efe 	.word	0xff1f0efe

0800bd74 <HAL_ADC_Stop>:
{
 800bd74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800bd76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d035      	beq.n	800bdea <HAL_ADC_Stop+0x76>
 800bd7e:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET)
 800bd80:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800bd82:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (ADC_IS_ENABLE(hadc) != RESET)
 800bd86:	689a      	ldr	r2, [r3, #8]
 800bd88:	4604      	mov	r4, r0
 800bd8a:	07d0      	lsls	r0, r2, #31
 800bd8c:	d40c      	bmi.n	800bda8 <HAL_ADC_Stop+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 800bd8e:	2000      	movs	r0, #0
 800bd90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bd96:	f023 0301 	bic.w	r3, r3, #1
 800bd9a:	f043 0301 	orr.w	r3, r3, #1
 800bd9e:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800bda0:	2300      	movs	r3, #0
 800bda2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800bda8:	689a      	ldr	r2, [r3, #8]
 800bdaa:	f022 0201 	bic.w	r2, r2, #1
 800bdae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bdb0:	f7ff ff08 	bl	800bbc4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800bdb4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800bdb6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	07d9      	lsls	r1, r3, #31
 800bdbc:	d5e7      	bpl.n	800bd8e <HAL_ADC_Stop+0x1a>
 800bdbe:	e002      	b.n	800bdc6 <HAL_ADC_Stop+0x52>
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	07db      	lsls	r3, r3, #31
 800bdc4:	d5e3      	bpl.n	800bd8e <HAL_ADC_Stop+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bdc6:	f7ff fefd 	bl	800bbc4 <HAL_GetTick>
 800bdca:	1b43      	subs	r3, r0, r5
 800bdcc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 800bdce:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bdd0:	d9f6      	bls.n	800bdc0 <HAL_ADC_Stop+0x4c>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	07d2      	lsls	r2, r2, #31
 800bdd6:	d5f3      	bpl.n	800bdc0 <HAL_ADC_Stop+0x4c>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bdd8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bdda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bddc:	f043 0310 	orr.w	r3, r3, #16
 800bde0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bde2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bde4:	4303      	orrs	r3, r0
 800bde6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (tmp_hal_status == HAL_OK)
 800bde8:	e7da      	b.n	800bda0 <HAL_ADC_Stop+0x2c>
  __HAL_LOCK(hadc);
 800bdea:	2002      	movs	r0, #2
}
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	bf00      	nop

0800bdf0 <HAL_ADC_PollForConversion>:
{
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	4605      	mov	r5, r0
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800bdf6:	2400      	movs	r4, #0
{
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800bdfc:	9401      	str	r4, [sp, #4]
  tickstart = HAL_GetTick();
 800bdfe:	f7ff fee1 	bl	800bbc4 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800be02:	682b      	ldr	r3, [r5, #0]
 800be04:	689a      	ldr	r2, [r3, #8]
 800be06:	05d7      	lsls	r7, r2, #23
 800be08:	d46e      	bmi.n	800bee8 <HAL_ADC_PollForConversion+0xf8>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800be0a:	685a      	ldr	r2, [r3, #4]
 800be0c:	4607      	mov	r7, r0
 800be0e:	05d1      	lsls	r1, r2, #23
 800be10:	d41a      	bmi.n	800be48 <HAL_ADC_PollForConversion+0x58>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800be12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800be14:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800be18:	d116      	bne.n	800be48 <HAL_ADC_PollForConversion+0x58>
 800be1a:	1c72      	adds	r2, r6, #1
 800be1c:	d16e      	bne.n	800befc <HAL_ADC_PollForConversion+0x10c>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	0794      	lsls	r4, r2, #30
 800be22:	d5fc      	bpl.n	800be1e <HAL_ADC_PollForConversion+0x2e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800be24:	f06f 0212 	mvn.w	r2, #18
 800be28:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800be2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800be2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be30:	62aa      	str	r2, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800be38:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800be3c:	f000 808a 	beq.w	800bf54 <HAL_ADC_PollForConversion+0x164>
  return HAL_OK;
 800be40:	2000      	movs	r0, #0
}
 800be42:	b002      	add	sp, #8
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800be48:	4b4c      	ldr	r3, [pc, #304]	; (800bf7c <HAL_ADC_PollForConversion+0x18c>)
 800be4a:	2002      	movs	r0, #2
 800be4c:	f8d3 8000 	ldr.w	r8, [r3]
 800be50:	f001 f81e 	bl	800ce90 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800be54:	682a      	ldr	r2, [r5, #0]
 800be56:	494a      	ldr	r1, [pc, #296]	; (800bf80 <HAL_ADC_PollForConversion+0x190>)
 800be58:	6914      	ldr	r4, [r2, #16]
 800be5a:	4613      	mov	r3, r2
 800be5c:	420c      	tst	r4, r1
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800be5e:	fbb8 f8f0 	udiv	r8, r8, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800be62:	d110      	bne.n	800be86 <HAL_ADC_PollForConversion+0x96>
 800be64:	68d0      	ldr	r0, [r2, #12]
 800be66:	f101 415c 	add.w	r1, r1, #3690987520	; 0xdc000000
 800be6a:	4208      	tst	r0, r1
 800be6c:	d10b      	bne.n	800be86 <HAL_ADC_PollForConversion+0x96>
 800be6e:	6910      	ldr	r0, [r2, #16]
 800be70:	4944      	ldr	r1, [pc, #272]	; (800bf84 <HAL_ADC_PollForConversion+0x194>)
 800be72:	4208      	tst	r0, r1
 800be74:	d17f      	bne.n	800bf76 <HAL_ADC_PollForConversion+0x186>
 800be76:	68d0      	ldr	r0, [r2, #12]
 800be78:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 800be7c:	4208      	tst	r0, r1
 800be7e:	bf14      	ite	ne
 800be80:	2129      	movne	r1, #41	; 0x29
 800be82:	2114      	moveq	r1, #20
 800be84:	e009      	b.n	800be9a <HAL_ADC_PollForConversion+0xaa>
 800be86:	6910      	ldr	r0, [r2, #16]
 800be88:	493e      	ldr	r1, [pc, #248]	; (800bf84 <HAL_ADC_PollForConversion+0x194>)
 800be8a:	4208      	tst	r0, r1
 800be8c:	d122      	bne.n	800bed4 <HAL_ADC_PollForConversion+0xe4>
 800be8e:	68d0      	ldr	r0, [r2, #12]
 800be90:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 800be94:	4208      	tst	r0, r1
 800be96:	d11d      	bne.n	800bed4 <HAL_ADC_PollForConversion+0xe4>
 800be98:	2154      	movs	r1, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800be9a:	fb01 f808 	mul.w	r8, r1, r8
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800be9e:	9901      	ldr	r1, [sp, #4]
 800bea0:	4588      	cmp	r8, r1
 800bea2:	d9bf      	bls.n	800be24 <HAL_ADC_PollForConversion+0x34>
 800bea4:	1c71      	adds	r1, r6, #1
 800bea6:	d032      	beq.n	800bf0e <HAL_ADC_PollForConversion+0x11e>
 800bea8:	b136      	cbz	r6, 800beb8 <HAL_ADC_PollForConversion+0xc8>
 800beaa:	e038      	b.n	800bf1e <HAL_ADC_PollForConversion+0x12e>
      Conversion_Timeout_CPU_cycles ++;
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	3301      	adds	r3, #1
 800beb0:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800beb2:	9b01      	ldr	r3, [sp, #4]
 800beb4:	4543      	cmp	r3, r8
 800beb6:	d230      	bcs.n	800bf1a <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	4543      	cmp	r3, r8
 800bebc:	d2f6      	bcs.n	800beac <HAL_ADC_PollForConversion+0xbc>
            __HAL_UNLOCK(hadc);
 800bebe:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 800bec0:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800bec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800bec4:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800bec8:	f043 0304 	orr.w	r3, r3, #4
 800becc:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800bece:	b002      	add	sp, #8
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800bed4:	6910      	ldr	r0, [r2, #16]
 800bed6:	492c      	ldr	r1, [pc, #176]	; (800bf88 <HAL_ADC_PollForConversion+0x198>)
 800bed8:	4208      	tst	r0, r1
 800beda:	d131      	bne.n	800bf40 <HAL_ADC_PollForConversion+0x150>
 800bedc:	68d0      	ldr	r0, [r2, #12]
 800bede:	4208      	tst	r0, r1
 800bee0:	bf14      	ite	ne
 800bee2:	21fc      	movne	r1, #252	; 0xfc
 800bee4:	2154      	moveq	r1, #84	; 0x54
 800bee6:	e7d8      	b.n	800be9a <HAL_ADC_PollForConversion+0xaa>
    return HAL_ERROR;
 800bee8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800beea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800beec:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bef0:	f043 0320 	orr.w	r3, r3, #32
 800bef4:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800bef6:	b002      	add	sp, #8
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	0790      	lsls	r0, r2, #30
 800bf00:	d490      	bmi.n	800be24 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf02:	b9fe      	cbnz	r6, 800bf44 <HAL_ADC_PollForConversion+0x154>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	f012 0202 	ands.w	r2, r2, #2
 800bf0a:	d186      	bne.n	800be1a <HAL_ADC_PollForConversion+0x2a>
 800bf0c:	e7d8      	b.n	800bec0 <HAL_ADC_PollForConversion+0xd0>
      Conversion_Timeout_CPU_cycles ++;
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	3301      	adds	r3, #1
 800bf12:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	4598      	cmp	r8, r3
 800bf18:	d8f9      	bhi.n	800bf0e <HAL_ADC_PollForConversion+0x11e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	e782      	b.n	800be24 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800bf1e:	f7ff fe51 	bl	800bbc4 <HAL_GetTick>
 800bf22:	1bc3      	subs	r3, r0, r7
 800bf24:	429e      	cmp	r6, r3
 800bf26:	d202      	bcs.n	800bf2e <HAL_ADC_PollForConversion+0x13e>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800bf28:	9b01      	ldr	r3, [sp, #4]
 800bf2a:	4598      	cmp	r8, r3
 800bf2c:	d8c7      	bhi.n	800bebe <HAL_ADC_PollForConversion+0xce>
      Conversion_Timeout_CPU_cycles ++;
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	3301      	adds	r3, #1
 800bf32:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	4598      	cmp	r8, r3
 800bf38:	d8f1      	bhi.n	800bf1e <HAL_ADC_PollForConversion+0x12e>
 800bf3a:	682a      	ldr	r2, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	e771      	b.n	800be24 <HAL_ADC_PollForConversion+0x34>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800bf40:	21fc      	movs	r1, #252	; 0xfc
 800bf42:	e7aa      	b.n	800be9a <HAL_ADC_PollForConversion+0xaa>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf44:	f7ff fe3e 	bl	800bbc4 <HAL_GetTick>
 800bf48:	1bc3      	subs	r3, r0, r7
 800bf4a:	42b3      	cmp	r3, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800bf4c:	682b      	ldr	r3, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf4e:	f67f af64 	bls.w	800be1a <HAL_ADC_PollForConversion+0x2a>
 800bf52:	e7d7      	b.n	800bf04 <HAL_ADC_PollForConversion+0x114>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800bf54:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800bf56:	2800      	cmp	r0, #0
 800bf58:	f47f af72 	bne.w	800be40 <HAL_ADC_PollForConversion+0x50>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bf5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf62:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf66:	04db      	lsls	r3, r3, #19
 800bf68:	f53f af6a 	bmi.w	800be40 <HAL_ADC_PollForConversion+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	62ab      	str	r3, [r5, #40]	; 0x28
 800bf74:	e765      	b.n	800be42 <HAL_ADC_PollForConversion+0x52>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800bf76:	2129      	movs	r1, #41	; 0x29
 800bf78:	e78f      	b.n	800be9a <HAL_ADC_PollForConversion+0xaa>
 800bf7a:	bf00      	nop
 800bf7c:	20000010 	.word	0x20000010
 800bf80:	24924924 	.word	0x24924924
 800bf84:	12492492 	.word	0x12492492
 800bf88:	00249249 	.word	0x00249249

0800bf8c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800bf8c:	6803      	ldr	r3, [r0, #0]
 800bf8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop

0800bf94 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800bf94:	2300      	movs	r3, #0
{ 
 800bf96:	b530      	push	{r4, r5, lr}
 800bf98:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800bf9a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800bf9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d074      	beq.n	800c08e <HAL_ADC_ConfigChannel+0xfa>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800bfaa:	684b      	ldr	r3, [r1, #4]
 800bfac:	4602      	mov	r2, r0
 800bfae:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800bfb0:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 800bfb2:	d932      	bls.n	800c01a <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 800bfb4:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800bfb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800bfba:	d84e      	bhi.n	800c05a <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800bfbc:	f04f 0c1f 	mov.w	ip, #31
 800bfc0:	6808      	ldr	r0, [r1, #0]
 800bfc2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800bfc4:	3b23      	subs	r3, #35	; 0x23
 800bfc6:	fa00 fe03 	lsl.w	lr, r0, r3
 800bfca:	fa0c f303 	lsl.w	r3, ip, r3
 800bfce:	ea25 0303 	bic.w	r3, r5, r3
 800bfd2:	ea43 030e 	orr.w	r3, r3, lr
 800bfd6:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800bfd8:	2809      	cmp	r0, #9
 800bfda:	d930      	bls.n	800c03e <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800bfdc:	f04f 0c07 	mov.w	ip, #7
 800bfe0:	688d      	ldr	r5, [r1, #8]
 800bfe2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800bfe6:	68e3      	ldr	r3, [r4, #12]
 800bfe8:	391e      	subs	r1, #30
 800bfea:	408d      	lsls	r5, r1
 800bfec:	fa0c f101 	lsl.w	r1, ip, r1
 800bff0:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800bff4:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800bff8:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800bffa:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800bffc:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800bffe:	d844      	bhi.n	800c08a <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 800c000:	4b2e      	ldr	r3, [pc, #184]	; (800c0bc <HAL_ADC_ConfigChannel+0x128>)
 800c002:	429c      	cmp	r4, r3
 800c004:	d038      	beq.n	800c078 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 800c006:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c008:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800c00a:	f043 0320 	orr.w	r3, r3, #32
 800c00e:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800c010:	2300      	movs	r3, #0
 800c012:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800c016:	b003      	add	sp, #12
 800c018:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c01a:	f04f 0c1f 	mov.w	ip, #31
 800c01e:	6808      	ldr	r0, [r1, #0]
 800c020:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c024:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800c026:	3b05      	subs	r3, #5
 800c028:	fa00 fe03 	lsl.w	lr, r0, r3
 800c02c:	fa0c f303 	lsl.w	r3, ip, r3
 800c030:	ea25 0303 	bic.w	r3, r5, r3
 800c034:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c038:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c03a:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c03c:	d8ce      	bhi.n	800bfdc <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c03e:	2507      	movs	r5, #7
 800c040:	6889      	ldr	r1, [r1, #8]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c048:	4081      	lsls	r1, r0
 800c04a:	fa05 f000 	lsl.w	r0, r5, r0
 800c04e:	ea23 0300 	bic.w	r3, r3, r0
 800c052:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c054:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c056:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c058:	e7da      	b.n	800c010 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c05a:	f04f 0c1f 	mov.w	ip, #31
 800c05e:	6808      	ldr	r0, [r1, #0]
 800c060:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800c062:	3b41      	subs	r3, #65	; 0x41
 800c064:	fa00 fe03 	lsl.w	lr, r0, r3
 800c068:	fa0c f303 	lsl.w	r3, ip, r3
 800c06c:	ea25 0303 	bic.w	r3, r5, r3
 800c070:	ea43 030e 	orr.w	r3, r3, lr
 800c074:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c076:	e7af      	b.n	800bfd8 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	d405      	bmi.n	800c08a <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c07e:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c080:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c086:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c088:	d004      	beq.n	800c094 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c08a:	2000      	movs	r0, #0
 800c08c:	e7c0      	b.n	800c010 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 800c08e:	2002      	movs	r0, #2
}
 800c090:	b003      	add	sp, #12
 800c092:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <HAL_ADC_ConfigChannel+0x12c>)
 800c096:	490b      	ldr	r1, [pc, #44]	; (800c0c4 <HAL_ADC_ConfigChannel+0x130>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	fba1 1303 	umull	r1, r3, r1, r3
 800c09e:	0c9b      	lsrs	r3, r3, #18
 800c0a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0ed      	beq.n	800c08a <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1f9      	bne.n	800c0ae <HAL_ADC_ConfigChannel+0x11a>
 800c0ba:	e7e6      	b.n	800c08a <HAL_ADC_ConfigChannel+0xf6>
 800c0bc:	40012400 	.word	0x40012400
 800c0c0:	20000010 	.word	0x20000010
 800c0c4:	431bde83 	.word	0x431bde83

0800c0c8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800c0c8:	2300      	movs	r3, #0
{
 800c0ca:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c0cc:	6802      	ldr	r2, [r0, #0]
{
 800c0ce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800c0d0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c0d2:	6893      	ldr	r3, [r2, #8]
 800c0d4:	07d9      	lsls	r1, r3, #31
 800c0d6:	d427      	bmi.n	800c128 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c0d8:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <ADC_Enable+0x80>)
 800c0da:	4604      	mov	r4, r0
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	481b      	ldr	r0, [pc, #108]	; (800c14c <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 800c0e0:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c0e2:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800c0e6:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c0ea:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800c0ec:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c0ee:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	b12b      	cbz	r3, 800c100 <ADC_Enable+0x38>
      wait_loop_index--;
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1f9      	bne.n	800c0f4 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 800c100:	f7ff fd60 	bl	800bbc4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c104:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800c106:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	07da      	lsls	r2, r3, #31
 800c10c:	d40c      	bmi.n	800c128 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c10e:	f7ff fd59 	bl	800bbc4 <HAL_GetTick>
 800c112:	1b43      	subs	r3, r0, r5
 800c114:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800c116:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c118:	d903      	bls.n	800c122 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800c11a:	689a      	ldr	r2, [r3, #8]
 800c11c:	f012 0201 	ands.w	r2, r2, #1
 800c120:	d005      	beq.n	800c12e <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	07db      	lsls	r3, r3, #31
 800c126:	d5f2      	bpl.n	800c10e <ADC_Enable+0x46>
  return HAL_OK;
 800c128:	2000      	movs	r0, #0
}
 800c12a:	b003      	add	sp, #12
 800c12c:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 800c12e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800c132:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c136:	f043 0310 	orr.w	r3, r3, #16
 800c13a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c13c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c13e:	4303      	orrs	r3, r0
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800c142:	b003      	add	sp, #12
 800c144:	bd30      	pop	{r4, r5, pc}
 800c146:	bf00      	nop
 800c148:	20000010 	.word	0x20000010
 800c14c:	431bde83 	.word	0x431bde83

0800c150 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800c150:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c154:	2b01      	cmp	r3, #1
 800c156:	d038      	beq.n	800c1ca <HAL_ADC_Start+0x7a>
 800c158:	2301      	movs	r3, #1
{
 800c15a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800c15c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800c160:	4604      	mov	r4, r0
 800c162:	f7ff ffb1 	bl	800c0c8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800c166:	bb60      	cbnz	r0, 800c1c2 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 800c168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800c16a:	6822      	ldr	r2, [r4, #0]
 800c16c:	4929      	ldr	r1, [pc, #164]	; (800c214 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800c16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c172:	f023 0301 	bic.w	r3, r3, #1
 800c176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800c17a:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 800c17c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800c17e:	d026      	beq.n	800c1ce <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c180:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c182:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c186:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c188:	6853      	ldr	r3, [r2, #4]
 800c18a:	0559      	lsls	r1, r3, #21
 800c18c:	d42b      	bmi.n	800c1e6 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c18e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800c190:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c192:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c196:	bf18      	it	ne
 800c198:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800c19a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c19e:	bf18      	it	ne
 800c1a0:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800c1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800c1a6:	f06f 0302 	mvn.w	r3, #2
 800c1aa:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800c1ac:	6893      	ldr	r3, [r2, #8]
 800c1ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800c1b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c1b6:	d01d      	beq.n	800c1f4 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800c1b8:	6893      	ldr	r3, [r2, #8]
 800c1ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1be:	6093      	str	r3, [r2, #8]
}
 800c1c0:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800c1c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800c1ca:	2002      	movs	r0, #2
}
 800c1cc:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800c1ce:	4b12      	ldr	r3, [pc, #72]	; (800c218 <HAL_ADC_Start+0xc8>)
 800c1d0:	6859      	ldr	r1, [r3, #4]
 800c1d2:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800c1d6:	d0d3      	beq.n	800c180 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c1d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c1da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c1de:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	055b      	lsls	r3, r3, #21
 800c1e4:	d5d3      	bpl.n	800c18e <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c1e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c1ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c1f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1f2:	e7cc      	b.n	800c18e <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800c1f4:	4b07      	ldr	r3, [pc, #28]	; (800c214 <HAL_ADC_Start+0xc4>)
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d004      	beq.n	800c204 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800c1fa:	6893      	ldr	r3, [r2, #8]
 800c1fc:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800c200:	6093      	str	r3, [r2, #8]
}
 800c202:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800c204:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c208:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800c20a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800c20e:	d1d3      	bne.n	800c1b8 <HAL_ADC_Start+0x68>
 800c210:	e7f3      	b.n	800c1fa <HAL_ADC_Start+0xaa>
 800c212:	bf00      	nop
 800c214:	40012800 	.word	0x40012800
 800c218:	40012400 	.word	0x40012400

0800c21c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c21c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c220:	4906      	ldr	r1, [pc, #24]	; (800c23c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c222:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c224:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c22a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c22e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800c238:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c23a:	4770      	bx	lr
 800c23c:	e000ed00 	.word	0xe000ed00

0800c240 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c240:	4b1c      	ldr	r3, [pc, #112]	; (800c2b4 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c242:	b500      	push	{lr}
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c24a:	f1c3 0e07 	rsb	lr, r3, #7
 800c24e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c252:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c256:	bf28      	it	cs
 800c258:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c25c:	f1bc 0f06 	cmp.w	ip, #6
 800c260:	d91b      	bls.n	800c29a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c262:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c266:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c268:	fa0c fc03 	lsl.w	ip, ip, r3
 800c26c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c270:	f04f 3cff 	mov.w	ip, #4294967295
 800c274:	fa0c fc0e 	lsl.w	ip, ip, lr
 800c278:	ea21 010c 	bic.w	r1, r1, ip
 800c27c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800c27e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c280:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800c284:	db0c      	blt.n	800c2a0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c286:	0109      	lsls	r1, r1, #4
 800c288:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800c28c:	b2c9      	uxtb	r1, r1
 800c28e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800c292:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800c296:	f85d fb04 	ldr.w	pc, [sp], #4
 800c29a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c29c:	4613      	mov	r3, r2
 800c29e:	e7e7      	b.n	800c270 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <HAL_NVIC_SetPriority+0x78>)
 800c2a2:	f000 000f 	and.w	r0, r0, #15
 800c2a6:	0109      	lsls	r1, r1, #4
 800c2a8:	b2c9      	uxtb	r1, r1
 800c2aa:	4403      	add	r3, r0
 800c2ac:	7619      	strb	r1, [r3, #24]
 800c2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2b2:	bf00      	nop
 800c2b4:	e000ed00 	.word	0xe000ed00
 800c2b8:	e000ecfc 	.word	0xe000ecfc

0800c2bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	db07      	blt.n	800c2d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f000 011f 	and.w	r1, r0, #31
 800c2c6:	4a03      	ldr	r2, [pc, #12]	; (800c2d4 <HAL_NVIC_EnableIRQ+0x18>)
 800c2c8:	0940      	lsrs	r0, r0, #5
 800c2ca:	408b      	lsls	r3, r1
 800c2cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	e000e100 	.word	0xe000e100

0800c2d8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c2d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c2dc:	4905      	ldr	r1, [pc, #20]	; (800c2f4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c2de:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c2e0:	68ca      	ldr	r2, [r1, #12]
 800c2e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	60cb      	str	r3, [r1, #12]
 800c2ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c2ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800c2f0:	e7fd      	b.n	800c2ee <HAL_NVIC_SystemReset+0x16>
 800c2f2:	bf00      	nop
 800c2f4:	e000ed00 	.word	0xe000ed00
 800c2f8:	05fa0004 	.word	0x05fa0004

0800c2fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c2fc:	3801      	subs	r0, #1
 800c2fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800c302:	d20f      	bcs.n	800c324 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c304:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c308:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c30c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c30e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c310:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c312:	4c05      	ldr	r4, [pc, #20]	; (800c328 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c314:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c316:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c31a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c31c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800c31e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c320:	6119      	str	r1, [r3, #16]
 800c322:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800c324:	2001      	movs	r0, #1
 800c326:	4770      	bx	lr
 800c328:	e000ed00 	.word	0xe000ed00

0800c32c <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c32c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800c330:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c332:	2a02      	cmp	r2, #2
 800c334:	d006      	beq.n	800c344 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c336:	2204      	movs	r2, #4
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c33a:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 800c33c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800c33e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800c342:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800c344:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c348:	681a      	ldr	r2, [r3, #0]
  return status; 
 800c34a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c34c:	6811      	ldr	r1, [r2, #0]
 800c34e:	f021 010e 	bic.w	r1, r1, #14
 800c352:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800c354:	6811      	ldr	r1, [r2, #0]
 800c356:	f021 0101 	bic.w	r1, r1, #1
 800c35a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800c35c:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	; 0x3c
 800c360:	fa0c f202 	lsl.w	r2, ip, r2
 800c364:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 800c366:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800c368:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800c36c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop

0800c374 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c374:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 800c378:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c37a:	2a02      	cmp	r2, #2
 800c37c:	d003      	beq.n	800c386 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c37e:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 800c380:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c382:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800c384:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c386:	6802      	ldr	r2, [r0, #0]
{  
 800c388:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c38a:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c38c:	481c      	ldr	r0, [pc, #112]	; (800c400 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c38e:	f021 010e 	bic.w	r1, r1, #14
 800c392:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800c394:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c396:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 800c398:	f021 0101 	bic.w	r1, r1, #1
 800c39c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c39e:	d024      	beq.n	800c3ea <HAL_DMA_Abort_IT+0x76>
 800c3a0:	4918      	ldr	r1, [pc, #96]	; (800c404 <HAL_DMA_Abort_IT+0x90>)
 800c3a2:	428a      	cmp	r2, r1
 800c3a4:	d01d      	beq.n	800c3e2 <HAL_DMA_Abort_IT+0x6e>
 800c3a6:	3114      	adds	r1, #20
 800c3a8:	428a      	cmp	r2, r1
 800c3aa:	d020      	beq.n	800c3ee <HAL_DMA_Abort_IT+0x7a>
 800c3ac:	3114      	adds	r1, #20
 800c3ae:	428a      	cmp	r2, r1
 800c3b0:	d020      	beq.n	800c3f4 <HAL_DMA_Abort_IT+0x80>
 800c3b2:	3114      	adds	r1, #20
 800c3b4:	428a      	cmp	r2, r1
 800c3b6:	d020      	beq.n	800c3fa <HAL_DMA_Abort_IT+0x86>
 800c3b8:	3114      	adds	r1, #20
 800c3ba:	428a      	cmp	r2, r1
 800c3bc:	bf0c      	ite	eq
 800c3be:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800c3c2:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800c3c6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 800c3c8:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c3ca:	480f      	ldr	r0, [pc, #60]	; (800c408 <HAL_DMA_Abort_IT+0x94>)
 800c3cc:	6042      	str	r2, [r0, #4]
    if(hdma->XferAbortCallback != NULL)
 800c3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800c3d0:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800c3d4:	f883 4020 	strb.w	r4, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800c3d8:	b12a      	cbz	r2, 800c3e6 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 800c3da:	4618      	mov	r0, r3
 800c3dc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800c3de:	4620      	mov	r0, r4
}
 800c3e0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c3e2:	2210      	movs	r2, #16
 800c3e4:	e7ef      	b.n	800c3c6 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800c3e6:	4610      	mov	r0, r2
}
 800c3e8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	e7eb      	b.n	800c3c6 <HAL_DMA_Abort_IT+0x52>
 800c3ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3f2:	e7e8      	b.n	800c3c6 <HAL_DMA_Abort_IT+0x52>
 800c3f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c3f8:	e7e5      	b.n	800c3c6 <HAL_DMA_Abort_IT+0x52>
 800c3fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c3fe:	e7e2      	b.n	800c3c6 <HAL_DMA_Abort_IT+0x52>
 800c400:	40020008 	.word	0x40020008
 800c404:	4002001c 	.word	0x4002001c
 800c408:	40020000 	.word	0x40020000

0800c40c <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c40c:	4b06      	ldr	r3, [pc, #24]	; (800c428 <HAL_FLASH_Unlock+0x1c>)
 800c40e:	6918      	ldr	r0, [r3, #16]
 800c410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c414:	d006      	beq.n	800c424 <HAL_FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c416:	4905      	ldr	r1, [pc, #20]	; (800c42c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c418:	4a05      	ldr	r2, [pc, #20]	; (800c430 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c41a:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c41c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c41e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800c420:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
}
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	40022000 	.word	0x40022000
 800c42c:	45670123 	.word	0x45670123
 800c430:	cdef89ab 	.word	0xcdef89ab

0800c434 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c434:	4a03      	ldr	r2, [pc, #12]	; (800c444 <HAL_FLASH_Lock+0x10>)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
}
 800c436:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c438:	6913      	ldr	r3, [r2, #16]
 800c43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43e:	6113      	str	r3, [r2, #16]
}
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	40022000 	.word	0x40022000

0800c448 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4604      	mov	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800c44c:	f7ff fbba 	bl	800bbc4 <HAL_GetTick>
 800c450:	4605      	mov	r5, r0
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c452:	4e26      	ldr	r6, [pc, #152]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c454:	1c60      	adds	r0, r4, #1
 800c456:	d136      	bne.n	800c4c6 <FLASH_WaitForLastOperation+0x7e>
 800c458:	4a24      	ldr	r2, [pc, #144]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c45a:	68d3      	ldr	r3, [r2, #12]
 800c45c:	07d9      	lsls	r1, r3, #31
 800c45e:	d4fc      	bmi.n	800c45a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c460:	4b22      	ldr	r3, [pc, #136]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	0696      	lsls	r6, r2, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c466:	bf44      	itt	mi
 800c468:	2220      	movmi	r2, #32
 800c46a:	60da      	strmi	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800c46c:	4b1f      	ldr	r3, [pc, #124]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	06d5      	lsls	r5, r2, #27
 800c472:	d407      	bmi.n	800c484 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800c474:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800c476:	07d4      	lsls	r4, r2, #31
 800c478:	d404      	bmi.n	800c484 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800c47a:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800c47c:	f010 0004 	ands.w	r0, r0, #4
 800c480:	d100      	bne.n	800c484 <FLASH_WaitForLastOperation+0x3c>
    return HAL_ERROR;
  }

  /* There is no error flag set */
  return HAL_OK;
}
 800c482:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800c484:	4b19      	ldr	r3, [pc, #100]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f013 0310 	ands.w	r3, r3, #16
 800c48c:	d126      	bne.n	800c4dc <FLASH_WaitForLastOperation+0x94>
 800c48e:	2104      	movs	r1, #4
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800c490:	4a16      	ldr	r2, [pc, #88]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c492:	68d2      	ldr	r2, [r2, #12]
 800c494:	0750      	lsls	r0, r2, #29
 800c496:	d505      	bpl.n	800c4a4 <FLASH_WaitForLastOperation+0x5c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800c498:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800c49a:	4915      	ldr	r1, [pc, #84]	; (800c4f0 <FLASH_WaitForLastOperation+0xa8>)
 800c49c:	69ca      	ldr	r2, [r1, #28]
 800c49e:	f042 0201 	orr.w	r2, r2, #1
 800c4a2:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800c4a4:	4a11      	ldr	r2, [pc, #68]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
 800c4a6:	69d1      	ldr	r1, [r2, #28]
 800c4a8:	07c9      	lsls	r1, r1, #31
 800c4aa:	d508      	bpl.n	800c4be <FLASH_WaitForLastOperation+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800c4ac:	4810      	ldr	r0, [pc, #64]	; (800c4f0 <FLASH_WaitForLastOperation+0xa8>)
 800c4ae:	69c1      	ldr	r1, [r0, #28]
 800c4b0:	f041 0104 	orr.w	r1, r1, #4
 800c4b4:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800c4b6:	69d1      	ldr	r1, [r2, #28]
 800c4b8:	f021 0101 	bic.w	r1, r1, #1
 800c4bc:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c4be:	4a0b      	ldr	r2, [pc, #44]	; (800c4ec <FLASH_WaitForLastOperation+0xa4>)
    return HAL_ERROR;
 800c4c0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c4c2:	60d3      	str	r3, [r2, #12]
}
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c4c6:	68f3      	ldr	r3, [r6, #12]
 800c4c8:	07db      	lsls	r3, r3, #31
 800c4ca:	d5c9      	bpl.n	800c460 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800c4cc:	b124      	cbz	r4, 800c4d8 <FLASH_WaitForLastOperation+0x90>
 800c4ce:	f7ff fb79 	bl	800bbc4 <HAL_GetTick>
 800c4d2:	1b40      	subs	r0, r0, r5
 800c4d4:	42a0      	cmp	r0, r4
 800c4d6:	d9bd      	bls.n	800c454 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800c4d8:	2003      	movs	r0, #3
}
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c4dc:	4804      	ldr	r0, [pc, #16]	; (800c4f0 <FLASH_WaitForLastOperation+0xa8>)
 800c4de:	2114      	movs	r1, #20
 800c4e0:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800c4e2:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c4e4:	f042 0202 	orr.w	r2, r2, #2
 800c4e8:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800c4ea:	e7d1      	b.n	800c490 <FLASH_WaitForLastOperation+0x48>
 800c4ec:	40022000 	.word	0x40022000
 800c4f0:	20000a38 	.word	0x20000a38

0800c4f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c4f8:	4e2d      	ldr	r6, [pc, #180]	; (800c5b0 <HAL_FLASHEx_Erase+0xbc>)
 800c4fa:	7e33      	ldrb	r3, [r6, #24]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d054      	beq.n	800c5aa <HAL_FLASHEx_Erase+0xb6>
 800c500:	2301      	movs	r3, #1
 800c502:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c504:	6803      	ldr	r3, [r0, #0]
 800c506:	4681      	mov	r9, r0
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d031      	beq.n	800c570 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800c50c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c510:	4688      	mov	r8, r1
 800c512:	f7ff ff99 	bl	800c448 <FLASH_WaitForLastOperation>
 800c516:	4607      	mov	r7, r0
 800c518:	bb78      	cbnz	r0, 800c57a <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800c51a:	f04f 33ff 	mov.w	r3, #4294967295
 800c51e:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800c522:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 800c526:	eb05 2383 	add.w	r3, r5, r3, lsl #10
 800c52a:	429d      	cmp	r5, r3
 800c52c:	d225      	bcs.n	800c57a <HAL_FLASHEx_Erase+0x86>
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c52e:	4c21      	ldr	r4, [pc, #132]	; (800c5b4 <HAL_FLASHEx_Erase+0xc0>)
 800c530:	e007      	b.n	800c542 <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 800c532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800c536:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 800c53a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800c53e:	42ab      	cmp	r3, r5
 800c540:	d91c      	bls.n	800c57c <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c542:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c544:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c546:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c54a:	f043 0302 	orr.w	r3, r3, #2
 800c54e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800c550:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c558:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c55a:	f7ff ff75 	bl	800c448 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	f023 0302 	bic.w	r3, r3, #2
 800c564:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800c566:	2800      	cmp	r0, #0
 800c568:	d0e3      	beq.n	800c532 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 800c56a:	f8c8 5000 	str.w	r5, [r8]
            break;
 800c56e:	e005      	b.n	800c57c <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800c570:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c574:	f7ff ff68 	bl	800c448 <FLASH_WaitForLastOperation>
 800c578:	b120      	cbz	r0, 800c584 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c57a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800c57c:	2300      	movs	r3, #0
 800c57e:	7633      	strb	r3, [r6, #24]
}
 800c580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800c584:	4c0b      	ldr	r4, [pc, #44]	; (800c5b4 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c586:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800c588:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c58a:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800c58e:	f043 0304 	orr.w	r3, r3, #4
 800c592:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c59a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c59c:	f7ff ff54 	bl	800c448 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	f023 0304 	bic.w	r3, r3, #4
 800c5a6:	6123      	str	r3, [r4, #16]
 800c5a8:	e7e8      	b.n	800c57c <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 800c5aa:	2002      	movs	r0, #2
}
 800c5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b0:	20000a38 	.word	0x20000a38
 800c5b4:	40022000 	.word	0x40022000

0800c5b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c5bc:	680e      	ldr	r6, [r1, #0]
{
 800c5be:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c5c0:	2e00      	cmp	r6, #0
 800c5c2:	f000 80b5 	beq.w	800c730 <HAL_GPIO_Init+0x178>
 800c5c6:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c5c8:	4f7a      	ldr	r7, [pc, #488]	; (800c7b4 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 800c5ca:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 800c5cc:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800c5ce:	4d7a      	ldr	r5, [pc, #488]	; (800c7b8 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 800c5d0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800c7bc <HAL_GPIO_Init+0x204>
 800c5d4:	e006      	b.n	800c5e4 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800c5d6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c5d8:	fa36 f403 	lsrs.w	r4, r6, r3
 800c5dc:	f102 0204 	add.w	r2, r2, #4
 800c5e0:	f000 80a6 	beq.w	800c730 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 800c5e4:	2401      	movs	r4, #1
 800c5e6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800c5e8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c5ec:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 800c5f0:	d1f1      	bne.n	800c5d6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800c5f2:	684e      	ldr	r6, [r1, #4]
 800c5f4:	2e12      	cmp	r6, #18
 800c5f6:	f200 809e 	bhi.w	800c736 <HAL_GPIO_Init+0x17e>
 800c5fa:	2e12      	cmp	r6, #18
 800c5fc:	d81a      	bhi.n	800c634 <HAL_GPIO_Init+0x7c>
 800c5fe:	e8df f006 	tbb	[pc, r6]
 800c602:	b9a7      	.short	0xb9a7
 800c604:	1919ceb5 	.word	0x1919ceb5
 800c608:	19191919 	.word	0x19191919
 800c60c:	19191919 	.word	0x19191919
 800c610:	b1191919 	.word	0xb1191919
 800c614:	bc          	.byte	0xbc
 800c615:	00          	.byte	0x00
 800c616:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800c7c0 <HAL_GPIO_Init+0x208>
 800c61a:	4576      	cmp	r6, lr
 800c61c:	f000 8098 	beq.w	800c750 <HAL_GPIO_Init+0x198>
 800c620:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 800c624:	4576      	cmp	r6, lr
 800c626:	f000 8093 	beq.w	800c750 <HAL_GPIO_Init+0x198>
 800c62a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800c62e:	4576      	cmp	r6, lr
 800c630:	f000 808e 	beq.w	800c750 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800c634:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800c638:	bf9c      	itt	ls
 800c63a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800c63c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800c63e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800c642:	bf84      	itt	hi
 800c644:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800c648:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800c64c:	f8de 4000 	ldr.w	r4, [lr]
 800c650:	fa0a f90b 	lsl.w	r9, sl, fp
 800c654:	fa06 fb0b 	lsl.w	fp, r6, fp
 800c658:	ea24 040b 	bic.w	r4, r4, fp
 800c65c:	ea44 0409 	orr.w	r4, r4, r9
 800c660:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c664:	684c      	ldr	r4, [r1, #4]
 800c666:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800c66a:	d079      	beq.n	800c760 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c66c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800c670:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c674:	f04e 0e01 	orr.w	lr, lr, #1
 800c678:	f8c7 e018 	str.w	lr, [r7, #24]
 800c67c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800c680:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c684:	f00e 0e01 	and.w	lr, lr, #1
 800c688:	f8cd e004 	str.w	lr, [sp, #4]
 800c68c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800c690:	f023 0e03 	bic.w	lr, r3, #3
 800c694:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 800c698:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800c69c:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800c6a0:	fa06 f609 	lsl.w	r6, r6, r9
 800c6a4:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800c6a8:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c7c4 <HAL_GPIO_Init+0x20c>
 800c6ac:	4558      	cmp	r0, fp
 800c6ae:	d013      	beq.n	800c6d8 <HAL_GPIO_Init+0x120>
 800c6b0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800c6b4:	4558      	cmp	r0, fp
 800c6b6:	d06b      	beq.n	800c790 <HAL_GPIO_Init+0x1d8>
 800c6b8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800c7c8 <HAL_GPIO_Init+0x210>
 800c6bc:	4558      	cmp	r0, fp
 800c6be:	d060      	beq.n	800c782 <HAL_GPIO_Init+0x1ca>
 800c6c0:	f8df b108 	ldr.w	fp, [pc, #264]	; 800c7cc <HAL_GPIO_Init+0x214>
 800c6c4:	4558      	cmp	r0, fp
 800c6c6:	bf0c      	ite	eq
 800c6c8:	f04f 0b03 	moveq.w	fp, #3
 800c6cc:	f04f 0b04 	movne.w	fp, #4
 800c6d0:	fa0b f909 	lsl.w	r9, fp, r9
 800c6d4:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800c6d8:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800c6dc:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c6de:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800c6e2:	bf14      	ite	ne
 800c6e4:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800c6e8:	ea26 060c 	biceq.w	r6, r6, ip
 800c6ec:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800c6ee:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c6f0:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800c6f4:	bf14      	ite	ne
 800c6f6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800c6fa:	ea26 060c 	biceq.w	r6, r6, ip
 800c6fe:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800c700:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c702:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800c706:	bf14      	ite	ne
 800c708:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800c70c:	ea26 060c 	biceq.w	r6, r6, ip
 800c710:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c712:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800c716:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c718:	d01f      	beq.n	800c75a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->IMR, iocurrent);
 800c71a:	ea44 040c 	orr.w	r4, r4, ip
 800c71e:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c720:	680e      	ldr	r6, [r1, #0]
	position++;
 800c722:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c724:	fa36 f403 	lsrs.w	r4, r6, r3
 800c728:	f102 0204 	add.w	r2, r2, #4
 800c72c:	f47f af5a 	bne.w	800c5e4 <HAL_GPIO_Init+0x2c>
  }
}
 800c730:	b003      	add	sp, #12
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800c736:	4546      	cmp	r6, r8
 800c738:	d00a      	beq.n	800c750 <HAL_GPIO_Init+0x198>
 800c73a:	f67f af6c 	bls.w	800c616 <HAL_GPIO_Init+0x5e>
 800c73e:	f8df e090 	ldr.w	lr, [pc, #144]	; 800c7d0 <HAL_GPIO_Init+0x218>
 800c742:	4576      	cmp	r6, lr
 800c744:	d004      	beq.n	800c750 <HAL_GPIO_Init+0x198>
 800c746:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800c74a:	4576      	cmp	r6, lr
 800c74c:	f47f af72 	bne.w	800c634 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800c750:	688e      	ldr	r6, [r1, #8]
 800c752:	bb3e      	cbnz	r6, 800c7a4 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800c754:	f04f 0a04 	mov.w	sl, #4
 800c758:	e76c      	b.n	800c634 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800c75a:	ea24 040c 	bic.w	r4, r4, ip
 800c75e:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c760:	680e      	ldr	r6, [r1, #0]
 800c762:	e738      	b.n	800c5d6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800c764:	68cc      	ldr	r4, [r1, #12]
 800c766:	f104 0a04 	add.w	sl, r4, #4
          break;
 800c76a:	e763      	b.n	800c634 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800c76c:	68cc      	ldr	r4, [r1, #12]
 800c76e:	f104 0a08 	add.w	sl, r4, #8
          break;
 800c772:	e75f      	b.n	800c634 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800c774:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800c778:	e75c      	b.n	800c634 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800c77a:	68cc      	ldr	r4, [r1, #12]
 800c77c:	f104 0a0c 	add.w	sl, r4, #12
          break;
 800c780:	e758      	b.n	800c634 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800c782:	f04f 0b02 	mov.w	fp, #2
 800c786:	fa0b f909 	lsl.w	r9, fp, r9
 800c78a:	ea46 0609 	orr.w	r6, r6, r9
 800c78e:	e7a3      	b.n	800c6d8 <HAL_GPIO_Init+0x120>
 800c790:	f04f 0b01 	mov.w	fp, #1
 800c794:	fa0b f909 	lsl.w	r9, fp, r9
 800c798:	ea46 0609 	orr.w	r6, r6, r9
 800c79c:	e79c      	b.n	800c6d8 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 800c79e:	f04f 0a00 	mov.w	sl, #0
 800c7a2:	e747      	b.n	800c634 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800c7a4:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800c7a6:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800c7aa:	bf0c      	ite	eq
 800c7ac:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800c7ae:	6144      	strne	r4, [r0, #20]
 800c7b0:	e740      	b.n	800c634 <HAL_GPIO_Init+0x7c>
 800c7b2:	bf00      	nop
 800c7b4:	40021000 	.word	0x40021000
 800c7b8:	40010400 	.word	0x40010400
 800c7bc:	10220000 	.word	0x10220000
 800c7c0:	10120000 	.word	0x10120000
 800c7c4:	40010800 	.word	0x40010800
 800c7c8:	40011000 	.word	0x40011000
 800c7cc:	40011400 	.word	0x40011400
 800c7d0:	10310000 	.word	0x10310000

0800c7d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c7d4:	6883      	ldr	r3, [r0, #8]
 800c7d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800c7d8:	bf14      	ite	ne
 800c7da:	2001      	movne	r0, #1
 800c7dc:	2000      	moveq	r0, #0
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c7e0:	b902      	cbnz	r2, 800c7e4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800c7e2:	0409      	lsls	r1, r1, #16
 800c7e4:	6101      	str	r1, [r0, #16]
  }
}
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f000 81b6 	beq.w	800cb5a <HAL_RCC_OscConfig+0x372>
{
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7f2:	6803      	ldr	r3, [r0, #0]
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	07dd      	lsls	r5, r3, #31
{
 800c7f8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7fa:	d535      	bpl.n	800c868 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7fc:	499a      	ldr	r1, [pc, #616]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c7fe:	684a      	ldr	r2, [r1, #4]
 800c800:	f002 020c 	and.w	r2, r2, #12
 800c804:	2a04      	cmp	r2, #4
 800c806:	f000 80ef 	beq.w	800c9e8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c80a:	684a      	ldr	r2, [r1, #4]
 800c80c:	f002 020c 	and.w	r2, r2, #12
 800c810:	2a08      	cmp	r2, #8
 800c812:	f000 80e5 	beq.w	800c9e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c81c:	d010      	beq.n	800c840 <HAL_RCC_OscConfig+0x58>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f000 810c 	beq.w	800ca3c <HAL_RCC_OscConfig+0x254>
 800c824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c828:	f000 8182 	beq.w	800cb30 <HAL_RCC_OscConfig+0x348>
 800c82c:	4b8e      	ldr	r3, [pc, #568]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c834:	601a      	str	r2, [r3, #0]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	e004      	b.n	800c84a <HAL_RCC_OscConfig+0x62>
 800c840:	4a89      	ldr	r2, [pc, #548]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c842:	6813      	ldr	r3, [r2, #0]
 800c844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c84a:	f7ff f9bb 	bl	800bbc4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c84e:	4e86      	ldr	r6, [pc, #536]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800c850:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c852:	e005      	b.n	800c860 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c854:	f7ff f9b6 	bl	800bbc4 <HAL_GetTick>
 800c858:	1b40      	subs	r0, r0, r5
 800c85a:	2864      	cmp	r0, #100	; 0x64
 800c85c:	f200 80ea 	bhi.w	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c860:	6833      	ldr	r3, [r6, #0]
 800c862:	039a      	lsls	r2, r3, #14
 800c864:	d5f6      	bpl.n	800c854 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	079f      	lsls	r7, r3, #30
 800c86a:	d528      	bpl.n	800c8be <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c86c:	4a7e      	ldr	r2, [pc, #504]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c86e:	6851      	ldr	r1, [r2, #4]
 800c870:	f011 0f0c 	tst.w	r1, #12
 800c874:	f000 808d 	beq.w	800c992 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c878:	6851      	ldr	r1, [r2, #4]
 800c87a:	f001 010c 	and.w	r1, r1, #12
 800c87e:	2908      	cmp	r1, #8
 800c880:	f000 8083 	beq.w	800c98a <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f000 8118 	beq.w	800cabc <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c88c:	2201      	movs	r2, #1
 800c88e:	4b77      	ldr	r3, [pc, #476]	; (800ca6c <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c890:	4e75      	ldr	r6, [pc, #468]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800c892:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c894:	f7ff f996 	bl	800bbc4 <HAL_GetTick>
 800c898:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c89a:	e005      	b.n	800c8a8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c89c:	f7ff f992 	bl	800bbc4 <HAL_GetTick>
 800c8a0:	1b40      	subs	r0, r0, r5
 800c8a2:	2802      	cmp	r0, #2
 800c8a4:	f200 80c6 	bhi.w	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8a8:	6833      	ldr	r3, [r6, #0]
 800c8aa:	0798      	lsls	r0, r3, #30
 800c8ac:	d5f6      	bpl.n	800c89c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8ae:	6833      	ldr	r3, [r6, #0]
 800c8b0:	6962      	ldr	r2, [r4, #20]
 800c8b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c8b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c8ba:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	071a      	lsls	r2, r3, #28
 800c8c0:	d41f      	bmi.n	800c902 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8c2:	075d      	lsls	r5, r3, #29
 800c8c4:	d542      	bpl.n	800c94c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8c6:	4b68      	ldr	r3, [pc, #416]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c8c8:	69da      	ldr	r2, [r3, #28]
 800c8ca:	00d0      	lsls	r0, r2, #3
 800c8cc:	d57d      	bpl.n	800c9ca <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800c8ce:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8d0:	4e67      	ldr	r6, [pc, #412]	; (800ca70 <HAL_RCC_OscConfig+0x288>)
 800c8d2:	6833      	ldr	r3, [r6, #0]
 800c8d4:	05d9      	lsls	r1, r3, #23
 800c8d6:	f140 809d 	bpl.w	800ca14 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8da:	68e3      	ldr	r3, [r4, #12]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	f000 80fe 	beq.w	800cade <HAL_RCC_OscConfig+0x2f6>
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80ca 	beq.w	800ca7c <HAL_RCC_OscConfig+0x294>
 800c8e8:	2b05      	cmp	r3, #5
 800c8ea:	4b5f      	ldr	r3, [pc, #380]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c8ec:	6a1a      	ldr	r2, [r3, #32]
 800c8ee:	f000 812c 	beq.w	800cb4a <HAL_RCC_OscConfig+0x362>
 800c8f2:	f022 0201 	bic.w	r2, r2, #1
 800c8f6:	621a      	str	r2, [r3, #32]
 800c8f8:	6a1a      	ldr	r2, [r3, #32]
 800c8fa:	f022 0204 	bic.w	r2, r2, #4
 800c8fe:	621a      	str	r2, [r3, #32]
 800c900:	e0f2      	b.n	800cae8 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c902:	69a3      	ldr	r3, [r4, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d04f      	beq.n	800c9a8 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 800c908:	2201      	movs	r2, #1
 800c90a:	4b58      	ldr	r3, [pc, #352]	; (800ca6c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c90c:	4e56      	ldr	r6, [pc, #344]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800c90e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800c912:	f7ff f957 	bl	800bbc4 <HAL_GetTick>
 800c916:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c918:	e005      	b.n	800c926 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c91a:	f7ff f953 	bl	800bbc4 <HAL_GetTick>
 800c91e:	1b40      	subs	r0, r0, r5
 800c920:	2802      	cmp	r0, #2
 800c922:	f200 8087 	bhi.w	800ca34 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c926:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c928:	079b      	lsls	r3, r3, #30
 800c92a:	d5f6      	bpl.n	800c91a <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c92c:	4b51      	ldr	r3, [pc, #324]	; (800ca74 <HAL_RCC_OscConfig+0x28c>)
 800c92e:	4a52      	ldr	r2, [pc, #328]	; (800ca78 <HAL_RCC_OscConfig+0x290>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	fba2 2303 	umull	r2, r3, r2, r3
 800c936:	0a5b      	lsrs	r3, r3, #9
 800c938:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800c93a:	bf00      	nop
  }
  while (Delay --);
 800c93c:	9b01      	ldr	r3, [sp, #4]
 800c93e:	1e5a      	subs	r2, r3, #1
 800c940:	9201      	str	r2, [sp, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f9      	bne.n	800c93a <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	075d      	lsls	r5, r3, #29
 800c94a:	d4bc      	bmi.n	800c8c6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c94c:	69e0      	ldr	r0, [r4, #28]
 800c94e:	b1c0      	cbz	r0, 800c982 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c950:	4d45      	ldr	r5, [pc, #276]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c952:	686b      	ldr	r3, [r5, #4]
 800c954:	f003 030c 	and.w	r3, r3, #12
 800c958:	2b08      	cmp	r3, #8
 800c95a:	f000 80d8 	beq.w	800cb0e <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800c95e:	2200      	movs	r2, #0
 800c960:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c962:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800c964:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c966:	f000 80fa 	beq.w	800cb5e <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800c96a:	f7ff f92b 	bl	800bbc4 <HAL_GetTick>
 800c96e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c970:	e004      	b.n	800c97c <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c972:	f7ff f927 	bl	800bbc4 <HAL_GetTick>
 800c976:	1b00      	subs	r0, r0, r4
 800c978:	2802      	cmp	r0, #2
 800c97a:	d85b      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	019b      	lsls	r3, r3, #6
 800c980:	d4f7      	bmi.n	800c972 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800c982:	2000      	movs	r0, #0
}
 800c984:	b002      	add	sp, #8
 800c986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c98a:	6852      	ldr	r2, [r2, #4]
 800c98c:	03d6      	lsls	r6, r2, #15
 800c98e:	f53f af79 	bmi.w	800c884 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c992:	4a35      	ldr	r2, [pc, #212]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c994:	6812      	ldr	r2, [r2, #0]
 800c996:	0795      	lsls	r5, r2, #30
 800c998:	d530      	bpl.n	800c9fc <HAL_RCC_OscConfig+0x214>
 800c99a:	6922      	ldr	r2, [r4, #16]
 800c99c:	2a01      	cmp	r2, #1
 800c99e:	d02d      	beq.n	800c9fc <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800c9a0:	2001      	movs	r0, #1
}
 800c9a2:	b002      	add	sp, #8
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800c9a8:	4a30      	ldr	r2, [pc, #192]	; (800ca6c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9aa:	4e2f      	ldr	r6, [pc, #188]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 800c9ac:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800c9b0:	f7ff f908 	bl	800bbc4 <HAL_GetTick>
 800c9b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9b6:	e004      	b.n	800c9c2 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9b8:	f7ff f904 	bl	800bbc4 <HAL_GetTick>
 800c9bc:	1b40      	subs	r0, r0, r5
 800c9be:	2802      	cmp	r0, #2
 800c9c0:	d838      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9c4:	079f      	lsls	r7, r3, #30
 800c9c6:	d4f7      	bmi.n	800c9b8 <HAL_RCC_OscConfig+0x1d0>
 800c9c8:	e7bd      	b.n	800c946 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9ca:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800c9cc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c9d2:	61da      	str	r2, [r3, #28]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800c9de:	e777      	b.n	800c8d0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c9e0:	684a      	ldr	r2, [r1, #4]
 800c9e2:	03d0      	lsls	r0, r2, #15
 800c9e4:	f57f af17 	bpl.w	800c816 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9e8:	4a1f      	ldr	r2, [pc, #124]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c9ea:	6812      	ldr	r2, [r2, #0]
 800c9ec:	0391      	lsls	r1, r2, #14
 800c9ee:	f57f af3b 	bpl.w	800c868 <HAL_RCC_OscConfig+0x80>
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	2a00      	cmp	r2, #0
 800c9f6:	f47f af37 	bne.w	800c868 <HAL_RCC_OscConfig+0x80>
 800c9fa:	e7d1      	b.n	800c9a0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9fc:	491a      	ldr	r1, [pc, #104]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800c9fe:	6960      	ldr	r0, [r4, #20]
 800ca00:	680a      	ldr	r2, [r1, #0]
 800ca02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800ca06:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800ca0a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca0c:	071a      	lsls	r2, r3, #28
 800ca0e:	f57f af58 	bpl.w	800c8c2 <HAL_RCC_OscConfig+0xda>
 800ca12:	e776      	b.n	800c902 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca14:	6833      	ldr	r3, [r6, #0]
 800ca16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca1a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ca1c:	f7ff f8d2 	bl	800bbc4 <HAL_GetTick>
 800ca20:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca22:	6833      	ldr	r3, [r6, #0]
 800ca24:	05da      	lsls	r2, r3, #23
 800ca26:	f53f af58 	bmi.w	800c8da <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca2a:	f7ff f8cb 	bl	800bbc4 <HAL_GetTick>
 800ca2e:	1bc0      	subs	r0, r0, r7
 800ca30:	2864      	cmp	r0, #100	; 0x64
 800ca32:	d9f6      	bls.n	800ca22 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 800ca34:	2003      	movs	r0, #3
}
 800ca36:	b002      	add	sp, #8
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca3c:	4d0a      	ldr	r5, [pc, #40]	; (800ca68 <HAL_RCC_OscConfig+0x280>)
 800ca3e:	682b      	ldr	r3, [r5, #0]
 800ca40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca44:	602b      	str	r3, [r5, #0]
 800ca46:	682b      	ldr	r3, [r5, #0]
 800ca48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ca4e:	f7ff f8b9 	bl	800bbc4 <HAL_GetTick>
 800ca52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca54:	e004      	b.n	800ca60 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca56:	f7ff f8b5 	bl	800bbc4 <HAL_GetTick>
 800ca5a:	1b80      	subs	r0, r0, r6
 800ca5c:	2864      	cmp	r0, #100	; 0x64
 800ca5e:	d8e9      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	039b      	lsls	r3, r3, #14
 800ca64:	d4f7      	bmi.n	800ca56 <HAL_RCC_OscConfig+0x26e>
 800ca66:	e6fe      	b.n	800c866 <HAL_RCC_OscConfig+0x7e>
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	42420000 	.word	0x42420000
 800ca70:	40007000 	.word	0x40007000
 800ca74:	20000010 	.word	0x20000010
 800ca78:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca7c:	4e50      	ldr	r6, [pc, #320]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca82:	6a33      	ldr	r3, [r6, #32]
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	6233      	str	r3, [r6, #32]
 800ca8a:	6a33      	ldr	r3, [r6, #32]
 800ca8c:	f023 0304 	bic.w	r3, r3, #4
 800ca90:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800ca92:	f7ff f897 	bl	800bbc4 <HAL_GetTick>
 800ca96:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca98:	e004      	b.n	800caa4 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca9a:	f7ff f893 	bl	800bbc4 <HAL_GetTick>
 800ca9e:	1bc0      	subs	r0, r0, r7
 800caa0:	4540      	cmp	r0, r8
 800caa2:	d8c7      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800caa4:	6a33      	ldr	r3, [r6, #32]
 800caa6:	0798      	lsls	r0, r3, #30
 800caa8:	d4f7      	bmi.n	800ca9a <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 800caaa:	2d00      	cmp	r5, #0
 800caac:	f43f af4e 	beq.w	800c94c <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800cab0:	4a43      	ldr	r2, [pc, #268]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
 800cab2:	69d3      	ldr	r3, [r2, #28]
 800cab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cab8:	61d3      	str	r3, [r2, #28]
 800caba:	e747      	b.n	800c94c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800cabc:	4a41      	ldr	r2, [pc, #260]	; (800cbc4 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cabe:	4e40      	ldr	r6, [pc, #256]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800cac0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cac2:	f7ff f87f 	bl	800bbc4 <HAL_GetTick>
 800cac6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cac8:	e004      	b.n	800cad4 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caca:	f7ff f87b 	bl	800bbc4 <HAL_GetTick>
 800cace:	1b40      	subs	r0, r0, r5
 800cad0:	2802      	cmp	r0, #2
 800cad2:	d8af      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cad4:	6833      	ldr	r3, [r6, #0]
 800cad6:	0799      	lsls	r1, r3, #30
 800cad8:	d4f7      	bmi.n	800caca <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	e6ef      	b.n	800c8be <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cade:	4a38      	ldr	r2, [pc, #224]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
 800cae0:	6a13      	ldr	r3, [r2, #32]
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800cae8:	f7ff f86c 	bl	800bbc4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caec:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800caf0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800caf2:	4f33      	ldr	r7, [pc, #204]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
 800caf4:	e004      	b.n	800cb00 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caf6:	f7ff f865 	bl	800bbc4 <HAL_GetTick>
 800cafa:	1b80      	subs	r0, r0, r6
 800cafc:	4540      	cmp	r0, r8
 800cafe:	d899      	bhi.n	800ca34 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	079b      	lsls	r3, r3, #30
 800cb04:	d5f7      	bpl.n	800caf6 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	f43f af20 	beq.w	800c94c <HAL_RCC_OscConfig+0x164>
 800cb0c:	e7d0      	b.n	800cab0 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cb0e:	2801      	cmp	r0, #1
 800cb10:	f43f af38 	beq.w	800c984 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 800cb14:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb16:	6a22      	ldr	r2, [r4, #32]
 800cb18:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800cb1c:	4291      	cmp	r1, r2
 800cb1e:	f47f af3f 	bne.w	800c9a0 <HAL_RCC_OscConfig+0x1b8>
 800cb22:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cb24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800cb28:	1a18      	subs	r0, r3, r0
 800cb2a:	bf18      	it	ne
 800cb2c:	2001      	movne	r0, #1
 800cb2e:	e729      	b.n	800c984 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb34:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	e67f      	b.n	800c84a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb4a:	f042 0204 	orr.w	r2, r2, #4
 800cb4e:	621a      	str	r2, [r3, #32]
 800cb50:	6a1a      	ldr	r2, [r3, #32]
 800cb52:	f042 0201 	orr.w	r2, r2, #1
 800cb56:	621a      	str	r2, [r3, #32]
 800cb58:	e7c6      	b.n	800cae8 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800cb5a:	2001      	movs	r0, #1
}
 800cb5c:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800cb5e:	f7ff f831 	bl	800bbc4 <HAL_GetTick>
 800cb62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cb64:	e005      	b.n	800cb72 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb66:	f7ff f82d 	bl	800bbc4 <HAL_GetTick>
 800cb6a:	1b80      	subs	r0, r0, r6
 800cb6c:	2802      	cmp	r0, #2
 800cb6e:	f63f af61 	bhi.w	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	0199      	lsls	r1, r3, #6
 800cb76:	d4f6      	bmi.n	800cb66 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800cb78:	6a23      	ldr	r3, [r4, #32]
 800cb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb7e:	d105      	bne.n	800cb8c <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800cb80:	686a      	ldr	r2, [r5, #4]
 800cb82:	68a1      	ldr	r1, [r4, #8]
 800cb84:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800cb8c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb8e:	4d0c      	ldr	r5, [pc, #48]	; (800cbc0 <HAL_RCC_OscConfig+0x3d8>)
 800cb90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb92:	686a      	ldr	r2, [r5, #4]
 800cb94:	430b      	orrs	r3, r1
 800cb96:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800cb9a:	490a      	ldr	r1, [pc, #40]	; (800cbc4 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800cba0:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800cba2:	f7ff f80f 	bl	800bbc4 <HAL_GetTick>
 800cba6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cba8:	e005      	b.n	800cbb6 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbaa:	f7ff f80b 	bl	800bbc4 <HAL_GetTick>
 800cbae:	1b00      	subs	r0, r0, r4
 800cbb0:	2802      	cmp	r0, #2
 800cbb2:	f63f af3f 	bhi.w	800ca34 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	019a      	lsls	r2, r3, #6
 800cbba:	d5f6      	bpl.n	800cbaa <HAL_RCC_OscConfig+0x3c2>
 800cbbc:	e6e1      	b.n	800c982 <HAL_RCC_OscConfig+0x19a>
 800cbbe:	bf00      	nop
 800cbc0:	40021000 	.word	0x40021000
 800cbc4:	42420000 	.word	0x42420000

0800cbc8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	f000 80a1 	beq.w	800cd10 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbce:	4a56      	ldr	r2, [pc, #344]	; (800cd28 <HAL_RCC_ClockConfig+0x160>)
{
 800cbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbd4:	6813      	ldr	r3, [r2, #0]
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	f003 0307 	and.w	r3, r3, #7
 800cbdc:	428b      	cmp	r3, r1
 800cbde:	460d      	mov	r5, r1
 800cbe0:	d20c      	bcs.n	800cbfc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbe2:	6813      	ldr	r3, [r2, #0]
 800cbe4:	f023 0307 	bic.w	r3, r3, #7
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbec:	6813      	ldr	r3, [r2, #0]
 800cbee:	f003 0307 	and.w	r3, r3, #7
 800cbf2:	428b      	cmp	r3, r1
 800cbf4:	d002      	beq.n	800cbfc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800cbf6:	2001      	movs	r0, #1
}
 800cbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	079e      	lsls	r6, r3, #30
 800cc00:	d514      	bpl.n	800cc2c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc02:	0758      	lsls	r0, r3, #29
 800cc04:	d504      	bpl.n	800cc10 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc06:	4949      	ldr	r1, [pc, #292]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800cc08:	684a      	ldr	r2, [r1, #4]
 800cc0a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cc0e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc10:	0719      	lsls	r1, r3, #28
 800cc12:	d504      	bpl.n	800cc1e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc14:	4945      	ldr	r1, [pc, #276]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800cc16:	684a      	ldr	r2, [r1, #4]
 800cc18:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800cc1c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc1e:	4943      	ldr	r1, [pc, #268]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800cc20:	68a0      	ldr	r0, [r4, #8]
 800cc22:	684a      	ldr	r2, [r1, #4]
 800cc24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800cc28:	4302      	orrs	r2, r0
 800cc2a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc2c:	07da      	lsls	r2, r3, #31
 800cc2e:	d520      	bpl.n	800cc72 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc30:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc32:	4b3e      	ldr	r3, [pc, #248]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc34:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc36:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc38:	d06c      	beq.n	800cd14 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc3a:	2a02      	cmp	r2, #2
 800cc3c:	d065      	beq.n	800cd0a <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc3e:	079e      	lsls	r6, r3, #30
 800cc40:	d5d9      	bpl.n	800cbf6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc42:	4e3a      	ldr	r6, [pc, #232]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc48:	6873      	ldr	r3, [r6, #4]
 800cc4a:	f023 0303 	bic.w	r3, r3, #3
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800cc52:	f7fe ffb7 	bl	800bbc4 <HAL_GetTick>
 800cc56:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc58:	e004      	b.n	800cc64 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc5a:	f7fe ffb3 	bl	800bbc4 <HAL_GetTick>
 800cc5e:	1bc0      	subs	r0, r0, r7
 800cc60:	4540      	cmp	r0, r8
 800cc62:	d85a      	bhi.n	800cd1a <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc64:	6873      	ldr	r3, [r6, #4]
 800cc66:	6862      	ldr	r2, [r4, #4]
 800cc68:	f003 030c 	and.w	r3, r3, #12
 800cc6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800cc70:	d1f3      	bne.n	800cc5a <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc72:	4a2d      	ldr	r2, [pc, #180]	; (800cd28 <HAL_RCC_ClockConfig+0x160>)
 800cc74:	6813      	ldr	r3, [r2, #0]
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	42ab      	cmp	r3, r5
 800cc7c:	d909      	bls.n	800cc92 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc7e:	6813      	ldr	r3, [r2, #0]
 800cc80:	f023 0307 	bic.w	r3, r3, #7
 800cc84:	432b      	orrs	r3, r5
 800cc86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc88:	6813      	ldr	r3, [r2, #0]
 800cc8a:	f003 0307 	and.w	r3, r3, #7
 800cc8e:	42ab      	cmp	r3, r5
 800cc90:	d1b1      	bne.n	800cbf6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	0758      	lsls	r0, r3, #29
 800cc96:	d506      	bpl.n	800cca6 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc98:	4924      	ldr	r1, [pc, #144]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800cc9a:	68e0      	ldr	r0, [r4, #12]
 800cc9c:	684a      	ldr	r2, [r1, #4]
 800cc9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cca2:	4302      	orrs	r2, r0
 800cca4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cca6:	0719      	lsls	r1, r3, #28
 800cca8:	d507      	bpl.n	800ccba <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ccaa:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800ccac:	6921      	ldr	r1, [r4, #16]
 800ccae:	6853      	ldr	r3, [r2, #4]
 800ccb0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800ccb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ccb8:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 800ccba:	491c      	ldr	r1, [pc, #112]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800ccbc:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800ccbe:	f002 030c 	and.w	r3, r2, #12
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d010      	beq.n	800cce8 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800ccc6:	4b1a      	ldr	r3, [pc, #104]	; (800cd30 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ccc8:	4a18      	ldr	r2, [pc, #96]	; (800cd2c <HAL_RCC_ClockConfig+0x164>)
 800ccca:	481a      	ldr	r0, [pc, #104]	; (800cd34 <HAL_RCC_ClockConfig+0x16c>)
 800cccc:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800ccce:	491a      	ldr	r1, [pc, #104]	; (800cd38 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ccd0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ccd4:	5c80      	ldrb	r0, [r0, r2]
 800ccd6:	4a19      	ldr	r2, [pc, #100]	; (800cd3c <HAL_RCC_ClockConfig+0x174>)
 800ccd8:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800ccda:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ccdc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800ccde:	f7fe ff2f 	bl	800bb40 <HAL_InitTick>
  return HAL_OK;
 800cce2:	2000      	movs	r0, #0
}
 800cce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cce8:	4815      	ldr	r0, [pc, #84]	; (800cd40 <HAL_RCC_ClockConfig+0x178>)
 800ccea:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ccee:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ccf0:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ccf2:	d514      	bpl.n	800cd1e <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ccf4:	480e      	ldr	r0, [pc, #56]	; (800cd30 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ccf6:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ccf8:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ccfc:	4911      	ldr	r1, [pc, #68]	; (800cd44 <HAL_RCC_ClockConfig+0x17c>)
 800ccfe:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800cd02:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800cd04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd08:	e7de      	b.n	800ccc8 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd0a:	019f      	lsls	r7, r3, #6
 800cd0c:	d499      	bmi.n	800cc42 <HAL_RCC_ClockConfig+0x7a>
 800cd0e:	e772      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800cd10:	2001      	movs	r0, #1
}
 800cd12:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd14:	039b      	lsls	r3, r3, #14
 800cd16:	d494      	bmi.n	800cc42 <HAL_RCC_ClockConfig+0x7a>
 800cd18:	e76d      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800cd1a:	2003      	movs	r0, #3
 800cd1c:	e76c      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cd1e:	4a0a      	ldr	r2, [pc, #40]	; (800cd48 <HAL_RCC_ClockConfig+0x180>)
 800cd20:	fb02 f303 	mul.w	r3, r2, r3
 800cd24:	e7d0      	b.n	800ccc8 <HAL_RCC_ClockConfig+0x100>
 800cd26:	bf00      	nop
 800cd28:	40022000 	.word	0x40022000
 800cd2c:	40021000 	.word	0x40021000
 800cd30:	007a1200 	.word	0x007a1200
 800cd34:	0800e394 	.word	0x0800e394
 800cd38:	20000018 	.word	0x20000018
 800cd3c:	20000010 	.word	0x20000010
 800cd40:	0800e3ac 	.word	0x0800e3ac
 800cd44:	0800e3bc 	.word	0x0800e3bc
 800cd48:	003d0900 	.word	0x003d0900

0800cd4c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cd4c:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800cd4e:	4a05      	ldr	r2, [pc, #20]	; (800cd64 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4905      	ldr	r1, [pc, #20]	; (800cd68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800cd54:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800cd58:	5ccb      	ldrb	r3, [r1, r3]
 800cd5a:	6810      	ldr	r0, [r2, #0]
}
 800cd5c:	40d8      	lsrs	r0, r3
 800cd5e:	4770      	bx	lr
 800cd60:	40021000 	.word	0x40021000
 800cd64:	20000010 	.word	0x20000010
 800cd68:	0800e3a4 	.word	0x0800e3a4

0800cd6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cd6c:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800cd6e:	4a05      	ldr	r2, [pc, #20]	; (800cd84 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	4905      	ldr	r1, [pc, #20]	; (800cd88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cd74:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800cd78:	5ccb      	ldrb	r3, [r1, r3]
 800cd7a:	6810      	ldr	r0, [r2, #0]
}
 800cd7c:	40d8      	lsrs	r0, r3
 800cd7e:	4770      	bx	lr
 800cd80:	40021000 	.word	0x40021000
 800cd84:	20000010 	.word	0x20000010
 800cd88:	0800e3a4 	.word	0x0800e3a4

0800cd8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd90:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cd92:	6800      	ldr	r0, [r0, #0]
{
 800cd94:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cd96:	07c1      	lsls	r1, r0, #31
 800cd98:	d52c      	bpl.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd9a:	4b3a      	ldr	r3, [pc, #232]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800cd9c:	69da      	ldr	r2, [r3, #28]
 800cd9e:	00d2      	lsls	r2, r2, #3
 800cda0:	d53f      	bpl.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cda2:	4d39      	ldr	r5, [pc, #228]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 800cda4:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cda6:	682b      	ldr	r3, [r5, #0]
 800cda8:	05df      	lsls	r7, r3, #23
 800cdaa:	d548      	bpl.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cdac:	4d35      	ldr	r5, [pc, #212]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800cdae:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cdb0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800cdb4:	d011      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800cdb6:	6861      	ldr	r1, [r4, #4]
 800cdb8:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d00d      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cdc0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cdc2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cdc4:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800cdc6:	4a31      	ldr	r2, [pc, #196]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cdc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800cdcc:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cdd0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800cdd4:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800cdd6:	07d9      	lsls	r1, r3, #31
 800cdd8:	d444      	bmi.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdda:	6861      	ldr	r1, [r4, #4]
 800cddc:	4a29      	ldr	r2, [pc, #164]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800cdde:	6a13      	ldr	r3, [r2, #32]
 800cde0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cde4:	430b      	orrs	r3, r1
 800cde6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800cde8:	b11e      	cbz	r6, 800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdea:	69d3      	ldr	r3, [r2, #28]
 800cdec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cdf2:	6820      	ldr	r0, [r4, #0]
 800cdf4:	0783      	lsls	r3, r0, #30
 800cdf6:	d506      	bpl.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdf8:	4922      	ldr	r1, [pc, #136]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800cdfa:	68a3      	ldr	r3, [r4, #8]
 800cdfc:	684a      	ldr	r2, [r1, #4]
 800cdfe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce02:	431a      	orrs	r2, r3
 800ce04:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce06:	f010 0010 	ands.w	r0, r0, #16
 800ce0a:	d007      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800ce0c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce0e:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800ce10:	68e1      	ldr	r1, [r4, #12]
 800ce12:	6853      	ldr	r3, [r2, #4]
 800ce14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	6053      	str	r3, [r2, #4]
}
 800ce1c:	b002      	add	sp, #8
 800ce1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce22:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce24:	4d18      	ldr	r5, [pc, #96]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ce2a:	61da      	str	r2, [r3, #28]
 800ce2c:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 800ce2e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	05df      	lsls	r7, r3, #23
 800ce3c:	d4b6      	bmi.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce3e:	682b      	ldr	r3, [r5, #0]
 800ce40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce44:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ce46:	f7fe febd 	bl	800bbc4 <HAL_GetTick>
 800ce4a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	05d8      	lsls	r0, r3, #23
 800ce50:	d4ac      	bmi.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce52:	f7fe feb7 	bl	800bbc4 <HAL_GetTick>
 800ce56:	1bc3      	subs	r3, r0, r7
 800ce58:	2b64      	cmp	r3, #100	; 0x64
 800ce5a:	d9f7      	bls.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800ce5c:	2003      	movs	r0, #3
}
 800ce5e:	b002      	add	sp, #8
 800ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800ce64:	f7fe feae 	bl	800bbc4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce68:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800ce6c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce6e:	e004      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce70:	f7fe fea8 	bl	800bbc4 <HAL_GetTick>
 800ce74:	1bc0      	subs	r0, r0, r7
 800ce76:	4540      	cmp	r0, r8
 800ce78:	d8f0      	bhi.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce7a:	6a2b      	ldr	r3, [r5, #32]
 800ce7c:	079a      	lsls	r2, r3, #30
 800ce7e:	d5f7      	bpl.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800ce80:	e7ab      	b.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ce82:	bf00      	nop
 800ce84:	40021000 	.word	0x40021000
 800ce88:	40007000 	.word	0x40007000
 800ce8c:	42420000 	.word	0x42420000

0800ce90 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800ce90:	2802      	cmp	r0, #2
{
 800ce92:	b508      	push	{r3, lr}
  switch (PeriphClk)
 800ce94:	d005      	beq.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800ce96:	2810      	cmp	r0, #16
 800ce98:	d026      	beq.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800ce9a:	2801      	cmp	r0, #1
 800ce9c:	d00c      	beq.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
  uint32_t temp_reg = 0U, frequency = 0U;
 800ce9e:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800cea0:	bd08      	pop	{r3, pc}
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800cea2:	f7ff ff63 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 800cea6:	4b28      	ldr	r3, [pc, #160]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800ceae:	3301      	adds	r3, #1
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800ceb6:	bd08      	pop	{r3, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800ceb8:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 800cebc:	4922      	ldr	r1, [pc, #136]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800cebe:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800cec0:	401a      	ands	r2, r3
 800cec2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800cec6:	d02f      	beq.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800cec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced0:	d02d      	beq.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800ced2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ced6:	d1e2      	bne.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
        frequency = HSE_VALUE / 128U;
 800ced8:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800cedc:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 800cede:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cee2:	bf18      	it	ne
 800cee4:	4618      	movne	r0, r3
}
 800cee6:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 800cee8:	4b17      	ldr	r3, [pc, #92]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800ceea:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800cef2:	d0d5      	beq.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cef4:	4815      	ldr	r0, [pc, #84]	; (800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800cef6:	f3c2 4183 	ubfx	r1, r2, #18, #4
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cefa:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cefc:	5c40      	ldrb	r0, [r0, r1]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cefe:	d51e      	bpl.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4a13      	ldr	r2, [pc, #76]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800cf04:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800cf08:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800cf0a:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800cf0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf10:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	025b      	lsls	r3, r3, #9
 800cf1a:	d4c1      	bmi.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 800cf1c:	4b0e      	ldr	r3, [pc, #56]	; (800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800cf1e:	0040      	lsls	r0, r0, #1
 800cf20:	fba3 3000 	umull	r3, r0, r3, r0
 800cf24:	0840      	lsrs	r0, r0, #1
}
 800cf26:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 800cf28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 800cf2c:	bd08      	pop	{r3, pc}
        frequency = LSI_VALUE;
 800cf2e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800cf32:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 800cf34:	f010 0002 	ands.w	r0, r0, #2
 800cf38:	bf18      	it	ne
 800cf3a:	4618      	movne	r0, r3
}
 800cf3c:	bd08      	pop	{r3, pc}
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cf3e:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800cf40:	fb03 f000 	mul.w	r0, r3, r0
 800cf44:	e7e6      	b.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800cf46:	bf00      	nop
 800cf48:	40021000 	.word	0x40021000
 800cf4c:	0800e3c0 	.word	0x0800e3c0
 800cf50:	0800e3d0 	.word	0x0800e3d0
 800cf54:	007a1200 	.word	0x007a1200
 800cf58:	aaaaaaab 	.word	0xaaaaaaab
 800cf5c:	003d0900 	.word	0x003d0900

0800cf60 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d066      	beq.n	800d032 <HAL_TIM_Base_Init+0xd2>
{
 800cf64:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d045      	beq.n	800d000 <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf74:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf76:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf78:	492f      	ldr	r1, [pc, #188]	; (800d038 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cf7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf7e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800cf80:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf82:	d042      	beq.n	800d00a <HAL_TIM_Base_Init+0xaa>
 800cf84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cf88:	d011      	beq.n	800cfae <HAL_TIM_Base_Init+0x4e>
 800cf8a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800cf8e:	428a      	cmp	r2, r1
 800cf90:	d00d      	beq.n	800cfae <HAL_TIM_Base_Init+0x4e>
 800cf92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf96:	428a      	cmp	r2, r1
 800cf98:	d009      	beq.n	800cfae <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf9a:	69a0      	ldr	r0, [r4, #24]
 800cf9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfa0:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfa2:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800cfa4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfa6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfa8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cfaa:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfac:	e010      	b.n	800cfd0 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 800cfae:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfb4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800cfb6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfbc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfbe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfc4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800cfc8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800cfca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfcc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cfce:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfd4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800cfdc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800cfe0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cfe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800cff8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800cffc:	2000      	movs	r0, #0
}
 800cffe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800d000:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d004:	f7fe fcae 	bl	800b964 <HAL_TIM_Base_MspInit>
 800d008:	e7b4      	b.n	800cf74 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800d00a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d010:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800d012:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800d014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d018:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d01a:	69a1      	ldr	r1, [r4, #24]
 800d01c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d020:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800d022:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d024:	68e3      	ldr	r3, [r4, #12]
 800d026:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d028:	6863      	ldr	r3, [r4, #4]
 800d02a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800d02c:	6963      	ldr	r3, [r4, #20]
 800d02e:	6313      	str	r3, [r2, #48]	; 0x30
 800d030:	e7ce      	b.n	800cfd0 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 800d032:	2001      	movs	r0, #1
}
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	40012c00 	.word	0x40012c00

0800d03c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d03c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d040:	2b01      	cmp	r3, #1
 800d042:	d11f      	bne.n	800d084 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800d044:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d046:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d048:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d04c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04e:	490f      	ldr	r1, [pc, #60]	; (800d08c <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d050:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d054:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d056:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d058:	d009      	beq.n	800d06e <HAL_TIM_Base_Start_IT+0x32>
 800d05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05e:	d006      	beq.n	800d06e <HAL_TIM_Base_Start_IT+0x32>
 800d060:	4a0b      	ldr	r2, [pc, #44]	; (800d090 <HAL_TIM_Base_Start_IT+0x54>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d003      	beq.n	800d06e <HAL_TIM_Base_Start_IT+0x32>
 800d066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d104      	bne.n	800d078 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d074:	2a06      	cmp	r2, #6
 800d076:	d007      	beq.n	800d088 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 800d078:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800d07a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800d07c:	f042 0201 	orr.w	r2, r2, #1
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	4770      	bx	lr
    return HAL_ERROR;
 800d084:	2001      	movs	r0, #1
 800d086:	4770      	bx	lr
  return HAL_OK;
 800d088:	2000      	movs	r0, #0
}
 800d08a:	4770      	bx	lr
 800d08c:	40012c00 	.word	0x40012c00
 800d090:	40000400 	.word	0x40000400

0800d094 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 800d094:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d098:	6802      	ldr	r2, [r0, #0]
{
 800d09a:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d09c:	68d1      	ldr	r1, [r2, #12]
 800d09e:	f021 0101 	bic.w	r1, r1, #1
 800d0a2:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800d0a4:	6a11      	ldr	r1, [r2, #32]
 800d0a6:	ea11 0f0c 	tst.w	r1, ip
 800d0aa:	d108      	bne.n	800d0be <HAL_TIM_Base_Stop_IT+0x2a>
 800d0ac:	f240 4144 	movw	r1, #1092	; 0x444
 800d0b0:	6a10      	ldr	r0, [r2, #32]
 800d0b2:	4208      	tst	r0, r1
 800d0b4:	d103      	bne.n	800d0be <HAL_TIM_Base_Stop_IT+0x2a>
 800d0b6:	6811      	ldr	r1, [r2, #0]
 800d0b8:	f021 0101 	bic.w	r1, r1, #1
 800d0bc:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d0be:	2201      	movs	r2, #1
}
 800d0c0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800d0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_TIM_PWM_MspInit>:
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop

0800d0cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d066      	beq.n	800d19e <HAL_TIM_PWM_Init+0xd2>
{
 800d0d0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d0d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d045      	beq.n	800d16c <HAL_TIM_PWM_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0e2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0e4:	492f      	ldr	r1, [pc, #188]	; (800d1a4 <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0ea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800d0ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0ee:	d042      	beq.n	800d176 <HAL_TIM_PWM_Init+0xaa>
 800d0f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d0f4:	d011      	beq.n	800d11a <HAL_TIM_PWM_Init+0x4e>
 800d0f6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d0fa:	428a      	cmp	r2, r1
 800d0fc:	d00d      	beq.n	800d11a <HAL_TIM_PWM_Init+0x4e>
 800d0fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d102:	428a      	cmp	r2, r1
 800d104:	d009      	beq.n	800d11a <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d106:	69a0      	ldr	r0, [r4, #24]
 800d108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d10c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d10e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d110:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800d112:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d114:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d116:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d118:	e010      	b.n	800d13c <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 800d11a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d120:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800d122:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800d124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d128:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d12a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d130:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d132:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d134:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d136:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d138:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d13a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800d13c:	2301      	movs	r3, #1
 800d13e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d140:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d144:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d148:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d14c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d150:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d15c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800d164:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800d168:	2000      	movs	r0, #0
}
 800d16a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800d16c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800d170:	f7ff ffaa 	bl	800d0c8 <HAL_TIM_PWM_MspInit>
 800d174:	e7b4      	b.n	800d0e0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800d176:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d17c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800d17e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800d180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d184:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d186:	69a1      	ldr	r1, [r4, #24]
 800d188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d18c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800d18e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d190:	68e3      	ldr	r3, [r4, #12]
 800d192:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d194:	6863      	ldr	r3, [r4, #4]
 800d196:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800d198:	6963      	ldr	r3, [r4, #20]
 800d19a:	6313      	str	r3, [r2, #48]	; 0x30
 800d19c:	e7ce      	b.n	800d13c <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 800d19e:	2001      	movs	r0, #1
}
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40012c00 	.word	0x40012c00

0800d1a8 <HAL_TIM_PWM_Start>:
 800d1a8:	bb39      	cbnz	r1, 800d1fa <HAL_TIM_PWM_Start+0x52>
 800d1aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d137      	bne.n	800d222 <HAL_TIM_PWM_Start+0x7a>
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	6803      	ldr	r3, [r0, #0]
 800d1bc:	f001 011f 	and.w	r1, r1, #31
 800d1c0:	6a18      	ldr	r0, [r3, #32]
 800d1c2:	408a      	lsls	r2, r1
 800d1c4:	ea20 0002 	bic.w	r0, r0, r2
 800d1c8:	b410      	push	{r4}
 800d1ca:	6218      	str	r0, [r3, #32]
 800d1cc:	6a19      	ldr	r1, [r3, #32]
 800d1ce:	4c22      	ldr	r4, [pc, #136]	; (800d258 <HAL_TIM_PWM_Start+0xb0>)
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	621a      	str	r2, [r3, #32]
 800d1d6:	d026      	beq.n	800d226 <HAL_TIM_PWM_Start+0x7e>
 800d1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1dc:	d027      	beq.n	800d22e <HAL_TIM_PWM_Start+0x86>
 800d1de:	4a1f      	ldr	r2, [pc, #124]	; (800d25c <HAL_TIM_PWM_Start+0xb4>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d024      	beq.n	800d22e <HAL_TIM_PWM_Start+0x86>
 800d1e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d020      	beq.n	800d22e <HAL_TIM_PWM_Start+0x86>
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	f042 0201 	orr.w	r2, r2, #1
 800d1f4:	bc10      	pop	{r4}
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	4770      	bx	lr
 800d1fa:	2904      	cmp	r1, #4
 800d1fc:	d01f      	beq.n	800d23e <HAL_TIM_PWM_Start+0x96>
 800d1fe:	2908      	cmp	r1, #8
 800d200:	d00b      	beq.n	800d21a <HAL_TIM_PWM_Start+0x72>
 800d202:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d206:	2b01      	cmp	r3, #1
 800d208:	d10b      	bne.n	800d222 <HAL_TIM_PWM_Start+0x7a>
 800d20a:	2904      	cmp	r1, #4
 800d20c:	d01b      	beq.n	800d246 <HAL_TIM_PWM_Start+0x9e>
 800d20e:	2908      	cmp	r1, #8
 800d210:	d01d      	beq.n	800d24e <HAL_TIM_PWM_Start+0xa6>
 800d212:	2302      	movs	r3, #2
 800d214:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800d218:	e7ce      	b.n	800d1b8 <HAL_TIM_PWM_Start+0x10>
 800d21a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d015      	beq.n	800d24e <HAL_TIM_PWM_Start+0xa6>
 800d222:	2001      	movs	r0, #1
 800d224:	4770      	bx	lr
 800d226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d22c:	645a      	str	r2, [r3, #68]	; 0x44
 800d22e:	689a      	ldr	r2, [r3, #8]
 800d230:	f002 0207 	and.w	r2, r2, #7
 800d234:	2a06      	cmp	r2, #6
 800d236:	d1d9      	bne.n	800d1ec <HAL_TIM_PWM_Start+0x44>
 800d238:	2000      	movs	r0, #0
 800d23a:	bc10      	pop	{r4}
 800d23c:	4770      	bx	lr
 800d23e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800d242:	2b01      	cmp	r3, #1
 800d244:	d1ed      	bne.n	800d222 <HAL_TIM_PWM_Start+0x7a>
 800d246:	2302      	movs	r3, #2
 800d248:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800d24c:	e7b4      	b.n	800d1b8 <HAL_TIM_PWM_Start+0x10>
 800d24e:	2302      	movs	r3, #2
 800d250:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800d254:	e7b0      	b.n	800d1b8 <HAL_TIM_PWM_Start+0x10>
 800d256:	bf00      	nop
 800d258:	40012c00 	.word	0x40012c00
 800d25c:	40000400 	.word	0x40000400

0800d260 <HAL_TIM_PWM_ConfigChannel>:
{
 800d260:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800d262:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800d266:	2801      	cmp	r0, #1
 800d268:	f000 80c5 	beq.w	800d3f6 <HAL_TIM_PWM_ConfigChannel+0x196>
 800d26c:	2001      	movs	r0, #1
{
 800d26e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800d270:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 800d274:	2a0c      	cmp	r2, #12
 800d276:	d808      	bhi.n	800d28a <HAL_TIM_PWM_ConfigChannel+0x2a>
 800d278:	e8df f002 	tbb	[pc, r2]
 800d27c:	0707073b 	.word	0x0707073b
 800d280:	07070765 	.word	0x07070765
 800d284:	07070792 	.word	0x07070792
 800d288:	0d          	.byte	0x0d
 800d289:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 800d290:	2001      	movs	r0, #1
}
 800d292:	bcf0      	pop	{r4, r5, r6, r7}
 800d294:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d296:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d298:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800d29a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d29c:	6a14      	ldr	r4, [r2, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d29e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800d2a6:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800d2a8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800d2aa:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2ac:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2b0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2b4:	688e      	ldr	r6, [r1, #8]
 800d2b6:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ba:	4e68      	ldr	r6, [pc, #416]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d2bc:	42b2      	cmp	r2, r6
 800d2be:	f000 80b8 	beq.w	800d432 <HAL_TIM_PWM_ConfigChannel+0x1d2>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2c2:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d2c4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d2c6:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2c8:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 800d2ca:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2cc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2ce:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800d2d0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2d2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d2d6:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2d8:	69d1      	ldr	r1, [r2, #28]
 800d2da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d2de:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2e0:	69d1      	ldr	r1, [r2, #28]
 800d2e2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800d2e6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d2ee:	bcf0      	pop	{r4, r5, r6, r7}
 800d2f0:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2f2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 800d2f4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800d2f6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2f8:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 800d2fa:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2fe:	f024 0401 	bic.w	r4, r4, #1
 800d302:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800d304:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800d306:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d308:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800d30c:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 800d30e:	688e      	ldr	r6, [r1, #8]
 800d310:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d312:	4e52      	ldr	r6, [pc, #328]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d314:	42b2      	cmp	r2, r6
 800d316:	d070      	beq.n	800d3fa <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 800d318:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 800d31a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d31c:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d31e:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800d320:	6355      	str	r5, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800d322:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d324:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800d326:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d328:	f041 0108 	orr.w	r1, r1, #8
 800d32c:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d32e:	6991      	ldr	r1, [r2, #24]
 800d330:	f021 0104 	bic.w	r1, r1, #4
 800d334:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d336:	6991      	ldr	r1, [r2, #24]
 800d338:	4321      	orrs	r1, r4
 800d33a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d342:	bcf0      	pop	{r4, r5, r6, r7}
 800d344:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d346:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d348:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800d34a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d34c:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 800d34e:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d352:	f024 0410 	bic.w	r4, r4, #16
 800d356:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800d358:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800d35a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d35c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d360:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d364:	688e      	ldr	r6, [r1, #8]
 800d366:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d36a:	4e3c      	ldr	r6, [pc, #240]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d36c:	42b2      	cmp	r2, r6
 800d36e:	d051      	beq.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 800d370:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800d372:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d374:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d376:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 800d378:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d37a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d37c:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800d37e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d380:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d384:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d386:	6991      	ldr	r1, [r2, #24]
 800d388:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d38c:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d38e:	6991      	ldr	r1, [r2, #24]
 800d390:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800d394:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d396:	2200      	movs	r2, #0
 800d398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d39c:	bcf0      	pop	{r4, r5, r6, r7}
 800d39e:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3a0:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 800d3a2:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800d3a4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3a6:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 800d3a8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3ac:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800d3b0:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800d3b2:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800d3b4:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3b6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800d3ba:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3bc:	688e      	ldr	r6, [r1, #8]
 800d3be:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3c2:	4e26      	ldr	r6, [pc, #152]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d3c4:	42b2      	cmp	r2, r6
 800d3c6:	d03a      	beq.n	800d43e <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 800d3c8:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 800d3ca:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d3cc:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3ce:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 800d3d0:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800d3d2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3d4:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800d3d6:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3d8:	f041 0108 	orr.w	r1, r1, #8
 800d3dc:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3de:	69d1      	ldr	r1, [r2, #28]
 800d3e0:	f021 0104 	bic.w	r1, r1, #4
 800d3e4:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3e6:	69d1      	ldr	r1, [r2, #28]
 800d3e8:	4321      	orrs	r1, r4
 800d3ea:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d3f2:	bcf0      	pop	{r4, r5, r6, r7}
 800d3f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d3f6:	2002      	movs	r0, #2
}
 800d3f8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800d3fa:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3fc:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 800d400:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d402:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800d406:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800d40a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800d40c:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800d410:	4335      	orrs	r5, r6
 800d412:	e781      	b.n	800d318 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d414:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800d416:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d41a:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d41e:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d422:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800d426:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800d428:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d42c:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 800d430:	e79e      	b.n	800d370 <HAL_TIM_PWM_ConfigChannel+0x110>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d432:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d434:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d438:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800d43c:	e741      	b.n	800d2c2 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d43e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800d440:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d444:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d448:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d44c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800d450:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800d452:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d456:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800d45a:	e7b5      	b.n	800d3c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800d45c:	40012c00 	.word	0x40012c00

0800d460 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d460:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d464:	2b01      	cmp	r3, #1
 800d466:	d075      	beq.n	800d554 <HAL_TIM_ConfigClockSource+0xf4>
 800d468:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d46a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d46c:	2001      	movs	r0, #1
{
 800d46e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800d470:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 800d472:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d476:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800d47a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d47c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d480:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800d484:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d486:	680b      	ldr	r3, [r1, #0]
 800d488:	2b60      	cmp	r3, #96	; 0x60
 800d48a:	d065      	beq.n	800d558 <HAL_TIM_ConfigClockSource+0xf8>
 800d48c:	d824      	bhi.n	800d4d8 <HAL_TIM_ConfigClockSource+0x78>
 800d48e:	2b40      	cmp	r3, #64	; 0x40
 800d490:	d07c      	beq.n	800d58c <HAL_TIM_ConfigClockSource+0x12c>
 800d492:	d94b      	bls.n	800d52c <HAL_TIM_ConfigClockSource+0xcc>
 800d494:	2b50      	cmp	r3, #80	; 0x50
 800d496:	d117      	bne.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 800d498:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockPolarity,
 800d49a:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d49c:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d49e:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800d4a4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4a6:	6a23      	ldr	r3, [r4, #32]
 800d4a8:	f023 0301 	bic.w	r3, r3, #1
 800d4ac:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4ae:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4b8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800d4ba:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4bc:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4c2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4c6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d4c8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d4ca:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d4cc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d4d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d4d4:	bc30      	pop	{r4, r5}
 800d4d6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4dc:	d038      	beq.n	800d550 <HAL_TIM_ConfigClockSource+0xf0>
 800d4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4e2:	d110      	bne.n	800d506 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4e4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d4e8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4ea:	432b      	orrs	r3, r5
 800d4ec:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4ee:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d4f6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4f8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4fa:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d4fc:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d502:	60a3      	str	r3, [r4, #8]
      break;
 800d504:	e7e0      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800d506:	2b70      	cmp	r3, #112	; 0x70
 800d508:	d1de      	bne.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d50a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d50e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d510:	432b      	orrs	r3, r5
 800d512:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d514:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d518:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d51c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d51e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d520:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d522:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d528:	60a3      	str	r3, [r4, #8]
      break;
 800d52a:	e7cd      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800d52c:	2b20      	cmp	r3, #32
 800d52e:	d002      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0xd6>
 800d530:	d90a      	bls.n	800d548 <HAL_TIM_ConfigClockSource+0xe8>
 800d532:	2b30      	cmp	r3, #48	; 0x30
 800d534:	d1c8      	bne.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800d536:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d538:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800d53a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d53e:	430b      	orrs	r3, r1
 800d540:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d544:	60a3      	str	r3, [r4, #8]
}
 800d546:	e7bf      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800d548:	f033 0110 	bics.w	r1, r3, #16
 800d54c:	d1bc      	bne.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
 800d54e:	e7f2      	b.n	800d536 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 800d550:	2000      	movs	r0, #0
 800d552:	e7b9      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800d554:	2002      	movs	r0, #2
}
 800d556:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d558:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d55a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d55c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d55e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d564:	f021 0110 	bic.w	r1, r1, #16
 800d568:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d56a:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d56c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d570:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d574:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800d578:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d57a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d57c:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d57e:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800d580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d584:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d588:	60a3      	str	r3, [r4, #8]
}
 800d58a:	e79d      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800d58c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d58e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800d590:	6a21      	ldr	r1, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d592:	2000      	movs	r0, #0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d594:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800d598:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d59a:	6a23      	ldr	r3, [r4, #32]
 800d59c:	f023 0301 	bic.w	r3, r3, #1
 800d5a0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5a2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d5ac:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800d5ae:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d5b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5b6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d5ba:	60a3      	str	r3, [r4, #8]
}
 800d5bc:	e784      	b.n	800d4c8 <HAL_TIM_ConfigClockSource+0x68>
 800d5be:	bf00      	nop

0800d5c0 <HAL_TIM_OC_DelayElapsedCallback>:
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop

0800d5c4 <HAL_TIM_IC_CaptureCallback>:
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop

0800d5c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <HAL_TIM_TriggerCallback>:
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5d0:	6803      	ldr	r3, [r0, #0]
{
 800d5d2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5d4:	691a      	ldr	r2, [r3, #16]
{
 800d5d6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5d8:	0791      	lsls	r1, r2, #30
 800d5da:	d502      	bpl.n	800d5e2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	0792      	lsls	r2, r2, #30
 800d5e0:	d45f      	bmi.n	800d6a2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5e2:	691a      	ldr	r2, [r3, #16]
 800d5e4:	0750      	lsls	r0, r2, #29
 800d5e6:	d502      	bpl.n	800d5ee <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	0751      	lsls	r1, r2, #29
 800d5ec:	d446      	bmi.n	800d67c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d5ee:	691a      	ldr	r2, [r3, #16]
 800d5f0:	0712      	lsls	r2, r2, #28
 800d5f2:	d502      	bpl.n	800d5fa <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5f4:	68da      	ldr	r2, [r3, #12]
 800d5f6:	0710      	lsls	r0, r2, #28
 800d5f8:	d42e      	bmi.n	800d658 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5fa:	691a      	ldr	r2, [r3, #16]
 800d5fc:	06d2      	lsls	r2, r2, #27
 800d5fe:	d502      	bpl.n	800d606 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d600:	68da      	ldr	r2, [r3, #12]
 800d602:	06d0      	lsls	r0, r2, #27
 800d604:	d418      	bmi.n	800d638 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d606:	691a      	ldr	r2, [r3, #16]
 800d608:	07d1      	lsls	r1, r2, #31
 800d60a:	d502      	bpl.n	800d612 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	07d2      	lsls	r2, r2, #31
 800d610:	d45d      	bmi.n	800d6ce <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d612:	691a      	ldr	r2, [r3, #16]
 800d614:	0610      	lsls	r0, r2, #24
 800d616:	d502      	bpl.n	800d61e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d618:	68da      	ldr	r2, [r3, #12]
 800d61a:	0611      	lsls	r1, r2, #24
 800d61c:	d45f      	bmi.n	800d6de <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d61e:	691a      	ldr	r2, [r3, #16]
 800d620:	0652      	lsls	r2, r2, #25
 800d622:	d502      	bpl.n	800d62a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d624:	68da      	ldr	r2, [r3, #12]
 800d626:	0650      	lsls	r0, r2, #25
 800d628:	d461      	bmi.n	800d6ee <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d62a:	691a      	ldr	r2, [r3, #16]
 800d62c:	0691      	lsls	r1, r2, #26
 800d62e:	d502      	bpl.n	800d636 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	0692      	lsls	r2, r2, #26
 800d634:	d443      	bmi.n	800d6be <HAL_TIM_IRQHandler+0xee>
}
 800d636:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d638:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d63c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d63e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d640:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d642:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800d644:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d646:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d64a:	d064      	beq.n	800d716 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800d64c:	f7ff ffba 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d650:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d652:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d654:	7722      	strb	r2, [r4, #28]
 800d656:	e7d6      	b.n	800d606 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d658:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d65c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d65e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d660:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d662:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800d664:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d666:	0799      	lsls	r1, r3, #30
 800d668:	d152      	bne.n	800d710 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d66a:	f7ff ffa9 	bl	800d5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff ffaa 	bl	800d5c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d674:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d676:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d678:	7722      	strb	r2, [r4, #28]
 800d67a:	e7be      	b.n	800d5fa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d67c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d680:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d682:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d684:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d686:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800d688:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d68a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d68e:	d13c      	bne.n	800d70a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d690:	f7ff ff96 	bl	800d5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d694:	4620      	mov	r0, r4
 800d696:	f7ff ff97 	bl	800d5c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d69a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d69c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d69e:	7722      	strb	r2, [r4, #28]
 800d6a0:	e7a5      	b.n	800d5ee <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6a2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6a6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6a8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6aa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	079b      	lsls	r3, r3, #30
 800d6b0:	d025      	beq.n	800d6fe <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800d6b2:	f7ff ff87 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6b8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ba:	7722      	strb	r2, [r4, #28]
 800d6bc:	e791      	b.n	800d5e2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d6c2:	4620      	mov	r0, r4
}
 800d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800d6ca:	f000 b85d 	b.w	800d788 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6ce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6d6:	f7fb fe8d 	bl	80093f4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	e799      	b.n	800d612 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d6e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d6e6:	f000 f851 	bl	800d78c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	e797      	b.n	800d61e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d6f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d6f6:	f7ff ff69 	bl	800d5cc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	e795      	b.n	800d62a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6fe:	f7ff ff5f 	bl	800d5c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff ff60 	bl	800d5c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800d708:	e7d5      	b.n	800d6b6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d70a:	f7ff ff5b 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800d70e:	e7c4      	b.n	800d69a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800d710:	f7ff ff58 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800d714:	e7ae      	b.n	800d674 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d716:	f7ff ff53 	bl	800d5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d71a:	4620      	mov	r0, r4
 800d71c:	f7ff ff54 	bl	800d5c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800d720:	e796      	b.n	800d650 <HAL_TIM_IRQHandler+0x80>
 800d722:	bf00      	nop

0800d724 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d724:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800d728:	2a01      	cmp	r2, #1
 800d72a:	d027      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800d72c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d72e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d730:	681a      	ldr	r2, [r3, #0]
{
 800d732:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800d734:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800d738:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d73a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d73c:	4d10      	ldr	r5, [pc, #64]	; (800d780 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800d73e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d742:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d744:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800d746:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800d748:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d74a:	d009      	beq.n	800d760 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800d74c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d750:	d006      	beq.n	800d760 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800d752:	480c      	ldr	r0, [pc, #48]	; (800d784 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800d754:	4282      	cmp	r2, r0
 800d756:	d003      	beq.n	800d760 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800d758:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d75c:	4282      	cmp	r2, r0
 800d75e:	d104      	bne.n	800d76a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d760:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d762:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d766:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d768:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d76a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800d76c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800d772:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 800d776:	4610      	mov	r0, r2
}
 800d778:	bc30      	pop	{r4, r5}
 800d77a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d77c:	2002      	movs	r0, #2
}
 800d77e:	4770      	bx	lr
 800d780:	40012c00 	.word	0x40012c00
 800d784:	40000400 	.word	0x40000400

0800d788 <HAL_TIMEx_CommutCallback>:
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop

0800d78c <HAL_TIMEx_BreakCallback>:
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop

0800d790 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d790:	2800      	cmp	r0, #0
 800d792:	d065      	beq.n	800d860 <HAL_UART_Init+0xd0>
{
 800d794:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d796:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d79a:	4604      	mov	r4, r0
 800d79c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d055      	beq.n	800d850 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d7a4:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800d7a8:	2124      	movs	r1, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800d7aa:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d7ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800d7b0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d7b2:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800d7b4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7b8:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d7ba:	4302      	orrs	r2, r0
 800d7bc:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800d7be:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7c0:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d7c2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7c4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800d7c8:	4331      	orrs	r1, r6
 800d7ca:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800d7cc:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 800d7ce:	4825      	ldr	r0, [pc, #148]	; (800d864 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 800d7d0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800d7d4:	f021 010c 	bic.w	r1, r1, #12
 800d7d8:	430a      	orrs	r2, r1
 800d7da:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7dc:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 800d7de:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d7e4:	ea42 0205 	orr.w	r2, r2, r5
 800d7e8:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800d7ea:	d036      	beq.n	800d85a <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d7ec:	f7ff faae 	bl	800cd4c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d7f0:	6862      	ldr	r2, [r4, #4]
 800d7f2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d7f6:	0092      	lsls	r2, r2, #2
 800d7f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d800:	f04f 0e64 	mov.w	lr, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d804:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800d806:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d80a:	4817      	ldr	r0, [pc, #92]	; (800d868 <HAL_UART_Init+0xd8>)
 800d80c:	6821      	ldr	r1, [r4, #0]
 800d80e:	fba0 6203 	umull	r6, r2, r0, r3
 800d812:	0952      	lsrs	r2, r2, #5
 800d814:	fb0e 3312 	mls	r3, lr, r2, r3
 800d818:	011b      	lsls	r3, r3, #4
 800d81a:	3332      	adds	r3, #50	; 0x32
 800d81c:	fba0 0303 	umull	r0, r3, r0, r3
 800d820:	0112      	lsls	r2, r2, #4
 800d822:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800d826:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d828:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 800d82a:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d82c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800d830:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d832:	694b      	ldr	r3, [r1, #20]
 800d834:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800d838:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 800d83a:	68cb      	ldr	r3, [r1, #12]
 800d83c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d840:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d842:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d844:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d848:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d84c:	6365      	str	r5, [r4, #52]	; 0x34
}
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800d850:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800d854:	f7fe f8e4 	bl	800ba20 <HAL_UART_MspInit>
 800d858:	e7a4      	b.n	800d7a4 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800d85a:	f7ff fa87 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 800d85e:	e7c7      	b.n	800d7f0 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 800d860:	2001      	movs	r0, #1
}
 800d862:	4770      	bx	lr
 800d864:	40013800 	.word	0x40013800
 800d868:	51eb851f 	.word	0x51eb851f

0800d86c <HAL_UART_Transmit>:
{
 800d86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d870:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d872:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d876:	2b20      	cmp	r3, #32
 800d878:	d16b      	bne.n	800d952 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 800d87a:	4688      	mov	r8, r1
 800d87c:	b109      	cbz	r1, 800d882 <HAL_UART_Transmit+0x16>
 800d87e:	4617      	mov	r7, r2
 800d880:	b912      	cbnz	r2, 800d888 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800d882:	2001      	movs	r0, #1
}
 800d884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d888:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d88a:	f04f 0900 	mov.w	r9, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d894:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 800d898:	f7fe f994 	bl	800bbc4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d89c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800d89e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800d8a4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800d8a6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8a8:	d056      	beq.n	800d958 <HAL_UART_Transmit+0xec>
    while (huart->TxXferCount > 0U)
 800d8aa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d07b      	beq.n	800d9aa <HAL_UART_Transmit+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	1c69      	adds	r1, r5, #1
 800d8b6:	d11b      	bne.n	800d8f0 <HAL_UART_Transmit+0x84>
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	0612      	lsls	r2, r2, #24
 800d8bc:	d5fc      	bpl.n	800d8b8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	d041      	beq.n	800d948 <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8c4:	f818 2b01 	ldrb.w	r2, [r8], #1
 800d8c8:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 800d8ca:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800d8cc:	3a01      	subs	r2, #1
 800d8ce:	b292      	uxth	r2, r2
 800d8d0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d8d2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d1ec      	bne.n	800d8b4 <HAL_UART_Transmit+0x48>
 800d8da:	1c68      	adds	r0, r5, #1
 800d8dc:	d142      	bne.n	800d964 <HAL_UART_Transmit+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	0651      	lsls	r1, r2, #25
 800d8e2:	d5fc      	bpl.n	800d8de <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800d8e4:	2320      	movs	r3, #32
 800d8e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 800d8ea:	2000      	movs	r0, #0
}
 800d8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	0617      	lsls	r7, r2, #24
 800d8f4:	d4e3      	bmi.n	800d8be <HAL_UART_Transmit+0x52>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d8f6:	b12d      	cbz	r5, 800d904 <HAL_UART_Transmit+0x98>
 800d8f8:	f7fe f964 	bl	800bbc4 <HAL_GetTick>
 800d8fc:	1b80      	subs	r0, r0, r6
 800d8fe:	4285      	cmp	r5, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d900:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d902:	d2d7      	bcs.n	800d8b4 <HAL_UART_Transmit+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	f103 020c 	add.w	r2, r3, #12
 800d908:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d90c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d910:	f103 000c 	add.w	r0, r3, #12
 800d914:	e840 2100 	strex	r1, r2, [r0]
 800d918:	2900      	cmp	r1, #0
 800d91a:	d1f3      	bne.n	800d904 <HAL_UART_Transmit+0x98>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	f103 0214 	add.w	r2, r3, #20
 800d920:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d924:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d928:	f103 0014 	add.w	r0, r3, #20
 800d92c:	e840 2100 	strex	r1, r2, [r0]
 800d930:	2900      	cmp	r1, #0
 800d932:	d1f3      	bne.n	800d91c <HAL_UART_Transmit+0xb0>
        huart->gState  = HAL_UART_STATE_READY;
 800d934:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 800d936:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        huart->gState  = HAL_UART_STATE_READY;
 800d93a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d93e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 800d942:	2003      	movs	r0, #3
}
 800d944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d948:	f839 2b02 	ldrh.w	r2, [r9], #2
 800d94c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d950:	e7ba      	b.n	800d8c8 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 800d952:	2002      	movs	r0, #2
}
 800d954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1a5      	bne.n	800d8aa <HAL_UART_Transmit+0x3e>
 800d95e:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800d960:	4698      	mov	r8, r3
 800d962:	e7a2      	b.n	800d8aa <HAL_UART_Transmit+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	0652      	lsls	r2, r2, #25
 800d968:	d4bc      	bmi.n	800d8e4 <HAL_UART_Transmit+0x78>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d96a:	b12d      	cbz	r5, 800d978 <HAL_UART_Transmit+0x10c>
 800d96c:	f7fe f92a 	bl	800bbc4 <HAL_GetTick>
 800d970:	1b83      	subs	r3, r0, r6
 800d972:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d974:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d976:	d2b0      	bcs.n	800d8da <HAL_UART_Transmit+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	f103 020c 	add.w	r2, r3, #12
 800d97c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d984:	f103 000c 	add.w	r0, r3, #12
 800d988:	e840 2100 	strex	r1, r2, [r0]
 800d98c:	2900      	cmp	r1, #0
 800d98e:	d1f3      	bne.n	800d978 <HAL_UART_Transmit+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d990:	f103 0214 	add.w	r2, r3, #20
 800d994:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d998:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99c:	f103 0014 	add.w	r0, r3, #20
 800d9a0:	e840 2100 	strex	r1, r2, [r0]
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	d1f3      	bne.n	800d990 <HAL_UART_Transmit+0x124>
 800d9a8:	e7c4      	b.n	800d934 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	e795      	b.n	800d8da <HAL_UART_Transmit+0x6e>
 800d9ae:	bf00      	nop

0800d9b0 <HAL_UART_Receive>:
{
 800d9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b4:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800d9b6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d9ba:	2b20      	cmp	r3, #32
 800d9bc:	d176      	bne.n	800daac <HAL_UART_Receive+0xfc>
    if ((pData == NULL) || (Size == 0U))
 800d9be:	4688      	mov	r8, r1
 800d9c0:	b109      	cbz	r1, 800d9c6 <HAL_UART_Receive+0x16>
 800d9c2:	4616      	mov	r6, r2
 800d9c4:	b912      	cbnz	r2, 800d9cc <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 800d9c6:	2001      	movs	r0, #1
}
 800d9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d9cc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ce:	f04f 0900 	mov.w	r9, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d9d8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9dc:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800d9e0:	f7fe f8f0 	bl	800bbc4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9e4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800d9e6:	4605      	mov	r5, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800d9ec:	85a6      	strh	r6, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d9ee:	85e6      	strh	r6, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9f0:	d05f      	beq.n	800dab2 <HAL_UART_Receive+0x102>
    while (huart->RxXferCount > 0U)
 800d9f2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	b1eb      	cbz	r3, 800da34 <HAL_UART_Receive+0x84>
 800d9f8:	1c78      	adds	r0, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	d120      	bne.n	800da40 <HAL_UART_Receive+0x90>
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	0691      	lsls	r1, r2, #26
 800da02:	d5fc      	bpl.n	800d9fe <HAL_UART_Receive+0x4e>
      if (pdata8bits == NULL)
 800da04:	f1b8 0f00 	cmp.w	r8, #0
 800da08:	d04a      	beq.n	800daa0 <HAL_UART_Receive+0xf0>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800da0a:	68a2      	ldr	r2, [r4, #8]
 800da0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800da10:	d004      	beq.n	800da1c <HAL_UART_Receive+0x6c>
 800da12:	2a00      	cmp	r2, #0
 800da14:	d140      	bne.n	800da98 <HAL_UART_Receive+0xe8>
 800da16:	6922      	ldr	r2, [r4, #16]
 800da18:	2a00      	cmp	r2, #0
 800da1a:	d13d      	bne.n	800da98 <HAL_UART_Receive+0xe8>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 800da24:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800da26:	3a01      	subs	r2, #1
 800da28:	b292      	uxth	r2, r2
 800da2a:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800da2c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800da2e:	b29b      	uxth	r3, r3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e1      	bne.n	800d9f8 <HAL_UART_Receive+0x48>
    huart->RxState = HAL_UART_STATE_READY;
 800da34:	2320      	movs	r3, #32
 800da36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 800da3a:	2000      	movs	r0, #0
}
 800da3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	0692      	lsls	r2, r2, #26
 800da44:	d4de      	bmi.n	800da04 <HAL_UART_Receive+0x54>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800da46:	b12f      	cbz	r7, 800da54 <HAL_UART_Receive+0xa4>
 800da48:	f7fe f8bc 	bl	800bbc4 <HAL_GetTick>
 800da4c:	1b40      	subs	r0, r0, r5
 800da4e:	4287      	cmp	r7, r0
 800da50:	d2d2      	bcs.n	800d9f8 <HAL_UART_Receive+0x48>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da52:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da54:	f103 020c 	add.w	r2, r3, #12
 800da58:	e852 2f00 	ldrex	r2, [r2]
 800da5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	f103 000c 	add.w	r0, r3, #12
 800da64:	e840 2100 	strex	r1, r2, [r0]
 800da68:	2900      	cmp	r1, #0
 800da6a:	d1f3      	bne.n	800da54 <HAL_UART_Receive+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6c:	f103 0214 	add.w	r2, r3, #20
 800da70:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da74:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da78:	f103 0014 	add.w	r0, r3, #20
 800da7c:	e840 2100 	strex	r1, r2, [r0]
 800da80:	2900      	cmp	r1, #0
 800da82:	d1f3      	bne.n	800da6c <HAL_UART_Receive+0xbc>
        huart->gState  = HAL_UART_STATE_READY;
 800da84:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 800da86:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        huart->gState  = HAL_UART_STATE_READY;
 800da8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800da8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        return HAL_TIMEOUT;
 800da92:	2003      	movs	r0, #3
}
 800da94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9e:	e7bf      	b.n	800da20 <HAL_UART_Receive+0x70>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa6:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 800daaa:	e7bb      	b.n	800da24 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800daac:	2002      	movs	r0, #2
}
 800daae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d19c      	bne.n	800d9f2 <HAL_UART_Receive+0x42>
 800dab8:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800daba:	4698      	mov	r8, r3
 800dabc:	e799      	b.n	800d9f2 <HAL_UART_Receive+0x42>
 800dabe:	bf00      	nop

0800dac0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800dac0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800dac4:	2b20      	cmp	r3, #32
 800dac6:	d11e      	bne.n	800db06 <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 800dac8:	b101      	cbz	r1, 800dacc <HAL_UART_Receive_IT+0xc>
 800daca:	b90a      	cbnz	r2, 800dad0 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 800dacc:	2001      	movs	r0, #1
}
 800dace:	4770      	bx	lr
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dad2:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800dad6:	6281      	str	r1, [r0, #40]	; 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dad8:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dada:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxXferSize = Size;
 800dadc:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800dade:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800dae2:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dae4:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dae8:	b119      	cbz	r1, 800daf2 <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800daf0:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800daf2:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 800daf4:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800daf6:	f042 0201 	orr.w	r2, r2, #1
 800dafa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	f042 0220 	orr.w	r2, r2, #32
 800db02:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 800db04:	4770      	bx	lr
    return HAL_BUSY;
 800db06:	2002      	movs	r0, #2
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop

0800db0c <HAL_UART_TxCpltCallback>:
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop

0800db10 <HAL_UART_ErrorCallback>:
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop

0800db14 <UART_DMAAbortOnError>:
{
 800db14:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800db16:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db18:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800db1a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db1c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800db1e:	f7ff fff7 	bl	800db10 <HAL_UART_ErrorCallback>
}
 800db22:	bd08      	pop	{r3, pc}

0800db24 <HAL_UARTEx_RxEventCallback>:
}
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db28:	6883      	ldr	r3, [r0, #8]
 800db2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db2e:	d045      	beq.n	800dbbc <UART_Receive_IT.part.0.isra.0+0x94>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800db30:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800db32:	2b00      	cmp	r3, #0
 800db34:	d03a      	beq.n	800dbac <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800db36:	6803      	ldr	r3, [r0, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db3e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800db40:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800db42:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 800db44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 800db46:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800db48:	3b01      	subs	r3, #1
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d133      	bne.n	800dbba <UART_Receive_IT.part.0.isra.0+0x92>
      huart->RxState = HAL_UART_STATE_READY;
 800db52:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800db56:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800db58:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800db5a:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800db5c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800db5e:	f021 0120 	bic.w	r1, r1, #32
 800db62:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800db64:	68d1      	ldr	r1, [r2, #12]
 800db66:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800db6a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800db6c:	6951      	ldr	r1, [r2, #20]
 800db6e:	f021 0101 	bic.w	r1, r1, #1
 800db72:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800db74:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db78:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800db7c:	2901      	cmp	r1, #1
 800db7e:	d127      	bne.n	800dbd0 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db80:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db82:	f102 030c 	add.w	r3, r2, #12
 800db86:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db8a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8e:	f102 0c0c 	add.w	ip, r2, #12
 800db92:	e84c 3100 	strex	r1, r3, [ip]
 800db96:	2900      	cmp	r1, #0
 800db98:	d1f3      	bne.n	800db82 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800db9a:	6813      	ldr	r3, [r2, #0]
 800db9c:	06db      	lsls	r3, r3, #27
 800db9e:	d421      	bmi.n	800dbe4 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dba0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800dba2:	f7ff ffbf 	bl	800db24 <HAL_UARTEx_RxEventCallback>
}
 800dba6:	b003      	add	sp, #12
 800dba8:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dbac:	6903      	ldr	r3, [r0, #16]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1c1      	bne.n	800db36 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbb2:	6803      	ldr	r3, [r0, #0]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	7013      	strb	r3, [r2, #0]
 800dbb8:	e7c2      	b.n	800db40 <UART_Receive_IT.part.0.isra.0+0x18>
 800dbba:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbbc:	6903      	ldr	r3, [r0, #16]
 800dbbe:	b963      	cbnz	r3, 800dbda <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dbc0:	6803      	ldr	r3, [r0, #0]
 800dbc2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbca:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800dbce:	e7b9      	b.n	800db44 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 800dbd0:	f7fb ff52 	bl	8009a78 <HAL_UART_RxCpltCallback>
}
 800dbd4:	b003      	add	sp, #12
 800dbd6:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbda:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dbdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	7013      	strb	r3, [r2, #0]
 800dbe2:	e7ad      	b.n	800db40 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	6813      	ldr	r3, [r2, #0]
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	6853      	ldr	r3, [r2, #4]
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	9b01      	ldr	r3, [sp, #4]
 800dbf2:	e7d5      	b.n	800dba0 <UART_Receive_IT.part.0.isra.0+0x78>

0800dbf4 <HAL_UART_IRQHandler>:
{
 800dbf4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dbf6:	6803      	ldr	r3, [r0, #0]
{
 800dbf8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dbfa:	681a      	ldr	r2, [r3, #0]
{
 800dbfc:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800dbfe:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc02:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc04:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800dc06:	d16f      	bne.n	800dce8 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc08:	0695      	lsls	r5, r2, #26
 800dc0a:	d502      	bpl.n	800dc12 <HAL_UART_IRQHandler+0x1e>
 800dc0c:	068d      	lsls	r5, r1, #26
 800dc0e:	f100 80b3 	bmi.w	800dd78 <HAL_UART_IRQHandler+0x184>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dc14:	2801      	cmp	r0, #1
 800dc16:	d00b      	beq.n	800dc30 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dc18:	0610      	lsls	r0, r2, #24
 800dc1a:	d502      	bpl.n	800dc22 <HAL_UART_IRQHandler+0x2e>
 800dc1c:	060d      	lsls	r5, r1, #24
 800dc1e:	f100 80b5 	bmi.w	800dd8c <HAL_UART_IRQHandler+0x198>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dc22:	0650      	lsls	r0, r2, #25
 800dc24:	d502      	bpl.n	800dc2c <HAL_UART_IRQHandler+0x38>
 800dc26:	064a      	lsls	r2, r1, #25
 800dc28:	f100 80cf 	bmi.w	800ddca <HAL_UART_IRQHandler+0x1d6>
}
 800dc2c:	b003      	add	sp, #12
 800dc2e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dc30:	06d5      	lsls	r5, r2, #27
 800dc32:	d5f1      	bpl.n	800dc18 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dc34:	06c8      	lsls	r0, r1, #27
 800dc36:	d5ef      	bpl.n	800dc18 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc38:	2200      	movs	r2, #0
 800dc3a:	9201      	str	r2, [sp, #4]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	9201      	str	r2, [sp, #4]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	9201      	str	r2, [sp, #4]
 800dc44:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc46:	695a      	ldr	r2, [r3, #20]
 800dc48:	0655      	lsls	r5, r2, #25
 800dc4a:	f140 8118 	bpl.w	800de7e <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dc50:	6802      	ldr	r2, [r0, #0]
 800dc52:	6852      	ldr	r2, [r2, #4]
 800dc54:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800dc56:	2a00      	cmp	r2, #0
 800dc58:	d0e8      	beq.n	800dc2c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc5a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800dc5c:	4291      	cmp	r1, r2
 800dc5e:	d9e5      	bls.n	800dc2c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800dc60:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc62:	6982      	ldr	r2, [r0, #24]
 800dc64:	2a20      	cmp	r2, #32
 800dc66:	d036      	beq.n	800dcd6 <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	f103 020c 	add.w	r2, r3, #12
 800dc6c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc74:	f103 050c 	add.w	r5, r3, #12
 800dc78:	e845 2100 	strex	r1, r2, [r5]
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d1f3      	bne.n	800dc68 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc80:	f103 0214 	add.w	r2, r3, #20
 800dc84:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc88:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	f103 0514 	add.w	r5, r3, #20
 800dc90:	e845 2100 	strex	r1, r2, [r5]
 800dc94:	2900      	cmp	r1, #0
 800dc96:	d1f3      	bne.n	800dc80 <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc98:	f103 0214 	add.w	r2, r3, #20
 800dc9c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca4:	f103 0514 	add.w	r5, r3, #20
 800dca8:	e845 2100 	strex	r1, r2, [r5]
 800dcac:	2900      	cmp	r1, #0
 800dcae:	d1f3      	bne.n	800dc98 <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb6:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb8:	f103 020c 	add.w	r2, r3, #12
 800dcbc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcc0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	f103 050c 	add.w	r5, r3, #12
 800dcc8:	e845 2100 	strex	r1, r2, [r5]
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d1f3      	bne.n	800dcb8 <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dcd0:	f7fe fb2c 	bl	800c32c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcd4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dcd6:	2302      	movs	r3, #2
 800dcd8:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcda:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800dcdc:	4620      	mov	r0, r4
 800dcde:	1ac9      	subs	r1, r1, r3
 800dce0:	b289      	uxth	r1, r1
 800dce2:	f7ff ff1f 	bl	800db24 <HAL_UARTEx_RxEventCallback>
 800dce6:	e7a1      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dce8:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dcec:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800dcf0:	4328      	orrs	r0, r5
 800dcf2:	d08e      	beq.n	800dc12 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dcf4:	07d0      	lsls	r0, r2, #31
 800dcf6:	d505      	bpl.n	800dd04 <HAL_UART_IRQHandler+0x110>
 800dcf8:	05c8      	lsls	r0, r1, #23
 800dcfa:	d503      	bpl.n	800dd04 <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcfc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dcfe:	f040 0001 	orr.w	r0, r0, #1
 800dd02:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd04:	0750      	lsls	r0, r2, #29
 800dd06:	d532      	bpl.n	800dd6e <HAL_UART_IRQHandler+0x17a>
 800dd08:	b14d      	cbz	r5, 800dd1e <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dd0c:	f040 0002 	orr.w	r0, r0, #2
 800dd10:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd12:	0790      	lsls	r0, r2, #30
 800dd14:	d503      	bpl.n	800dd1e <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd16:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dd18:	f040 0004 	orr.w	r0, r0, #4
 800dd1c:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dd1e:	0710      	lsls	r0, r2, #28
 800dd20:	d507      	bpl.n	800dd32 <HAL_UART_IRQHandler+0x13e>
 800dd22:	f001 0020 	and.w	r0, r1, #32
 800dd26:	4328      	orrs	r0, r5
 800dd28:	d003      	beq.n	800dd32 <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dd2c:	f040 0008 	orr.w	r0, r0, #8
 800dd30:	6460      	str	r0, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd32:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dd34:	2800      	cmp	r0, #0
 800dd36:	f43f af79 	beq.w	800dc2c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dd3a:	0690      	lsls	r0, r2, #26
 800dd3c:	d509      	bpl.n	800dd52 <HAL_UART_IRQHandler+0x15e>
 800dd3e:	0689      	lsls	r1, r1, #26
 800dd40:	d507      	bpl.n	800dd52 <HAL_UART_IRQHandler+0x15e>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd42:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800dd46:	2a22      	cmp	r2, #34	; 0x22
 800dd48:	d103      	bne.n	800dd52 <HAL_UART_IRQHandler+0x15e>
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7ff feec 	bl	800db28 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dd54:	6c61      	ldr	r1, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dd56:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dd5a:	f001 0108 	and.w	r1, r1, #8
 800dd5e:	ea52 0501 	orrs.w	r5, r2, r1
 800dd62:	d13d      	bne.n	800dde0 <HAL_UART_IRQHandler+0x1ec>
        HAL_UART_ErrorCallback(huart);
 800dd64:	4620      	mov	r0, r4
 800dd66:	f7ff fed3 	bl	800db10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6a:	6465      	str	r5, [r4, #68]	; 0x44
 800dd6c:	e75e      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd6e:	0790      	lsls	r0, r2, #30
 800dd70:	d5d5      	bpl.n	800dd1e <HAL_UART_IRQHandler+0x12a>
 800dd72:	2d00      	cmp	r5, #0
 800dd74:	d1cf      	bne.n	800dd16 <HAL_UART_IRQHandler+0x122>
 800dd76:	e7d2      	b.n	800dd1e <HAL_UART_IRQHandler+0x12a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd78:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800dd7c:	2b22      	cmp	r3, #34	; 0x22
 800dd7e:	f47f af55 	bne.w	800dc2c <HAL_UART_IRQHandler+0x38>
}
 800dd82:	b003      	add	sp, #12
 800dd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd88:	f7ff bece 	b.w	800db28 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd8c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800dd90:	2a21      	cmp	r2, #33	; 0x21
 800dd92:	f47f af4b 	bne.w	800dc2c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd96:	68a2      	ldr	r2, [r4, #8]
 800dd98:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800dd9c:	f000 80aa 	beq.w	800def4 <HAL_UART_IRQHandler+0x300>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dda0:	6a22      	ldr	r2, [r4, #32]
 800dda2:	1c51      	adds	r1, r2, #1
 800dda4:	6221      	str	r1, [r4, #32]
 800dda6:	7812      	ldrb	r2, [r2, #0]
 800dda8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800ddaa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800ddac:	3a01      	subs	r2, #1
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	84e2      	strh	r2, [r4, #38]	; 0x26
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	f47f af3a 	bne.w	800dc2c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ddb8:	68da      	ldr	r2, [r3, #12]
 800ddba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddbe:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ddc0:	68da      	ldr	r2, [r3, #12]
 800ddc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddc6:	60da      	str	r2, [r3, #12]
 800ddc8:	e730      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800ddca:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ddcc:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800ddce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ddd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddd4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800ddd6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 800ddda:	f7ff fe97 	bl	800db0c <HAL_UART_TxCpltCallback>
    return;
 800ddde:	e725      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde0:	f103 020c 	add.w	r2, r3, #12
 800dde4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dde8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddec:	f103 000c 	add.w	r0, r3, #12
 800ddf0:	e840 2100 	strex	r1, r2, [r0]
 800ddf4:	2900      	cmp	r1, #0
 800ddf6:	d1f3      	bne.n	800dde0 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf8:	f103 0214 	add.w	r2, r3, #20
 800ddfc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de00:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de04:	f103 0014 	add.w	r0, r3, #20
 800de08:	e840 2100 	strex	r1, r2, [r0]
 800de0c:	2900      	cmp	r1, #0
 800de0e:	d1f3      	bne.n	800ddf8 <HAL_UART_IRQHandler+0x204>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800de12:	2a01      	cmp	r2, #1
 800de14:	d022      	beq.n	800de5c <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de16:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800de18:	2120      	movs	r1, #32
 800de1a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de1e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de20:	695a      	ldr	r2, [r3, #20]
 800de22:	0652      	lsls	r2, r2, #25
 800de24:	d527      	bpl.n	800de76 <HAL_UART_IRQHandler+0x282>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	f103 0214 	add.w	r2, r3, #20
 800de2a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de32:	f103 0014 	add.w	r0, r3, #20
 800de36:	e840 2100 	strex	r1, r2, [r0]
 800de3a:	2900      	cmp	r1, #0
 800de3c:	d1f3      	bne.n	800de26 <HAL_UART_IRQHandler+0x232>
          if (huart->hdmarx != NULL)
 800de3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800de40:	b1c8      	cbz	r0, 800de76 <HAL_UART_IRQHandler+0x282>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de42:	4b32      	ldr	r3, [pc, #200]	; (800df0c <HAL_UART_IRQHandler+0x318>)
 800de44:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de46:	f7fe fa95 	bl	800c374 <HAL_DMA_Abort_IT>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	f43f aeee 	beq.w	800dc2c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800de52:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800de54:	b003      	add	sp, #12
 800de56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de5a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	f103 020c 	add.w	r2, r3, #12
 800de60:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de64:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de68:	f103 000c 	add.w	r0, r3, #12
 800de6c:	e840 2100 	strex	r1, r2, [r0]
 800de70:	2900      	cmp	r1, #0
 800de72:	d1f3      	bne.n	800de5c <HAL_UART_IRQHandler+0x268>
 800de74:	e7cf      	b.n	800de16 <HAL_UART_IRQHandler+0x222>
            HAL_UART_ErrorCallback(huart);
 800de76:	4620      	mov	r0, r4
 800de78:	f7ff fe4a 	bl	800db10 <HAL_UART_ErrorCallback>
 800de7c:	e6d6      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de7e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 800de80:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de82:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 800de84:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de86:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800de88:	2a00      	cmp	r2, #0
 800de8a:	f43f aecf 	beq.w	800dc2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de8e:	1a41      	subs	r1, r0, r1
 800de90:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800de92:	2900      	cmp	r1, #0
 800de94:	f43f aeca 	beq.w	800dc2c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de98:	f103 020c 	add.w	r2, r3, #12
 800de9c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dea0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea4:	f103 050c 	add.w	r5, r3, #12
 800dea8:	e845 2000 	strex	r0, r2, [r5]
 800deac:	2800      	cmp	r0, #0
 800deae:	d1f3      	bne.n	800de98 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb0:	f103 0214 	add.w	r2, r3, #20
 800deb4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deb8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	f103 0514 	add.w	r5, r3, #20
 800dec0:	e845 2000 	strex	r0, r2, [r5]
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d1f3      	bne.n	800deb0 <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 800dec8:	2220      	movs	r2, #32
 800deca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dece:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded0:	f103 020c 	add.w	r2, r3, #12
 800ded4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ded8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dedc:	f103 050c 	add.w	r5, r3, #12
 800dee0:	e845 2000 	strex	r0, r2, [r5]
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d1f3      	bne.n	800ded0 <HAL_UART_IRQHandler+0x2dc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dee8:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800deea:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800deec:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800deee:	f7ff fe19 	bl	800db24 <HAL_UARTEx_RxEventCallback>
 800def2:	e69b      	b.n	800dc2c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800def4:	6922      	ldr	r2, [r4, #16]
 800def6:	2a00      	cmp	r2, #0
 800def8:	f47f af52 	bne.w	800dda0 <HAL_UART_IRQHandler+0x1ac>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800defc:	6a22      	ldr	r2, [r4, #32]
 800defe:	f832 1b02 	ldrh.w	r1, [r2], #2
 800df02:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800df06:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800df08:	6222      	str	r2, [r4, #32]
 800df0a:	e74e      	b.n	800ddaa <HAL_UART_IRQHandler+0x1b6>
 800df0c:	0800db15 	.word	0x0800db15

0800df10 <memset>:
 800df10:	4603      	mov	r3, r0
 800df12:	4402      	add	r2, r0
 800df14:	4293      	cmp	r3, r2
 800df16:	d100      	bne.n	800df1a <memset+0xa>
 800df18:	4770      	bx	lr
 800df1a:	f803 1b01 	strb.w	r1, [r3], #1
 800df1e:	e7f9      	b.n	800df14 <memset+0x4>

0800df20 <__libc_init_array>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	2600      	movs	r6, #0
 800df24:	4d0c      	ldr	r5, [pc, #48]	; (800df58 <__libc_init_array+0x38>)
 800df26:	4c0d      	ldr	r4, [pc, #52]	; (800df5c <__libc_init_array+0x3c>)
 800df28:	1b64      	subs	r4, r4, r5
 800df2a:	10a4      	asrs	r4, r4, #2
 800df2c:	42a6      	cmp	r6, r4
 800df2e:	d109      	bne.n	800df44 <__libc_init_array+0x24>
 800df30:	f000 f81a 	bl	800df68 <_init>
 800df34:	2600      	movs	r6, #0
 800df36:	4d0a      	ldr	r5, [pc, #40]	; (800df60 <__libc_init_array+0x40>)
 800df38:	4c0a      	ldr	r4, [pc, #40]	; (800df64 <__libc_init_array+0x44>)
 800df3a:	1b64      	subs	r4, r4, r5
 800df3c:	10a4      	asrs	r4, r4, #2
 800df3e:	42a6      	cmp	r6, r4
 800df40:	d105      	bne.n	800df4e <__libc_init_array+0x2e>
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	f855 3b04 	ldr.w	r3, [r5], #4
 800df48:	4798      	blx	r3
 800df4a:	3601      	adds	r6, #1
 800df4c:	e7ee      	b.n	800df2c <__libc_init_array+0xc>
 800df4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df52:	4798      	blx	r3
 800df54:	3601      	adds	r6, #1
 800df56:	e7f2      	b.n	800df3e <__libc_init_array+0x1e>
 800df58:	0800e3d4 	.word	0x0800e3d4
 800df5c:	0800e3d4 	.word	0x0800e3d4
 800df60:	0800e3d4 	.word	0x0800e3d4
 800df64:	0800e3d8 	.word	0x0800e3d8

0800df68 <_init>:
 800df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6a:	bf00      	nop
 800df6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df6e:	bc08      	pop	{r3}
 800df70:	469e      	mov	lr, r3
 800df72:	4770      	bx	lr

0800df74 <_fini>:
 800df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df76:	bf00      	nop
 800df78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7a:	bc08      	pop	{r3}
 800df7c:	469e      	mov	lr, r3
 800df7e:	4770      	bx	lr
