/* USER CODE BEGIN Header */
// TODO: Remember to remove the @ref green_LED1 GPIO configuration before using this template, since that is just shown here as a didactical example.
/** @file
 *
 * @defgroup main Main module
 * @{
 *
 * @brief	This is the Main Module, which is where the main part of the application of the whole code is executed.
 *
 * @details	The purpose of this module is to provide a template code for any general purpose Bootloader that is desired
 *          to be developed for an STM32 MCU/MPU in which such a template already provides the code to manage and handle
 *          Firmware Updates via the Mortrack's ETX OTA Protocol that uses the @ref firmware_update_config .
 *
 * @note    The @ref main template is actually functioning as a Bootloader Firmware, which has an Application Firmware
 *          counterpart that should be located in an independent project to this, but that should be located just
 *          next to the root folder where the @ref main project's File Path is located at.
 *
 * @details The logic contemplated in this @ref main template assumes that either Bootloader or Application Firmware
 *          Updates will be installed by this Bootloader Firmware software. The way that this will work is that if this
 *          Bootloader Firmware is currently located at @ref BOOTLOADER_FIRMWARE_ADDRESS , then in the case of receiving
 *          a request for an Application Firmware Update, this will be made normally and by that, it is meant that any
 *          received Application Firmware Images will be installed at @ref APLICATION_FIRMWARE_ADDRESS . However, in the
 *          case of receiving a Bootloader Firmware Image, then, this will be temporarily stored at
 *          @ref APLICATION_FIRMWARE_ADDRESS and then our MCU/MPU will be made to reset. That way, after reset, our
 *          MCU/MPU will be made to start running at the Bootloader Firmware Image temporarily stored at
 *          @ref APLICATION_FIRMWARE_ADDRESS by another program known as Pre-Bootloader (made by Mortrack) that will
 *          serve as a handler for determining whether to make our MCU/MPU to start running at whatever Firmware Image
 *          our MCU/MPU has installed at @ref BOOTLOADER_FIRMWARE_ADDRESS or at @ref APLICATION_FIRMWARE_ADDRESS . Then,
 *          this @ref main program (currently running at @ref APLICATION_FIRMWARE_ADDRESS ) will install the Bootloader
 *          Firmware Image currently at @ref APLICATION_FIRMWARE_ADDRESS into @ref BOOTLOADER_FIRMWARE_ADDRESS .
 * @note    This @ref main program expects our MCU/MPU to have an Application Firmware counterpart to exist, which is
 *          where the implementer's actual application purpose for our MCU/MPU should lie on.
 *
 * @author 	Cesar Miranda Meza (cmirandameza3@hotmail.com)
 * @date	November 15, 2023.
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>	// Library from which "printf" is located at.
#include <stdint.h> // This library contains the aliases: uint8_t, uint16_t, uint32_t, etc.
#include "firmware_update_config.h" // We call the library that holds the Firmware Update Configurations sub-module.
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BOOTLOADER_FIRMWARE_ADDRESS					(ETX_BL_FLASH_ADDR)						/**< @brief Designated Memory Location address for the Bootloader Firmware. */
#define BOOTLOADER_FIRMWARE_RESET_HANDLER_ADDRESS 	(BOOTLOADER_FIRMWARE_ADDRESS + 4U)		/**< @brief Designated Memory Location address for the Reset Handler of the Bootloader Firmware. */
#define APLICATION_FIRMWARE_ADDRESS					(ETX_APP_FLASH_ADDR)					/**< @brief Designated Memory Location address for the Application Firmware. */
#define APPLICATION_FIRMWARE_RESET_HANDLER_ADDRESS 	(APLICATION_FIRMWARE_ADDRESS + 4U)		/**< @brief Designated Memory Location address for the Reset Handler of the Application Firmware. */
#define MAJOR 										(0)										/**< @brief Major version number of our MCU/MPU's Pre-Bootloader Firmware. */
#define MINOR 										(3)										/**< @brief Minor version number of our MCU/MPU's Pre-Bootloader Firmware. */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
const uint8_t pre_BL_version[2] = {MAJOR, MINOR};   	/**< @brief Global array variable used to hold the Major and Minor version number of our MCU/MPU's Pre-Bootloader Firmware in the 1st and 2nd byte respectively. */
firmware_update_config_data_t fw_config;				/**< @brief Global struct used to either pass to it the data that we want to write into the designated Flash Memory pages of the @ref firmware_update_config sub-module or, in the case of a read request, where that sub-module will write the latest data contained in the sub-module. */

/**@brief	ETX OTA Exception codes.
 *
 * @details	These Exception Codes are returned by the functions of the @ref bl_side_firmware_update module to indicate the
 *          resulting status of having executed the process contained in each of those functions. For example, to
 *          indicate that the process executed by a certain function was successful or that it has failed.
 */
typedef enum
{
	PRE_BL_EC_OK       = 0U,    //!< PRE Bootloader process was successful. @note The code from the @ref HAL_ret_handler function contemplates that this value will match the one given for \c HAL_OK from @ref HAL_StatusTypeDef .
	PRE_BL_EC_ERR      = 4U,    //!< PRE Bootloader process has failed.
} PRE_BL_Status;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/**@brief	Initializes the @ref firmware_update_config sub-module and then loads the latest data that has been written
 *          into it, if there is any.
 *
 * @details	In case that all the processes conclude successfully, the latest data of the @ref firmware_update_config
 *          sub-module will be copied into the global struct \c fw_config .
 *
 * @details	A maximum of three attempts to initialize this module will be made, with a delay of 0.5 seconds each.
 *
 * @retval  FIRM_UPDT_CONF_EC_OK
 * @retval	FIRM_UPDT_CONF_EC_ERR
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @date	November 15, 2023
 */
static FirmUpdConf_Status custom_firmware_update_config_init();

/**@brief	Validates the CRC of our MCU/MPU's current Bootloader Firmware.
 *
 * @details	This function reads the data stored in the @ref firmware_update_config sub-module to get the recorded CRC of
 *          the Bootloader Firmware and it calculates the CRC of the actual Bootloader Firmware currently installed in
 *          our MCU/MPU. After this, both CRCs are used for validating our MCU/MPU's current Bootloader Firmware.
 *
 * @retval	ETX_OTA_EC_OK	if both the Calculated and Recorded CRCs of our MCU/MPU's Bootloader Firmware match.
 * @retval	ETX_OTA_EC_ERR	otherwise.
 *
 * @author	César Miranda Meza
 * @date	November 15, 2023
 */
static PRE_BL_Status validate_bootloader_firmware();

/**@brief	Validates the CRC of our MCU/MPU's current Application Firmware.
 *
 * @details	This function reads the data stored in the @ref firmware_update_config sub-module to get the recorded CRC of
 *          the Application Firmware and it calculates the CRC of the actual Application Firmware currently installed in
 *          our MCU/MPU. After this, both CRCs are used for validating our MCU/MPU's current Application Firmware.
 *
 * @retval	ETX_OTA_EC_OK	if both the Calculated and Recorded CRCs of our MCU/MPU's Application Firmware match.
 * @retval	ETX_OTA_EC_ERR	otherwise.
 *
 * @author	César Miranda Meza
 * @date	November 15, 2023
 */
static PRE_BL_Status validate_application_firmware();

/**@brief	Makes our MCU/MPU to jump into its Bootloader Firmware.
 *
 * @author	César Miranda Meza
 * @date	November 15, 2023
 */
static void goto_bootloader_firmware(void);

/**@brief	Makes our MCU/MPU to jump into its Application Firmware.
 *
 * @author	César Miranda Meza
 * @date	November 15, 2023
 */
static void goto_application_firmware(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /** <b>Local variable is_app_fw_validation_ok:</b> Flag used to indicate whether the Application Firmware has been successfully validated via its CRC with a \c 1 or, otherwise with a \c 0 . */
  uint8_t is_app_fw_validation_ok = 1;
  /** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref HM10_Clone_Status function type. */
  uint8_t ret;

  /* We initialize the Firmware Update Configurations sub-module to be able to write and read data from it. */
  ret = custom_firmware_update_config_init();
  if (ret != FIRM_UPDT_CONF_EC_OK)
  {
	  while (1);
  }

  /* Validate if there is a Bootloader Firmware Image pending to be installed and, if true, install it. Otherwise, continue with the program. */
  switch (fw_config.is_bl_fw_install_pending)
  {
	  case NOT_PENDING:
		  goto_bootloader_firmware();
	  case IS_PENDING:
		  ret = validate_application_firmware();
		  if (ret != PRE_BL_EC_OK)
		  {
			  goto_bootloader_firmware();
		  }
		  s
	  default:
		  while (1);
  }







  /*
  switch (ret)
  {
  case ETX_OTA_EC_OK:
	  HAL_NVIC_SystemReset();
	  break;
  case ETX_OTA_EC_NTU:
	  break;
  default:
	  while (1);
  }
  */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

static FirmUpdConf_Status custom_firmware_update_config_init()
{
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
	int16_t ret;
	/** <b>Local static variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
	static uint8_t attempts = 0;
	/** <b>Local variable end_tick:</b> Defines the HAL Tick that our MCU/MPU needs to reach so that 0.5 seconds have passed with respect to the moment that this function is called. */
	uint32_t end_tick = HAL_GetTick() + 500;
	/** <b>Local variable current_tick:</b> Current HAL Tick in our MCU/MPU. */
	uint32_t current_tick;

	if (attempts > 2)
	{
		return FIRM_UPDT_CONF_EC_ERR;
	}

	/* Delay of 500 milliseconds. */
	while (current_tick < end_tick)
	{
		current_tick = HAL_GetTick();
	}

	/* We initialize the Firmware Update Configurations sub-module. */
	ret = firmware_update_configurations_init();
    attempts++;
	if (ret != FIRM_UPDT_CONF_EC_OK)
	{
		ret = custom_firmware_update_config_init();
        return ret;
	}

	/* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
	firmware_update_configurations_read(&fw_config);

	return FIRM_UPDT_CONF_EC_OK;
}

static PRE_BL_Status validate_bootloader_firmware()
{
	/* Validating the Bootloader Firmware of our MCU/MPU. */
	if ((fw_config.BL_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.BL_fw_size==0x00000000))
	{
		return PRE_BL_EC_ERR;
	}

	if (fw_config.BL_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
	{
		return PRE_BL_EC_ERR;
	}

	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Bootloader Firmware. */
	uint32_t cal_crc = CRC32((uint8_t *) BOOTLOADER_FIRMWARE_ADDRESS, fw_config.BL_fw_size);
	if (cal_crc != fw_config.BL_fw_rec_crc)
	{
		return PRE_BL_EC_ERR;
	}

	return PRE_BL_EC_OK;
}

static PRE_BL_Status validate_application_firmware()
{
	/* Validating the Application Firmware of our MCU/MPU. */
    if ((fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
	{
		return PRE_BL_EC_ERR;
	}

    if (fw_config.App_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
    {
        return PRE_BL_EC_ERR;
    }

    /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Application Firmware. */
	uint32_t cal_crc = CRC32((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
    if (cal_crc != fw_config.App_fw_rec_crc)
    {
        return PRE_BL_EC_ERR;
    }

    return PRE_BL_EC_OK;
}

static void goto_bootloader_firmware(void)
{
	/* Create function pointer with no arguments that points to the Memory Location Address of the Reset Handler of the Bootloader Firmware. */
	void (*bl_reset_handler) (void) = (void*) (*(volatile uint32_t *) (BOOTLOADER_FIRMWARE_RESET_HANDLER_ADDRESS));

	/* NOTE: Some MCUs might have already the ASM code available so that the Main Stack Pointer (MSP) is recycled, but this is not the case for all MCUs. */
	/* Therefore, if you were to need to do this from scratch, you would have to do the following: */
	//__set_MSP( ( *(volatile uint32_t *) BOOTLOADER_FIRMWARE_ADDRESS );

	/* Call the Bootloader's Reset Handler. */
	bl_reset_handler();
}

static void goto_application_firmware(void)
{
	/* Create function pointer with no arguments that points to the Memory Location Address of the Reset Handler of the Application Firmware. */
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (APPLICATION_FIRMWARE_RESET_HANDLER_ADDRESS));

	/* NOTE: Some MCUs might have already the ASM code available so that the Main Stack Pointer (MSP) is recycled, but this is not the case for all MCUs. */
	/* Therefore, if you were to need to do this from scratch, you would have to do the following: */
	//__set_MSP( ( *(volatile uint32_t *) APPLICATION_FIRMWARE_ADDRESS );

	/* Call the Application's Reset Handler. */
	app_reset_handler();
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
