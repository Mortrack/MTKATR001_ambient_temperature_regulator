
Custom_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08001800  08001800  00001800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  0800190c  0800190c  0000190c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08005468  08005468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a8  080058a8  00010014  2**0
                  CONTENTS
  4 .ARM          00000000  080058a8  080058a8  00010014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a8  080058a8  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a8  080058a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ac  080058ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080058b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000018  080058c4  00010018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080058c4  00010618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ad3  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ac  00000000  00000000  00027b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000c89d  00000000  00000000  0002afff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b18  00000000  00000000  000378a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001567  00000000  00000000  000383b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018a38  00000000  00000000  0003991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a527  00000000  00000000  00052357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d553  00000000  00000000  0006c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000025c8  00000000  00000000  000f9dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c0  00000000  00000000  000fc39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800190c <__do_global_dtors_aux>:
 800190c:	b510      	push	{r4, lr}
 800190e:	4c05      	ldr	r4, [pc, #20]	; (8001924 <__do_global_dtors_aux+0x18>)
 8001910:	7823      	ldrb	r3, [r4, #0]
 8001912:	b933      	cbnz	r3, 8001922 <__do_global_dtors_aux+0x16>
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__do_global_dtors_aux+0x1c>)
 8001916:	b113      	cbz	r3, 800191e <__do_global_dtors_aux+0x12>
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <__do_global_dtors_aux+0x20>)
 800191a:	f3af 8000 	nop.w
 800191e:	2301      	movs	r3, #1
 8001920:	7023      	strb	r3, [r4, #0]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	20000018 	.word	0x20000018
 8001928:	00000000 	.word	0x00000000
 800192c:	08005450 	.word	0x08005450

08001930 <frame_dummy>:
 8001930:	b508      	push	{r3, lr}
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <frame_dummy+0x10>)
 8001934:	b11b      	cbz	r3, 800193e <frame_dummy+0xe>
 8001936:	4903      	ldr	r1, [pc, #12]	; (8001944 <frame_dummy+0x14>)
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <frame_dummy+0x18>)
 800193a:	f3af 8000 	nop.w
 800193e:	bd08      	pop	{r3, pc}
 8001940:	00000000 	.word	0x00000000
 8001944:	2000001c 	.word	0x2000001c
 8001948:	08005450 	.word	0x08005450

0800194c <turn_off_all_5641as_display_terminals>:
    /* Turn Off all the terminals of the 5641AS 7-segment Display Device. */
    turn_off_all_5641as_display_terminals();
}

static void turn_off_all_5641as_display_terminals()
{
 800194c:	b510      	push	{r4, lr}
    /* Turn Off all the terminals connected to the 5641AS 7-segment Display Device. */
    HAL_GPIO_WritePin(p_display_peripherals->K1.GPIO_Port, p_display_peripherals->K1.GPIO_Pin, GPIO_PIN_SET);
 800194e:	4c29      	ldr	r4, [pc, #164]	; (80019f4 <turn_off_all_5641as_display_terminals+0xa8>)
 8001950:	2201      	movs	r2, #1
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001956:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001958:	f002 fd16 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K2.GPIO_Port, p_display_peripherals->K2.GPIO_Pin, GPIO_PIN_SET);
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8001962:	f8d3 0036 	ldr.w	r0, [r3, #54]	; 0x36
 8001966:	f002 fd0f 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K3.GPIO_Port, p_display_peripherals->K3.GPIO_Pin, GPIO_PIN_SET);
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8001972:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001974:	f002 fd08 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_SET);
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
 8001980:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
 8001984:	f002 fd00 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, GPIO_PIN_RESET);
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	8899      	ldrh	r1, [r3, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f002 fcfa 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->B.GPIO_Port, p_display_peripherals->B.GPIO_Pin, GPIO_PIN_RESET);
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	8959      	ldrh	r1, [r3, #10]
 800199a:	f8d3 0006 	ldr.w	r0, [r3, #6]
 800199e:	f002 fcf3 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->C.GPIO_Port, p_display_peripherals->C.GPIO_Pin, GPIO_PIN_RESET);
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	8a19      	ldrh	r1, [r3, #16]
 80019a8:	68d8      	ldr	r0, [r3, #12]
 80019aa:	f002 fced 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->D.GPIO_Port, p_display_peripherals->D.GPIO_Pin, GPIO_PIN_RESET);
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	8ad9      	ldrh	r1, [r3, #22]
 80019b4:	f8d3 0012 	ldr.w	r0, [r3, #18]
 80019b8:	f002 fce6 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->E.GPIO_Port, p_display_peripherals->E.GPIO_Pin, GPIO_PIN_RESET);
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	8b99      	ldrh	r1, [r3, #28]
 80019c2:	6998      	ldr	r0, [r3, #24]
 80019c4:	f002 fce0 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->F.GPIO_Port, p_display_peripherals->F.GPIO_Pin, GPIO_PIN_RESET);
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80019ce:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80019d2:	f002 fcd9 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->G.GPIO_Port, p_display_peripherals->G.GPIO_Pin, GPIO_PIN_RESET);
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80019dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019de:	f002 fcd3 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, GPIO_PIN_RESET);
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	2200      	movs	r2, #0
}
 80019e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, GPIO_PIN_RESET);
 80019ea:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 80019ec:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 80019f0:	f002 bcca 	b.w	8004388 <HAL_GPIO_WritePin>
 80019f4:	20000050 	.word	0x20000050

080019f8 <show_custom_display_output>:
{
 80019f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fc:	4680      	mov	r8, r0
 80019fe:	460f      	mov	r7, r1
 8001a00:	4616      	mov	r6, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, A_pin_state);
 8001a06:	4c36      	ldr	r4, [pc, #216]	; (8001ae0 <show_custom_display_output+0xe8>)
{
 8001a08:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001a0c:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8001a16:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
    turn_off_all_5641as_display_terminals();
 8001a1a:	f7ff ff97 	bl	800194c <turn_off_all_5641as_display_terminals>
    HAL_GPIO_WritePin(p_display_peripherals->A.GPIO_Port, p_display_peripherals->A.GPIO_Pin, A_pin_state);
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	8891      	ldrh	r1, [r2, #4]
 8001a22:	6810      	ldr	r0, [r2, #0]
 8001a24:	4642      	mov	r2, r8
 8001a26:	f002 fcaf 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->B.GPIO_Port, p_display_peripherals->B.GPIO_Pin, B_pin_state);
 8001a2a:	6820      	ldr	r0, [r4, #0]
 8001a2c:	463a      	mov	r2, r7
 8001a2e:	8941      	ldrh	r1, [r0, #10]
 8001a30:	f8d0 0006 	ldr.w	r0, [r0, #6]
 8001a34:	f002 fca8 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->C.GPIO_Port, p_display_peripherals->C.GPIO_Pin, C_pin_state);
 8001a38:	6820      	ldr	r0, [r4, #0]
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	8a01      	ldrh	r1, [r0, #16]
 8001a3e:	68c0      	ldr	r0, [r0, #12]
 8001a40:	f002 fca2 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->D.GPIO_Port, p_display_peripherals->D.GPIO_Pin, D_pin_state);
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	462a      	mov	r2, r5
 8001a48:	8ac1      	ldrh	r1, [r0, #22]
 8001a4a:	f8d0 0012 	ldr.w	r0, [r0, #18]
 8001a4e:	f002 fc9b 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->E.GPIO_Port, p_display_peripherals->E.GPIO_Pin, E_pin_state);
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	461a      	mov	r2, r3
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	8b99      	ldrh	r1, [r3, #28]
 8001a5a:	6998      	ldr	r0, [r3, #24]
 8001a5c:	f002 fc94 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->F.GPIO_Port, p_display_peripherals->F.GPIO_Pin, F_pin_state);
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	465a      	mov	r2, fp
 8001a64:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8001a66:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8001a6a:	f002 fc8d 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->G.GPIO_Port, p_display_peripherals->G.GPIO_Pin, G_pin_state);
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	4652      	mov	r2, sl
 8001a72:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8001a74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a76:	f002 fc87 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_display_peripherals->Dp.GPIO_Port, p_display_peripherals->Dp.GPIO_Pin, Dp_pin_state);
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8001a80:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 8001a84:	f002 fc80 	bl	8004388 <HAL_GPIO_WritePin>
    switch (currently_enabled_5641as_7segment_display)
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <show_custom_display_output+0xec>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001a8c:	6823      	ldr	r3, [r4, #0]
    switch (currently_enabled_5641as_7segment_display)
 8001a8e:	2a01      	cmp	r2, #1
 8001a90:	d00c      	beq.n	8001aac <show_custom_display_output+0xb4>
 8001a92:	2a02      	cmp	r2, #2
 8001a94:	d01a      	beq.n	8001acc <show_custom_display_output+0xd4>
 8001a96:	b192      	cbz	r2, 8001abe <show_custom_display_output+0xc6>
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
 8001a9e:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
}
 8001aa2:	b003      	add	sp, #12
 8001aa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001aa8:	f002 bc6e 	b.w	8004388 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K2.GPIO_Port, p_display_peripherals->K2.GPIO_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8001ab0:	f8d3 0036 	ldr.w	r0, [r3, #54]	; 0x36
}
 8001ab4:	b003      	add	sp, #12
 8001ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001aba:	f002 bc65 	b.w	8004388 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K1.GPIO_Port, p_display_peripherals->K1.GPIO_Pin, GPIO_PIN_RESET);
 8001abe:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8001ac2:	b003      	add	sp, #12
 8001ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001ac8:	f002 bc5e 	b.w	8004388 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(p_display_peripherals->K3.GPIO_Port, p_display_peripherals->K3.GPIO_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8001ad2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
 8001ad4:	b003      	add	sp, #12
 8001ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            HAL_GPIO_WritePin(p_display_peripherals->K4.GPIO_Port, p_display_peripherals->K4.GPIO_Pin, GPIO_PIN_RESET);
 8001ada:	f002 bc55 	b.w	8004388 <HAL_GPIO_WritePin>
 8001ade:	bf00      	nop
 8001ae0:	20000050 	.word	0x20000050
 8001ae4:	2000003c 	.word	0x2000003c

08001ae8 <init_5641as_display_module>:
{
 8001ae8:	b410      	push	{r4}
    p_htim = htim;
 8001aea:	4c05      	ldr	r4, [pc, #20]	; (8001b00 <init_5641as_display_module+0x18>)
 8001aec:	6020      	str	r0, [r4, #0]
    p_display_peripherals = peripherals;
 8001aee:	4c05      	ldr	r4, [pc, #20]	; (8001b04 <init_5641as_display_module+0x1c>)
 8001af0:	6021      	str	r1, [r4, #0]
    display_on_time_steps = on_time_steps;
 8001af2:	4c05      	ldr	r4, [pc, #20]	; (8001b08 <init_5641as_display_module+0x20>)
    display_off_time_steps = off_time_steps;
 8001af4:	4905      	ldr	r1, [pc, #20]	; (8001b0c <init_5641as_display_module+0x24>)
    display_on_time_steps = on_time_steps;
 8001af6:	6022      	str	r2, [r4, #0]
}
 8001af8:	bc10      	pop	{r4}
    display_off_time_steps = off_time_steps;
 8001afa:	600b      	str	r3, [r1, #0]
    HAL_TIM_Base_Start_IT(p_htim);
 8001afc:	f002 bf88 	b.w	8004a10 <HAL_TIM_Base_Start_IT>
 8001b00:	20000054 	.word	0x20000054
 8001b04:	20000050 	.word	0x20000050
 8001b08:	2000004c 	.word	0x2000004c
 8001b0c:	20000048 	.word	0x20000048

08001b10 <start_5641as_display_module>:
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <start_5641as_display_module+0x8>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f002 bf7c 	b.w	8004a10 <HAL_TIM_Base_Start_IT>
 8001b18:	20000054 	.word	0x20000054

08001b1c <stop_5641as_display_module>:
    HAL_TIM_Base_Stop_IT(p_htim);
 8001b1c:	4b01      	ldr	r3, [pc, #4]	; (8001b24 <stop_5641as_display_module+0x8>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	f002 bfa2 	b.w	8004a68 <HAL_TIM_Base_Stop_IT>
 8001b24:	20000054 	.word	0x20000054

08001b28 <set_5641as_display_output>:
        switch (display_output[current_display_output])
 8001b28:	8803      	ldrh	r3, [r0, #0]
{
 8001b2a:	4602      	mov	r2, r0
        switch (display_output[current_display_output])
 8001b2c:	2b5d      	cmp	r3, #93	; 0x5d
 8001b2e:	d841      	bhi.n	8001bb4 <set_5641as_display_output+0x8c>
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d84d      	bhi.n	8001bd0 <set_5641as_display_output+0xa8>
 8001b34:	b143      	cbz	r3, 8001b48 <set_5641as_display_output+0x20>
 8001b36:	3b20      	subs	r3, #32
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b1d      	cmp	r3, #29
 8001b3c:	d845      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001b3e:	495b      	ldr	r1, [pc, #364]	; (8001cac <set_5641as_display_output+0x184>)
 8001b40:	fa21 f303 	lsr.w	r3, r1, r3
 8001b44:	07db      	lsls	r3, r3, #31
 8001b46:	d540      	bpl.n	8001bca <set_5641as_display_output+0xa2>
 8001b48:	8853      	ldrh	r3, [r2, #2]
 8001b4a:	2b5d      	cmp	r3, #93	; 0x5d
 8001b4c:	d851      	bhi.n	8001bf2 <set_5641as_display_output+0xca>
 8001b4e:	2b40      	cmp	r3, #64	; 0x40
 8001b50:	d85d      	bhi.n	8001c0e <set_5641as_display_output+0xe6>
 8001b52:	b143      	cbz	r3, 8001b66 <set_5641as_display_output+0x3e>
 8001b54:	3b20      	subs	r3, #32
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b1d      	cmp	r3, #29
 8001b5a:	d836      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001b5c:	4953      	ldr	r1, [pc, #332]	; (8001cac <set_5641as_display_output+0x184>)
 8001b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b62:	07db      	lsls	r3, r3, #31
 8001b64:	d531      	bpl.n	8001bca <set_5641as_display_output+0xa2>
 8001b66:	8893      	ldrh	r3, [r2, #4]
 8001b68:	2b5d      	cmp	r3, #93	; 0x5d
 8001b6a:	d861      	bhi.n	8001c30 <set_5641as_display_output+0x108>
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d86d      	bhi.n	8001c4c <set_5641as_display_output+0x124>
 8001b70:	b143      	cbz	r3, 8001b84 <set_5641as_display_output+0x5c>
 8001b72:	3b20      	subs	r3, #32
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b1d      	cmp	r3, #29
 8001b78:	d827      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001b7a:	494c      	ldr	r1, [pc, #304]	; (8001cac <set_5641as_display_output+0x184>)
 8001b7c:	fa21 f303 	lsr.w	r3, r1, r3
 8001b80:	07db      	lsls	r3, r3, #31
 8001b82:	d522      	bpl.n	8001bca <set_5641as_display_output+0xa2>
 8001b84:	88d3      	ldrh	r3, [r2, #6]
 8001b86:	2b5d      	cmp	r3, #93	; 0x5d
 8001b88:	d871      	bhi.n	8001c6e <set_5641as_display_output+0x146>
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d87d      	bhi.n	8001c8a <set_5641as_display_output+0x162>
 8001b8e:	b143      	cbz	r3, 8001ba2 <set_5641as_display_output+0x7a>
 8001b90:	3b20      	subs	r3, #32
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b1d      	cmp	r3, #29
 8001b96:	d818      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001b98:	4944      	ldr	r1, [pc, #272]	; (8001cac <set_5641as_display_output+0x184>)
 8001b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b9e:	07db      	lsls	r3, r3, #31
 8001ba0:	d513      	bpl.n	8001bca <set_5641as_display_output+0xa2>
    return Display_5641AS_EC_OK;
 8001ba2:	2300      	movs	r3, #0
{
 8001ba4:	b410      	push	{r4}
        display_5641as_output[current_display_output] = display_output[current_display_output];
 8001ba6:	4c42      	ldr	r4, [pc, #264]	; (8001cb0 <set_5641as_display_output+0x188>)
 8001ba8:	6810      	ldr	r0, [r2, #0]
 8001baa:	6851      	ldr	r1, [r2, #4]
 8001bac:	c403      	stmia	r4!, {r0, r1}
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bc10      	pop	{r4}
 8001bb2:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001bb4:	2b7c      	cmp	r3, #124	; 0x7c
 8001bb6:	d815      	bhi.n	8001be4 <set_5641as_display_output+0xbc>
 8001bb8:	2b5e      	cmp	r3, #94	; 0x5e
 8001bba:	d006      	beq.n	8001bca <set_5641as_display_output+0xa2>
 8001bbc:	493d      	ldr	r1, [pc, #244]	; (8001cb4 <set_5641as_display_output+0x18c>)
 8001bbe:	3b5f      	subs	r3, #95	; 0x5f
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bc6:	07d8      	lsls	r0, r3, #31
 8001bc8:	d4be      	bmi.n	8001b48 <set_5641as_display_output+0x20>
 8001bca:	2304      	movs	r3, #4
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001bd0:	4939      	ldr	r1, [pc, #228]	; (8001cb8 <set_5641as_display_output+0x190>)
 8001bd2:	3b41      	subs	r3, #65	; 0x41
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bda:	07d9      	lsls	r1, r3, #31
 8001bdc:	d4b4      	bmi.n	8001b48 <set_5641as_display_output+0x20>
 8001bde:	2304      	movs	r3, #4
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001be4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	d8ee      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001bec:	8853      	ldrh	r3, [r2, #2]
 8001bee:	2b5d      	cmp	r3, #93	; 0x5d
 8001bf0:	d9ad      	bls.n	8001b4e <set_5641as_display_output+0x26>
 8001bf2:	2b7c      	cmp	r3, #124	; 0x7c
 8001bf4:	d815      	bhi.n	8001c22 <set_5641as_display_output+0xfa>
 8001bf6:	2b5e      	cmp	r3, #94	; 0x5e
 8001bf8:	d0e7      	beq.n	8001bca <set_5641as_display_output+0xa2>
 8001bfa:	492e      	ldr	r1, [pc, #184]	; (8001cb4 <set_5641as_display_output+0x18c>)
 8001bfc:	3b5f      	subs	r3, #95	; 0x5f
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	fa21 f303 	lsr.w	r3, r1, r3
 8001c04:	07d8      	lsls	r0, r3, #31
 8001c06:	d4ae      	bmi.n	8001b66 <set_5641as_display_output+0x3e>
 8001c08:	2304      	movs	r3, #4
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c0e:	492a      	ldr	r1, [pc, #168]	; (8001cb8 <set_5641as_display_output+0x190>)
 8001c10:	3b41      	subs	r3, #65	; 0x41
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	fa21 f303 	lsr.w	r3, r1, r3
 8001c18:	07d9      	lsls	r1, r3, #31
 8001c1a:	d4a4      	bmi.n	8001b66 <set_5641as_display_output+0x3e>
 8001c1c:	2304      	movs	r3, #4
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c22:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d8cf      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001c2a:	8893      	ldrh	r3, [r2, #4]
 8001c2c:	2b5d      	cmp	r3, #93	; 0x5d
 8001c2e:	d99d      	bls.n	8001b6c <set_5641as_display_output+0x44>
 8001c30:	2b7c      	cmp	r3, #124	; 0x7c
 8001c32:	d815      	bhi.n	8001c60 <set_5641as_display_output+0x138>
 8001c34:	2b5e      	cmp	r3, #94	; 0x5e
 8001c36:	d0c8      	beq.n	8001bca <set_5641as_display_output+0xa2>
 8001c38:	491e      	ldr	r1, [pc, #120]	; (8001cb4 <set_5641as_display_output+0x18c>)
 8001c3a:	3b5f      	subs	r3, #95	; 0x5f
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c42:	07d8      	lsls	r0, r3, #31
 8001c44:	d49e      	bmi.n	8001b84 <set_5641as_display_output+0x5c>
 8001c46:	2304      	movs	r3, #4
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <set_5641as_display_output+0x190>)
 8001c4e:	3b41      	subs	r3, #65	; 0x41
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	fa21 f303 	lsr.w	r3, r1, r3
 8001c56:	07d9      	lsls	r1, r3, #31
 8001c58:	d494      	bmi.n	8001b84 <set_5641as_display_output+0x5c>
 8001c5a:	2304      	movs	r3, #4
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d8b0      	bhi.n	8001bca <set_5641as_display_output+0xa2>
 8001c68:	88d3      	ldrh	r3, [r2, #6]
 8001c6a:	2b5d      	cmp	r3, #93	; 0x5d
 8001c6c:	d98d      	bls.n	8001b8a <set_5641as_display_output+0x62>
 8001c6e:	2b7c      	cmp	r3, #124	; 0x7c
 8001c70:	d815      	bhi.n	8001c9e <set_5641as_display_output+0x176>
 8001c72:	2b5e      	cmp	r3, #94	; 0x5e
 8001c74:	d0a9      	beq.n	8001bca <set_5641as_display_output+0xa2>
 8001c76:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <set_5641as_display_output+0x18c>)
 8001c78:	3b5f      	subs	r3, #95	; 0x5f
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	fa21 f303 	lsr.w	r3, r1, r3
 8001c80:	07d8      	lsls	r0, r3, #31
 8001c82:	d48e      	bmi.n	8001ba2 <set_5641as_display_output+0x7a>
 8001c84:	2304      	movs	r3, #4
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c8a:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <set_5641as_display_output+0x190>)
 8001c8c:	3b41      	subs	r3, #65	; 0x41
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
 8001c94:	07d9      	lsls	r1, r3, #31
 8001c96:	d484      	bmi.n	8001ba2 <set_5641as_display_output+0x7a>
 8001c98:	2304      	movs	r3, #4
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4770      	bx	lr
        switch (display_output[current_display_output])
 8001c9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ca2:	2b09      	cmp	r3, #9
 8001ca4:	f67f af7d 	bls.w	8001ba2 <set_5641as_display_output+0x7a>
 8001ca8:	e78f      	b.n	8001bca <set_5641as_display_output+0xa2>
 8001caa:	bf00      	nop
 8001cac:	23ff6085 	.word	0x23ff6085
 8001cb0:	20000040 	.word	0x20000040
 8001cb4:	2069a6b9 	.word	0x2069a6b9
 8001cb8:	1414c8bf 	.word	0x1414c8bf

08001cbc <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == p_htim->Instance)
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001cbe:	6802      	ldr	r2, [r0, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d003      	beq.n	8001cd0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000054 	.word	0x20000054
{
 8001cd0:	b530      	push	{r4, r5, lr}
        if (current_display_on_time_step != display_on_time_steps) // If true, then the current time step of the @ref display_5641as is at the On time of the currently simulated PWM output at the 5641AS Device.
 8001cd2:	4c7f      	ldr	r4, [pc, #508]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001cd4:	4d7f      	ldr	r5, [pc, #508]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	682a      	ldr	r2, [r5, #0]
{
 8001cda:	b085      	sub	sp, #20
        if (current_display_on_time_step != display_on_time_steps) // If true, then the current time step of the @ref display_5641as is at the On time of the currently simulated PWM output at the 5641AS Device.
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	f000 80ff 	beq.w	8001ee0 <HAL_TIM_PeriodElapsedCallback+0x224>
            if (current_display_on_time_step == 0)
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8120 	bne.w	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                switch (display_5641as_output[currently_enabled_5641as_7segment_display])
 8001ce8:	4a7b      	ldr	r2, [pc, #492]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cea:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cf2:	3b22      	subs	r3, #34	; 0x22
 8001cf4:	2be7      	cmp	r3, #231	; 0xe7
 8001cf6:	f200 812a 	bhi.w	8001f4e <HAL_TIM_PeriodElapsedCallback+0x292>
 8001cfa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001cfe:	0261      	.short	0x0261
 8001d00:	01280128 	.word	0x01280128
 8001d04:	01280128 	.word	0x01280128
 8001d08:	0128025b 	.word	0x0128025b
 8001d0c:	01280128 	.word	0x01280128
 8001d10:	01280128 	.word	0x01280128
 8001d14:	02520257 	.word	0x02520257
 8001d18:	01080128 	.word	0x01080128
 8001d1c:	024b012d 	.word	0x024b012d
 8001d20:	021b0244 	.word	0x021b0244
 8001d24:	0225013f 	.word	0x0225013f
 8001d28:	013a021f 	.word	0x013a021f
 8001d2c:	01280216 	.word	0x01280216
 8001d30:	01280128 	.word	0x01280128
 8001d34:	012801ba 	.word	0x012801ba
 8001d38:	01280128 	.word	0x01280128
 8001d3c:	013a01b3 	.word	0x013a01b3
 8001d40:	01080159 	.word	0x01080159
 8001d44:	014c01ad 	.word	0x014c01ad
 8001d48:	01a00128 	.word	0x01a00128
 8001d4c:	01280128 	.word	0x01280128
 8001d50:	01dd0128 	.word	0x01dd0128
 8001d54:	01280128 	.word	0x01280128
 8001d58:	01d00108 	.word	0x01d00108
 8001d5c:	01280128 	.word	0x01280128
 8001d60:	0128013f 	.word	0x0128013f
 8001d64:	012801c9 	.word	0x012801c9
 8001d68:	01280128 	.word	0x01280128
 8001d6c:	01280128 	.word	0x01280128
 8001d70:	01280159 	.word	0x01280159
 8001d74:	012801c1 	.word	0x012801c1
 8001d78:	0128020f 	.word	0x0128020f
 8001d7c:	02090128 	.word	0x02090128
 8001d80:	01fd0203 	.word	0x01fd0203
 8001d84:	014c0128 	.word	0x014c0128
 8001d88:	01f60128 	.word	0x01f60128
 8001d8c:	012801ef 	.word	0x012801ef
 8001d90:	012d0128 	.word	0x012d0128
 8001d94:	01e80128 	.word	0x01e80128
 8001d98:	012801e3 	.word	0x012801e3
 8001d9c:	019a0128 	.word	0x019a0128
 8001da0:	018d0128 	.word	0x018d0128
 8001da4:	01280180 	.word	0x01280180
 8001da8:	01280128 	.word	0x01280128
 8001dac:	01280128 	.word	0x01280128
 8001db0:	012d0128 	.word	0x012d0128
 8001db4:	01280128 	.word	0x01280128
 8001db8:	01280128 	.word	0x01280128
 8001dbc:	01280128 	.word	0x01280128
 8001dc0:	01280128 	.word	0x01280128
 8001dc4:	01280128 	.word	0x01280128
 8001dc8:	01280128 	.word	0x01280128
 8001dcc:	01280128 	.word	0x01280128
 8001dd0:	01280128 	.word	0x01280128
 8001dd4:	01280128 	.word	0x01280128
 8001dd8:	01280128 	.word	0x01280128
 8001ddc:	01280128 	.word	0x01280128
 8001de0:	01280128 	.word	0x01280128
 8001de4:	01280128 	.word	0x01280128
 8001de8:	01280128 	.word	0x01280128
 8001dec:	01280128 	.word	0x01280128
 8001df0:	01280128 	.word	0x01280128
 8001df4:	01280128 	.word	0x01280128
 8001df8:	01280128 	.word	0x01280128
 8001dfc:	01280128 	.word	0x01280128
 8001e00:	01280128 	.word	0x01280128
 8001e04:	01280128 	.word	0x01280128
 8001e08:	01280128 	.word	0x01280128
 8001e0c:	01280128 	.word	0x01280128
 8001e10:	01280128 	.word	0x01280128
 8001e14:	01280128 	.word	0x01280128
 8001e18:	01280128 	.word	0x01280128
 8001e1c:	01280128 	.word	0x01280128
 8001e20:	01280128 	.word	0x01280128
 8001e24:	01280128 	.word	0x01280128
 8001e28:	01280128 	.word	0x01280128
 8001e2c:	01280128 	.word	0x01280128
 8001e30:	01280128 	.word	0x01280128
 8001e34:	01280128 	.word	0x01280128
 8001e38:	01280128 	.word	0x01280128
 8001e3c:	01280128 	.word	0x01280128
 8001e40:	01280128 	.word	0x01280128
 8001e44:	01280128 	.word	0x01280128
 8001e48:	01280128 	.word	0x01280128
 8001e4c:	01280128 	.word	0x01280128
 8001e50:	01280128 	.word	0x01280128
 8001e54:	01280128 	.word	0x01280128
 8001e58:	01280128 	.word	0x01280128
 8001e5c:	01280128 	.word	0x01280128
 8001e60:	01280128 	.word	0x01280128
 8001e64:	01280128 	.word	0x01280128
 8001e68:	01280128 	.word	0x01280128
 8001e6c:	01280128 	.word	0x01280128
 8001e70:	01280128 	.word	0x01280128
 8001e74:	01280128 	.word	0x01280128
 8001e78:	01280128 	.word	0x01280128
 8001e7c:	01280128 	.word	0x01280128
 8001e80:	01280128 	.word	0x01280128
 8001e84:	01280128 	.word	0x01280128
 8001e88:	01280128 	.word	0x01280128
 8001e8c:	01280128 	.word	0x01280128
 8001e90:	01280128 	.word	0x01280128
 8001e94:	01280128 	.word	0x01280128
 8001e98:	01280128 	.word	0x01280128
 8001e9c:	01280128 	.word	0x01280128
 8001ea0:	01280128 	.word	0x01280128
 8001ea4:	01280128 	.word	0x01280128
 8001ea8:	01280128 	.word	0x01280128
 8001eac:	01280128 	.word	0x01280128
 8001eb0:	01280128 	.word	0x01280128
 8001eb4:	01280128 	.word	0x01280128
 8001eb8:	01790128 	.word	0x01790128
 8001ebc:	016c0173 	.word	0x016c0173
 8001ec0:	015f0165 	.word	0x015f0165
 8001ec4:	0234023b 	.word	0x0234023b
 8001ec8:	022c022e 	.word	0x022c022e
 8001ecc:	023f      	.short	0x023f
 8001ece:	bf00      	nop
 8001ed0:	20000038 	.word	0x20000038
 8001ed4:	2000004c 	.word	0x2000004c
 8001ed8:	2000003c 	.word	0x2000003c
 8001edc:	20000040 	.word	0x20000040
            if (current_display_off_time_step == 0)
 8001ee0:	4dbd      	ldr	r5, [pc, #756]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8172 	beq.w	80021ce <HAL_TIM_PeriodElapsedCallback+0x512>
            if (current_display_off_time_step >= display_off_time_steps)
 8001eea:	4abc      	ldr	r2, [pc, #752]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x520>)
            current_display_off_time_step++;
 8001eec:	3301      	adds	r3, #1
            if (current_display_off_time_step >= display_off_time_steps)
 8001eee:	6812      	ldr	r2, [r2, #0]
            current_display_off_time_step++;
 8001ef0:	602b      	str	r3, [r5, #0]
            if (current_display_off_time_step >= display_off_time_steps)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d309      	bcc.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x24e>
                current_display_on_time_step = 0;
 8001ef6:	2100      	movs	r1, #0
                currently_enabled_5641as_7segment_display++;
 8001ef8:	4ab9      	ldr	r2, [pc, #740]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x524>)
                current_display_on_time_step = 0;
 8001efa:	6021      	str	r1, [r4, #0]
                currently_enabled_5641as_7segment_display++;
 8001efc:	7813      	ldrb	r3, [r2, #0]
                current_display_off_time_step = 0;
 8001efe:	6029      	str	r1, [r5, #0]
                currently_enabled_5641as_7segment_display++;
 8001f00:	3301      	adds	r3, #1
 8001f02:	b2db      	uxtb	r3, r3
                if (currently_enabled_5641as_7segment_display == 4)
 8001f04:	2b04      	cmp	r3, #4
                currently_enabled_5641as_7segment_display++;
 8001f06:	7013      	strb	r3, [r2, #0]
                if (currently_enabled_5641as_7segment_display == 4)
 8001f08:	d01e      	beq.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x28c>
}
 8001f0a:	b005      	add	sp, #20
 8001f0c:	bd30      	pop	{r4, r5, pc}
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2301      	movs	r3, #1
 8001f12:	9203      	str	r2, [sp, #12]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001f14:	9202      	str	r2, [sp, #8]
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd6a 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8001f24:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f26:	682a      	ldr	r2, [r5, #0]
            current_display_on_time_step++;
 8001f28:	3301      	adds	r3, #1
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f2a:	4293      	cmp	r3, r2
            current_display_on_time_step++;
 8001f2c:	6023      	str	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f2e:	d3ec      	bcc.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x24e>
 8001f30:	4baa      	ldr	r3, [pc, #680]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1e8      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x24e>
                currently_enabled_5641as_7segment_display++;
 8001f38:	4aa9      	ldr	r2, [pc, #676]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x524>)
                current_display_on_time_step = 0;
 8001f3a:	6023      	str	r3, [r4, #0]
                currently_enabled_5641as_7segment_display++;
 8001f3c:	7813      	ldrb	r3, [r2, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2db      	uxtb	r3, r3
                if (currently_enabled_5641as_7segment_display == 4)
 8001f42:	2b04      	cmp	r3, #4
                currently_enabled_5641as_7segment_display++;
 8001f44:	7013      	strb	r3, [r2, #0]
                if (currently_enabled_5641as_7segment_display == 4)
 8001f46:	d1e0      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x24e>
                    currently_enabled_5641as_7segment_display = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	7013      	strb	r3, [r2, #0]
 8001f4c:	e7dd      	b.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x24e>
    turn_off_all_5641as_display_terminals();
 8001f4e:	f7ff fcfd 	bl	800194c <turn_off_all_5641as_display_terminals>
            current_display_on_time_step++;
 8001f52:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f54:	682a      	ldr	r2, [r5, #0]
}
 8001f56:	e7e7      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f60:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8001f62:	4618      	mov	r0, r3
 8001f64:	4611      	mov	r1, r2
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f7ff fd46 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8001f6c:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f6e:	682a      	ldr	r2, [r5, #0]
                        break;
 8001f70:	e7da      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001f72:	2301      	movs	r3, #1
 8001f74:	2200      	movs	r2, #0
 8001f76:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001f7a:	e7cc      	b.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x25a>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9103      	str	r1, [sp, #12]
 8001f82:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001f86:	9100      	str	r1, [sp, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd34 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8001f90:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001f92:	682a      	ldr	r2, [r5, #0]
                        break;
 8001f94:	e7c8      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001f96:	2001      	movs	r0, #1
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e9cd 0000 	strd	r0, r0, [sp]
 8001f9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7ff fd27 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8001faa:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8001fac:	682a      	ldr	r2, [r5, #0]
                        break;
 8001fae:	e7bb      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	e7d2      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9203      	str	r2, [sp, #12]
 8001fc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001fc6:	e7cc      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET);
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fd0:	9201      	str	r2, [sp, #4]
 8001fd2:	9200      	str	r2, [sp, #0]
 8001fd4:	e7a1      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET);
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fde:	e9cd 3200 	strd	r3, r2, [sp]
 8001fe2:	e79b      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001fee:	e7b8      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	e9cd 3300 	strd	r3, r3, [sp]
 8001ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ffc:	e78d      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001ffe:	2100      	movs	r1, #0
 8002000:	2301      	movs	r3, #1
 8002002:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002006:	9101      	str	r1, [sp, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4608      	mov	r0, r1
 800200e:	f7ff fcf3 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8002012:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8002014:	682a      	ldr	r2, [r5, #0]
                        break;
 8002016:	e787      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002018:	2301      	movs	r3, #1
 800201a:	2200      	movs	r2, #0
 800201c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002020:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4611      	mov	r1, r2
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff fce6 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 800202c:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 800202e:	682a      	ldr	r2, [r5, #0]
                        break;
 8002030:	e77a      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002032:	2300      	movs	r3, #0
 8002034:	2201      	movs	r2, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800203c:	e7c9      	b.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0x316>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800203e:	2201      	movs	r2, #1
 8002040:	2300      	movs	r3, #0
 8002042:	4611      	mov	r1, r2
 8002044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002048:	4618      	mov	r0, r3
 800204a:	e9cd 2200 	strd	r2, r2, [sp]
 800204e:	f7ff fcd3 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 8002052:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 8002054:	682a      	ldr	r2, [r5, #0]
                        break;
 8002056:	e767      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002058:	2301      	movs	r3, #1
 800205a:	2200      	movs	r2, #0
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002062:	e77e      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x2a6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002064:	2201      	movs	r2, #1
 8002066:	2300      	movs	r3, #0
 8002068:	e9cd 2200 	strd	r2, r2, [sp]
 800206c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002070:	e7d8      	b.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2301      	movs	r3, #1
 8002076:	e9cd 2200 	strd	r2, r2, [sp]
 800207a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800207e:	e7d1      	b.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8002080:	2100      	movs	r1, #0
 8002082:	2301      	movs	r3, #1
 8002084:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8002088:	461a      	mov	r2, r3
 800208a:	9103      	str	r1, [sp, #12]
 800208c:	9100      	str	r1, [sp, #0]
 800208e:	e745      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8002090:	2000      	movs	r0, #0
 8002092:	2301      	movs	r3, #1
 8002094:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8002098:	9301      	str	r3, [sp, #4]
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	e781      	b.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x2e6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800209e:	2101      	movs	r1, #1
 80020a0:	2300      	movs	r3, #0
 80020a2:	4608      	mov	r0, r1
 80020a4:	461a      	mov	r2, r3
 80020a6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80020aa:	e9cd 1100 	strd	r1, r1, [sp]
 80020ae:	f7ff fca3 	bl	80019f8 <show_custom_display_output>
            current_display_on_time_step++;
 80020b2:	6823      	ldr	r3, [r4, #0]
            if ((current_display_on_time_step>=display_on_time_steps) && (display_off_time_steps==0))
 80020b4:	682a      	ldr	r2, [r5, #0]
                        break;
 80020b6:	e737      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x26c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2301      	movs	r3, #1
 80020bc:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	e7ae      	b.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80020c4:	2301      	movs	r3, #1
 80020c6:	2100      	movs	r1, #0
 80020c8:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80020cc:	e79b      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x34a>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2300      	movs	r3, #0
 80020d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020d6:	e9cd 2300 	strd	r2, r3, [sp]
 80020da:	e71f      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80020dc:	2300      	movs	r3, #0
 80020de:	2201      	movs	r2, #1
 80020e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80020e4:	e9cd 3300 	strd	r3, r3, [sp]
 80020e8:	e718      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2300      	movs	r3, #0
 80020ee:	e9cd 2200 	strd	r2, r2, [sp]
 80020f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020f6:	e711      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80020f8:	2000      	movs	r0, #0
 80020fa:	2301      	movs	r3, #1
 80020fc:	9001      	str	r0, [sp, #4]
 80020fe:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8002102:	e7ca      	b.n	800209a <HAL_TIM_PeriodElapsedCallback+0x3de>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002104:	2301      	movs	r3, #1
 8002106:	2200      	movs	r2, #0
 8002108:	e9cd 3202 	strd	r3, r2, [sp, #8]
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800210c:	9201      	str	r2, [sp, #4]
 800210e:	e788      	b.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002110:	2301      	movs	r3, #1
 8002112:	2100      	movs	r1, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800211a:	e775      	b.n	8002008 <HAL_TIM_PeriodElapsedCallback+0x34c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	2301      	movs	r3, #1
 8002120:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002124:	e9cd 2200 	strd	r2, r2, [sp]
 8002128:	e77c      	b.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x368>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800212a:	2201      	movs	r2, #1
 800212c:	2300      	movs	r3, #0
 800212e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002132:	e7eb      	b.n	800210c <HAL_TIM_PeriodElapsedCallback+0x450>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002134:	2300      	movs	r3, #0
 8002136:	2201      	movs	r2, #1
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	e742      	b.n	8001fc2 <HAL_TIM_PeriodElapsedCallback+0x306>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 800213c:	2300      	movs	r3, #0
 800213e:	2201      	movs	r2, #1
 8002140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	e76c      	b.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002148:	2301      	movs	r3, #1
 800214a:	2100      	movs	r1, #0
 800214c:	e9cd 3300 	strd	r3, r3, [sp]
 8002150:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8002154:	e718      	b.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x2cc>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8002156:	2301      	movs	r3, #1
 8002158:	e7c1      	b.n	80020de <HAL_TIM_PeriodElapsedCallback+0x422>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 800215a:	2300      	movs	r3, #0
 800215c:	2201      	movs	r2, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002164:	e75d      	b.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x366>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8002166:	2301      	movs	r3, #1
 8002168:	2100      	movs	r1, #0
 800216a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800216e:	e9cd 3300 	strd	r3, r3, [sp]
 8002172:	e709      	b.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x2cc>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 8002174:	2301      	movs	r3, #1
 8002176:	2100      	movs	r1, #0
 8002178:	9303      	str	r3, [sp, #12]
 800217a:	e702      	b.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x2c6>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 800217c:	2201      	movs	r2, #1
 800217e:	2300      	movs	r3, #0
 8002180:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002184:	e7c2      	b.n	800210c <HAL_TIM_PeriodElapsedCallback+0x450>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2301      	movs	r3, #1
 800218a:	e9cd 2200 	strd	r2, r2, [sp]
 800218e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002192:	e6c2      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x25e>
                        show_custom_display_output(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8002194:	2301      	movs	r3, #1
 8002196:	2200      	movs	r2, #0
 8002198:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800219c:	e9cd 3200 	strd	r3, r2, [sp]
 80021a0:	e6bc      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x260>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 80021a2:	2300      	movs	r3, #0
 80021a4:	2201      	movs	r2, #1
 80021a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80021aa:	e6b4      	b.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x25a>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 80021ac:	2300      	movs	r3, #0
 80021ae:	2201      	movs	r2, #1
 80021b0:	9303      	str	r3, [sp, #12]
 80021b2:	e6af      	b.n	8001f14 <HAL_TIM_PeriodElapsedCallback+0x258>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80021b4:	2300      	movs	r3, #0
 80021b6:	2201      	movs	r2, #1
 80021b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80021bc:	9201      	str	r2, [sp, #4]
 80021be:	e6ab      	b.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0x25c>
                        show_custom_display_output(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 80021c0:	2300      	movs	r3, #0
 80021c2:	2101      	movs	r1, #1
 80021c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80021c8:	e9cd 3100 	strd	r3, r1, [sp]
 80021cc:	e6dc      	b.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x2cc>
    turn_off_all_5641as_display_terminals();
 80021ce:	f7ff fbbd 	bl	800194c <turn_off_all_5641as_display_terminals>
            current_display_off_time_step++;
 80021d2:	682b      	ldr	r3, [r5, #0]
}
 80021d4:	e689      	b.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x22e>
 80021d6:	bf00      	nop
 80021d8:	20000034 	.word	0x20000034
 80021dc:	20000048 	.word	0x20000048
 80021e0:	2000003c 	.word	0x2000003c

080021e4 <etx_ota_send_resp.isra.0>:
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
{
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	ETX_OTA_Status  ret;

	ETX_OTA_Response_Packet_t response =
 80021e4:	2300      	movs	r3, #0
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 80021e6:	4684      	mov	ip, r0
	ETX_OTA_Response_Packet_t response =
 80021e8:	22bb      	movs	r2, #187	; 0xbb
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 80021ea:	b500      	push	{lr}
	ETX_OTA_Response_Packet_t response =
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <etx_ota_send_resp.isra.0+0x64>)
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
 80021ee:	b085      	sub	sp, #20
	ETX_OTA_Response_Packet_t response =
 80021f0:	9001      	str	r0, [sp, #4]
		.data_len    	= 1U,
		.status      	= response_status,
		.crc			= 0U,
		.eof         	= ETX_OTA_EOF
	};
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 80021f2:	2101      	movs	r1, #1
 80021f4:	a802      	add	r0, sp, #8
	ETX_OTA_Response_Packet_t response =
 80021f6:	f88d 3009 	strb.w	r3, [sp, #9]
 80021fa:	f88d 300a 	strb.w	r3, [sp, #10]
 80021fe:	f88d 300b 	strb.w	r3, [sp, #11]
 8002202:	f88d 300c 	strb.w	r3, [sp, #12]
 8002206:	f88d c008 	strb.w	ip, [sp, #8]
 800220a:	f88d 200d 	strb.w	r2, [sp, #13]
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 800220e:	f000 fb17 	bl	8002840 <crc32_mpeg2>

	switch (ETX_OTA_hardware_protocol)
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <etx_ota_send_resp.isra.0+0x68>)
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 8002214:	f8cd 0009 	str.w	r0, [sp, #9]
	switch (ETX_OTA_hardware_protocol)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b153      	cbz	r3, 8002232 <etx_ota_send_resp.isra.0+0x4e>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <etx_ota_send_resp.isra.0+0x48>
		case ETX_OTA_hw_Protocol_UART:
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
			ret = HAL_ret_handler(ret);
			break;
		case ETX_OTA_hw_Protocol_BT:
			ret = send_hm10_ota_data((uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8002220:	f242 3228 	movw	r2, #9000	; 0x2328
 8002224:	210a      	movs	r1, #10
 8002226:	a801      	add	r0, sp, #4
 8002228:	f001 f8c4 	bl	80033b4 <send_hm10_ota_data>
			#endif
			return ETX_OTA_EC_ERR;
	}

	return ret;
}
 800222c:	b005      	add	sp, #20
 800222e:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <etx_ota_send_resp.isra.0+0x6c>)
 8002234:	f242 3328 	movw	r3, #9000	; 0x2328
 8002238:	220a      	movs	r2, #10
 800223a:	a901      	add	r1, sp, #4
 800223c:	6800      	ldr	r0, [r0, #0]
 800223e:	f002 ffa3 	bl	8005188 <HAL_UART_Transmit>
}
 8002242:	b005      	add	sp, #20
 8002244:	f85d fb04 	ldr.w	pc, [sp], #4
 8002248:	000103aa 	.word	0x000103aa
 800224c:	20000058 	.word	0x20000058
 8002250:	20000480 	.word	0x20000480

08002254 <init_firmware_update_module>:
{
 8002254:	b570      	push	{r4, r5, r6, lr}
    ETX_OTA_hardware_protocol = hardware_protocol;
 8002256:	4c26      	ldr	r4, [pc, #152]	; (80022f0 <init_firmware_update_module+0x9c>)
    p_huart = huart;
 8002258:	4d26      	ldr	r5, [pc, #152]	; (80022f4 <init_firmware_update_module+0xa0>)
    ETX_OTA_hardware_protocol = hardware_protocol;
 800225a:	7020      	strb	r0, [r4, #0]
    p_fw_config = fw_config;
 800225c:	4e26      	ldr	r6, [pc, #152]	; (80022f8 <init_firmware_update_module+0xa4>)
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings_Pin;
 800225e:	4c27      	ldr	r4, [pc, #156]	; (80022fc <init_firmware_update_module+0xa8>)
{
 8002260:	b086      	sub	sp, #24
    p_fw_config = fw_config;
 8002262:	6032      	str	r2, [r6, #0]
    p_huart = huart;
 8002264:	6029      	str	r1, [r5, #0]
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings_Pin;
 8002266:	6023      	str	r3, [r4, #0]
    switch (hardware_protocol)
 8002268:	b158      	cbz	r0, 8002282 <init_firmware_update_module+0x2e>
 800226a:	2801      	cmp	r0, #1
 800226c:	d10f      	bne.n	800228e <init_firmware_update_module+0x3a>
            init_hm10_module(p_huart);
 800226e:	4608      	mov	r0, r1
 8002270:	f000 fc50 	bl	8002b14 <init_hm10_module>
            if (HAL_GPIO_ReadPin(p_GPIO_is_hm10_default_settings->GPIO_Port, p_GPIO_is_hm10_default_settings->GPIO_Pin) == GPIO_PIN_SET)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	8899      	ldrh	r1, [r3, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	f002 f87f 	bl	800437c <HAL_GPIO_ReadPin>
 800227e:	2801      	cmp	r0, #1
 8002280:	d002      	beq.n	8002288 <init_firmware_update_module+0x34>
    return ETX_OTA_EC_OK;
 8002282:	2000      	movs	r0, #0
}
 8002284:	b006      	add	sp, #24
 8002286:	bd70      	pop	{r4, r5, r6, pc}
				ret = disconnect_hm10_from_bt_address();
 8002288:	f001 f834 	bl	80032f4 <disconnect_hm10_from_bt_address>
				if (ret == HM10_BT_Connection_Status_Unknown)
 800228c:	b910      	cbnz	r0, 8002294 <init_firmware_update_module+0x40>
            return ETX_OTA_EC_ERR;
 800228e:	2004      	movs	r0, #4
}
 8002290:	b006      	add	sp, #24
 8002292:	bd70      	pop	{r4, r5, r6, pc}
                ret = send_hm10_renew_cmd();
 8002294:	f000 fca0 	bl	8002bd8 <send_hm10_renew_cmd>
                if (ret != HM10_EC_OK)
 8002298:	2800      	cmp	r0, #0
 800229a:	d1f8      	bne.n	800228e <init_firmware_update_module+0x3a>
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <init_firmware_update_module+0xac>)
 800229e:	ab03      	add	r3, sp, #12
 80022a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80022a2:	c303      	stmia	r3!, {r0, r1}
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80022a4:	2109      	movs	r1, #9
 80022a6:	a803      	add	r0, sp, #12
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80022a8:	701a      	strb	r2, [r3, #0]
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80022aa:	f000 fcf1 	bl	8002c90 <set_hm10_name>
                if (ret != HM10_EC_OK)
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d1ed      	bne.n	800228e <init_firmware_update_module+0x3a>
                ret = set_hm10_role(HM10_DEFAULT_ROLE);
 80022b2:	2030      	movs	r0, #48	; 0x30
 80022b4:	f000 fe30 	bl	8002f18 <set_hm10_role>
                if (ret != HM10_EC_OK)
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d1e8      	bne.n	800228e <init_firmware_update_module+0x3a>
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <init_firmware_update_module+0xb0>)
 80022be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022c2:	9001      	str	r0, [sp, #4]
                ret = set_hm10_pin(default_pin_code);
 80022c4:	a801      	add	r0, sp, #4
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 80022c6:	f8ad 1008 	strh.w	r1, [sp, #8]
                ret = set_hm10_pin(default_pin_code);
 80022ca:	f000 fe91 	bl	8002ff0 <set_hm10_pin>
                if (ret != HM10_EC_OK)
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1dd      	bne.n	800228e <init_firmware_update_module+0x3a>
                ret = set_hm10_pin_code_mode(HM10_DEFAULT_PIN_CODE_MODE);
 80022d2:	2030      	movs	r0, #48	; 0x30
 80022d4:	f000 ff36 	bl	8003144 <set_hm10_pin_code_mode>
                if (ret != HM10_EC_OK)
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1d8      	bne.n	800228e <init_firmware_update_module+0x3a>
                ret = set_hm10_module_work_mode(HM10_DEFAULT_MODULE_WORK_MODE);
 80022dc:	2030      	movs	r0, #48	; 0x30
 80022de:	f000 ff9d 	bl	800321c <set_hm10_module_work_mode>
                if (ret != HM10_EC_OK)
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d1d3      	bne.n	800228e <init_firmware_update_module+0x3a>
                ret = send_hm10_reset_cmd();
 80022e6:	f000 fc1b 	bl	8002b20 <send_hm10_reset_cmd>
                if (ret != HM10_EC_OK)
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d0ca      	beq.n	8002284 <init_firmware_update_module+0x30>
 80022ee:	e7ce      	b.n	800228e <init_firmware_update_module+0x3a>
 80022f0:	20000058 	.word	0x20000058
 80022f4:	20000480 	.word	0x20000480
 80022f8:	2000047c 	.word	0x2000047c
 80022fc:	20000478 	.word	0x20000478
 8002300:	08005468 	.word	0x08005468
 8002304:	08005474 	.word	0x08005474

08002308 <firmware_image_download_and_install>:
	etx_ota_state            = ETX_OTA_STATE_START;
 8002308:	2301      	movs	r3, #1
	etx_ota_fw_received_size = 0U;
 800230a:	2200      	movs	r2, #0
{
 800230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	etx_ota_fw_received_size = 0U;
 8002310:	4fa2      	ldr	r7, [pc, #648]	; (800259c <firmware_image_download_and_install+0x294>)
	etx_ota_state            = ETX_OTA_STATE_START;
 8002312:	4da3      	ldr	r5, [pc, #652]	; (80025a0 <firmware_image_download_and_install+0x298>)
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002314:	4ca3      	ldr	r4, [pc, #652]	; (80025a4 <firmware_image_download_and_install+0x29c>)
 8002316:	4ea4      	ldr	r6, [pc, #656]	; (80025a8 <firmware_image_download_and_install+0x2a0>)
 8002318:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80025ac <firmware_image_download_and_install+0x2a4>
{
 800231c:	b089      	sub	sp, #36	; 0x24
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800231e:	eb04 0903 	add.w	r9, r4, r3
	etx_ota_fw_received_size = 0U;
 8002322:	603a      	str	r2, [r7, #0]
	etx_ota_state            = ETX_OTA_STATE_START;
 8002324:	702b      	strb	r3, [r5, #0]
	switch (ETX_OTA_hardware_protocol)
 8002326:	f896 a000 	ldrb.w	sl, [r6]
 800232a:	f1ba 0f00 	cmp.w	sl, #0
 800232e:	d00b      	beq.n	8002348 <firmware_image_download_and_install+0x40>
 8002330:	f1ba 0f01 	cmp.w	sl, #1
 8002334:	d01c      	beq.n	8002370 <firmware_image_download_and_install+0x68>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff ff54 	bl	80021e4 <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_ERR;
 800233c:	f04f 0b04 	mov.w	fp, #4
}
 8002340:	4658      	mov	r0, fp
 8002342:	b009      	add	sp, #36	; 0x24
 8002344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002348:	f242 3328 	movw	r3, #9000	; 0x2328
 800234c:	2201      	movs	r2, #1
 800234e:	4995      	ldr	r1, [pc, #596]	; (80025a4 <firmware_image_download_and_install+0x29c>)
 8002350:	f8d8 0000 	ldr.w	r0, [r8]
 8002354:	f002 ffba 	bl	80052cc <HAL_UART_Receive>
	return ret;
}

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 8002358:	2801      	cmp	r0, #1
 800235a:	d0ec      	beq.n	8002336 <firmware_image_download_and_install+0x2e>
 800235c:	1e83      	subs	r3, r0, #2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d848      	bhi.n	80023f6 <firmware_image_download_and_install+0xee>
			  return ETX_OTA_EC_NR;
 8002364:	f04f 0b02 	mov.w	fp, #2
}
 8002368:	4658      	mov	r0, fp
 800236a:	b009      	add	sp, #36	; 0x24
 800236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002370:	f242 3228 	movw	r2, #9000	; 0x2328
 8002374:	4651      	mov	r1, sl
 8002376:	488b      	ldr	r0, [pc, #556]	; (80025a4 <firmware_image_download_and_install+0x29c>)
 8002378:	f001 f832 	bl	80033e0 <get_hm10_ota_data>
			if (ret != HAL_OK)
 800237c:	bb70      	cbnz	r0, 80023dc <firmware_image_download_and_install+0xd4>
			if (buf[len++] != ETX_OTA_SOF)
 800237e:	7823      	ldrb	r3, [r4, #0]
 8002380:	2baa      	cmp	r3, #170	; 0xaa
 8002382:	d1d8      	bne.n	8002336 <firmware_image_download_and_install+0x2e>
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002384:	4651      	mov	r1, sl
 8002386:	f242 3228 	movw	r2, #9000	; 0x2328
 800238a:	4648      	mov	r0, r9
 800238c:	f001 f828 	bl	80033e0 <get_hm10_ota_data>
			if (ret != HAL_OK)
 8002390:	bb20      	cbnz	r0, 80023dc <firmware_image_download_and_install+0xd4>
			switch (buf[len++])
 8002392:	7863      	ldrb	r3, [r4, #1]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d8ce      	bhi.n	8002336 <firmware_image_download_and_install+0x2e>
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002398:	f242 3228 	movw	r2, #9000	; 0x2328
 800239c:	2102      	movs	r1, #2
 800239e:	4884      	ldr	r0, [pc, #528]	; (80025b0 <firmware_image_download_and_install+0x2a8>)
 80023a0:	f001 f81e 	bl	80033e0 <get_hm10_ota_data>
			if (ret != HAL_OK)
 80023a4:	b9d0      	cbnz	r0, 80023dc <firmware_image_download_and_install+0xd4>
			data_len = *(uint16_t *)&buf[len];
 80023a6:	8863      	ldrh	r3, [r4, #2]
 80023a8:	9300      	str	r3, [sp, #0]
			for (uint16_t i=0; i<data_len; i++)
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81e2 	beq.w	8002774 <firmware_image_download_and_install+0x46c>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 80023b0:	f04f 0b04 	mov.w	fp, #4
 80023b4:	eb03 0a0b 	add.w	sl, r3, fp
 80023b8:	fa1f fa8a 	uxth.w	sl, sl
 80023bc:	e002      	b.n	80023c4 <firmware_image_download_and_install+0xbc>
			for (uint16_t i=0; i<data_len; i++)
 80023be:	45d3      	cmp	fp, sl
 80023c0:	f000 8093 	beq.w	80024ea <firmware_image_download_and_install+0x1e2>
				ret = get_hm10_ota_data(&buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 80023c4:	4658      	mov	r0, fp
 80023c6:	2101      	movs	r1, #1
 80023c8:	f242 3228 	movw	r2, #9000	; 0x2328
 80023cc:	448b      	add	fp, r1
 80023ce:	4420      	add	r0, r4
 80023d0:	fa1f fb8b 	uxth.w	fp, fp
 80023d4:	f001 f804 	bl	80033e0 <get_hm10_ota_data>
				if (ret != HAL_OK)
 80023d8:	2800      	cmp	r0, #0
 80023da:	d0f0      	beq.n	80023be <firmware_image_download_and_install+0xb6>
		switch (ret)
 80023dc:	2802      	cmp	r0, #2
 80023de:	4683      	mov	fp, r0
 80023e0:	d0c0      	beq.n	8002364 <firmware_image_download_and_install+0x5c>
 80023e2:	f1bb 0f04 	cmp.w	fp, #4
 80023e6:	d0a6      	beq.n	8002336 <firmware_image_download_and_install+0x2e>
			  etx_ota_send_resp(ETX_OTA_NACK);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff fefb 	bl	80021e4 <etx_ota_send_resp.isra.0>
}
 80023ee:	4658      	mov	r0, fp
 80023f0:	b009      	add	sp, #36	; 0x24
 80023f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ret != HAL_OK)
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d175      	bne.n	80024e6 <firmware_image_download_and_install+0x1de>
			if (buf[len++] != ETX_OTA_SOF)
 80023fa:	7823      	ldrb	r3, [r4, #0]
 80023fc:	2baa      	cmp	r3, #170	; 0xaa
 80023fe:	d19a      	bne.n	8002336 <firmware_image_download_and_install+0x2e>
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002400:	f242 3328 	movw	r3, #9000	; 0x2328
 8002404:	2201      	movs	r2, #1
 8002406:	4649      	mov	r1, r9
 8002408:	f8d8 0000 	ldr.w	r0, [r8]
 800240c:	f002 ff5e 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002410:	2801      	cmp	r0, #1
 8002412:	d090      	beq.n	8002336 <firmware_image_download_and_install+0x2e>
 8002414:	1e83      	subs	r3, r0, #2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d9a3      	bls.n	8002364 <firmware_image_download_and_install+0x5c>
			if (ret != HAL_OK)
 800241c:	2800      	cmp	r0, #0
 800241e:	d162      	bne.n	80024e6 <firmware_image_download_and_install+0x1de>
			switch (buf[len++])
 8002420:	7863      	ldrb	r3, [r4, #1]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d887      	bhi.n	8002336 <firmware_image_download_and_install+0x2e>
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002426:	f242 3328 	movw	r3, #9000	; 0x2328
 800242a:	2202      	movs	r2, #2
 800242c:	4960      	ldr	r1, [pc, #384]	; (80025b0 <firmware_image_download_and_install+0x2a8>)
 800242e:	f8d8 0000 	ldr.w	r0, [r8]
 8002432:	f002 ff4b 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002436:	2801      	cmp	r0, #1
 8002438:	f43f af7d 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 800243c:	1e83      	subs	r3, r0, #2
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d98f      	bls.n	8002364 <firmware_image_download_and_install+0x5c>
			if (ret != HAL_OK)
 8002444:	2800      	cmp	r0, #0
 8002446:	d14e      	bne.n	80024e6 <firmware_image_download_and_install+0x1de>
			data_len = *(uint16_t *)&buf[len];
 8002448:	8863      	ldrh	r3, [r4, #2]
 800244a:	9300      	str	r3, [sp, #0]
			for (uint16_t i=0; i<data_len; i++)
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 81e7 	beq.w	8002820 <firmware_image_download_and_install+0x518>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8002452:	f04f 0a04 	mov.w	sl, #4
 8002456:	4453      	add	r3, sl
 8002458:	fa1f fb83 	uxth.w	fp, r3
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 800245c:	2201      	movs	r2, #1
 800245e:	f242 3328 	movw	r3, #9000	; 0x2328
 8002462:	f8d8 0000 	ldr.w	r0, [r8]
 8002466:	eb04 010a 	add.w	r1, r4, sl
 800246a:	f002 ff2f 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 800246e:	1e82      	subs	r2, r0, #2
 8002470:	2801      	cmp	r0, #1
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f43f af5f 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 8002478:	2a01      	cmp	r2, #1
 800247a:	f67f af73 	bls.w	8002364 <firmware_image_download_and_install+0x5c>
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 800247e:	f10a 0a01 	add.w	sl, sl, #1
 8002482:	fa1f fa8a 	uxth.w	sl, sl
				if (ret != HAL_OK)
 8002486:	bb70      	cbnz	r0, 80024e6 <firmware_image_download_and_install+0x1de>
			for (uint16_t i=0; i<data_len; i++)
 8002488:	45da      	cmp	sl, fp
 800248a:	d1e7      	bne.n	800245c <firmware_image_download_and_install+0x154>
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800248c:	eb04 0a0b 	add.w	sl, r4, fp
 8002490:	f242 3328 	movw	r3, #9000	; 0x2328
 8002494:	2204      	movs	r2, #4
 8002496:	4651      	mov	r1, sl
 8002498:	f8d8 0000 	ldr.w	r0, [r8]
 800249c:	f002 ff16 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 80024a0:	2801      	cmp	r0, #1
 80024a2:	f43f af48 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 80024a6:	1e83      	subs	r3, r0, #2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f67f af5a 	bls.w	8002364 <firmware_image_download_and_install+0x5c>
			if (ret != HAL_OK)
 80024b0:	b9c8      	cbnz	r0, 80024e6 <firmware_image_download_and_install+0x1de>
			len += ETX_OTA_CRC32_SIZE;
 80024b2:	f10b 0304 	add.w	r3, fp, #4
			rec_data_crc = *(uint32_t *) &buf[len];
 80024b6:	f8da 2000 	ldr.w	r2, [sl]
			len += ETX_OTA_CRC32_SIZE;
 80024ba:	b29b      	uxth	r3, r3
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024bc:	eb04 0a03 	add.w	sl, r4, r3
			len += ETX_OTA_CRC32_SIZE;
 80024c0:	9301      	str	r3, [sp, #4]
			rec_data_crc = *(uint32_t *) &buf[len];
 80024c2:	4693      	mov	fp, r2
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024c4:	f242 3328 	movw	r3, #9000	; 0x2328
 80024c8:	2201      	movs	r2, #1
 80024ca:	4651      	mov	r1, sl
 80024cc:	f8d8 0000 	ldr.w	r0, [r8]
 80024d0:	f002 fefc 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 80024d4:	2801      	cmp	r0, #1
 80024d6:	f43f af2e 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 80024da:	1e83      	subs	r3, r0, #2
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	f67f af40 	bls.w	8002364 <firmware_image_download_and_install+0x5c>
			if (ret != HAL_OK)
 80024e4:	b1f0      	cbz	r0, 8002524 <firmware_image_download_and_install+0x21c>
 80024e6:	4683      	mov	fp, r0
 80024e8:	e77b      	b.n	80023e2 <firmware_image_download_and_install+0xda>
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024ea:	46da      	mov	sl, fp
 80024ec:	f242 3228 	movw	r2, #9000	; 0x2328
 80024f0:	2104      	movs	r1, #4
 80024f2:	eb04 000a 	add.w	r0, r4, sl
 80024f6:	f000 ff73 	bl	80033e0 <get_hm10_ota_data>
			if (ret != HAL_OK)
 80024fa:	2800      	cmp	r0, #0
 80024fc:	f47f af6e 	bne.w	80023dc <firmware_image_download_and_install+0xd4>
			len += ETX_OTA_CRC32_SIZE;
 8002500:	f10b 0304 	add.w	r3, fp, #4
			rec_data_crc = *(uint32_t *) &buf[len];
 8002504:	f854 200a 	ldr.w	r2, [r4, sl]
			len += ETX_OTA_CRC32_SIZE;
 8002508:	b29b      	uxth	r3, r3
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800250a:	eb04 0a03 	add.w	sl, r4, r3
			rec_data_crc = *(uint32_t *) &buf[len];
 800250e:	4693      	mov	fp, r2
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002510:	2101      	movs	r1, #1
 8002512:	f242 3228 	movw	r2, #9000	; 0x2328
 8002516:	4650      	mov	r0, sl
			len += ETX_OTA_CRC32_SIZE;
 8002518:	9301      	str	r3, [sp, #4]
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800251a:	f000 ff61 	bl	80033e0 <get_hm10_ota_data>
			if (ret != HAL_OK)
 800251e:	2800      	cmp	r0, #0
 8002520:	f47f af5c 	bne.w	80023dc <firmware_image_download_and_install+0xd4>
	if (buf[len++] != ETX_OTA_EOF)
 8002524:	f89a 3000 	ldrb.w	r3, [sl]
 8002528:	2bbb      	cmp	r3, #187	; 0xbb
 800252a:	f47f af04 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
	cal_data_crc = crc32_mpeg2(&buf[ETX_OTA_DATA_FIELD_INDEX], data_len);
 800252e:	9900      	ldr	r1, [sp, #0]
 8002530:	4820      	ldr	r0, [pc, #128]	; (80025b4 <firmware_image_download_and_install+0x2ac>)
 8002532:	f000 f985 	bl	8002840 <crc32_mpeg2>
	if (cal_data_crc != rec_data_crc)
 8002536:	4558      	cmp	r0, fp
 8002538:	f47f aefd 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
	if (max_len < len)
 800253c:	f240 4209 	movw	r2, #1033	; 0x409
	if (buf[len++] != ETX_OTA_EOF)
 8002540:	9b01      	ldr	r3, [sp, #4]
 8002542:	3301      	adds	r3, #1
	if (max_len < len)
 8002544:	b29b      	uxth	r3, r3
 8002546:	4293      	cmp	r3, r2
 8002548:	f63f aef5 	bhi.w	8002336 <firmware_image_download_and_install+0x2e>
	if (cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD)
 800254c:	7863      	ldrb	r3, [r4, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80b7 	bne.w	80026c2 <firmware_image_download_and_install+0x3ba>
		if (cmd->cmd == ETX_OTA_CMD_ABORT)
 8002554:	7921      	ldrb	r1, [r4, #4]
 8002556:	2902      	cmp	r1, #2
 8002558:	f000 80c4 	beq.w	80026e4 <firmware_image_download_and_install+0x3dc>
	switch (etx_ota_state)
 800255c:	782a      	ldrb	r2, [r5, #0]
 800255e:	2a04      	cmp	r2, #4
 8002560:	f63f aee9 	bhi.w	8002336 <firmware_image_download_and_install+0x2e>
 8002564:	e8df f002 	tbb	[pc, r2]
 8002568:	2c860310 	.word	0x2c860310
 800256c:	97          	.byte	0x97
 800256d:	00          	.byte	0x00
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd == ETX_OTA_CMD_START))
 800256e:	2900      	cmp	r1, #0
 8002570:	f47f aee1 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				etx_ota_state = ETX_OTA_STATE_HEADER;
 8002574:	2302      	movs	r3, #2
 8002576:	702b      	strb	r3, [r5, #0]
				display_output[0] = 'E';
 8002578:	f44f 03a6 	mov.w	r3, #5439488	; 0x530000
 800257c:	480e      	ldr	r0, [pc, #56]	; (80025b8 <firmware_image_download_and_install+0x2b0>)
 800257e:	6043      	str	r3, [r0, #4]
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <firmware_image_download_and_install+0x2b4>)
 8002582:	6003      	str	r3, [r0, #0]
				set_5641as_display_output(display_output);
 8002584:	f7ff fad0 	bl	8001b28 <set_5641as_display_output>
				  etx_ota_send_resp(ETX_OTA_ACK);
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff fe2b 	bl	80021e4 <etx_ota_send_resp.isra.0>
	while (etx_ota_state != ETX_OTA_STATE_IDLE);
 800258e:	7828      	ldrb	r0, [r5, #0]
 8002590:	2800      	cmp	r0, #0
 8002592:	f47f aec8 	bne.w	8002326 <firmware_image_download_and_install+0x1e>
 8002596:	4683      	mov	fp, r0
 8002598:	e6d2      	b.n	8002340 <firmware_image_download_and_install+0x38>
 800259a:	bf00      	nop
 800259c:	20000470 	.word	0x20000470
 80025a0:	20000474 	.word	0x20000474
 80025a4:	2000005c 	.word	0x2000005c
 80025a8:	20000058 	.word	0x20000058
 80025ac:	20000480 	.word	0x20000480
 80025b0:	2000005e 	.word	0x2000005e
 80025b4:	20000060 	.word	0x20000060
 80025b8:	20000468 	.word	0x20000468
 80025bc:	004f0045 	.word	0x004f0045
			if (data->packet_type == ETX_OTA_PACKET_TYPE_DATA)
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f47f aeb8 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				stop_5641as_display_module();
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f7ff faa8 	bl	8001b1c <stop_5641as_display_module>
				if ((data->data_len)%4 != 0)
 80025cc:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 80025d0:	f01a 0b03 	ands.w	fp, sl, #3
 80025d4:	f47f aeaf 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				data_ret = write_data_to_flash_app(buf+ETX_OTA_DATA_FIELD_INDEX, data->data_len, etx_ota_fw_received_size==0);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9301      	str	r3, [sp, #4]
	ret = HAL_FLASH_Unlock();
 80025dc:	f001 fbe8 	bl	8003db0 <HAL_FLASH_Unlock>
  switch (HAL_status)
 80025e0:	2801      	cmp	r0, #1
 80025e2:	f43f aea8 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 80025e6:	1e82      	subs	r2, r0, #2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	2a01      	cmp	r2, #1
 80025ec:	9b00      	ldr	r3, [sp, #0]
 80025ee:	f67f aea5 	bls.w	800233c <firmware_image_download_and_install+0x34>
	if(ret != HAL_OK)
 80025f2:	2800      	cmp	r0, #0
 80025f4:	f040 80ac 	bne.w	8002750 <firmware_image_download_and_install+0x448>
	if (is_first_block)
 80025f8:	9a01      	ldr	r2, [sp, #4]
 80025fa:	2a00      	cmp	r2, #0
 80025fc:	f000 80be 	beq.w	800277c <firmware_image_download_and_install+0x474>
	uint8_t word_data[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
	if (data_len > 4)
 8002604:	f1ba 0f04 	cmp.w	sl, #4
	uint8_t word_data[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8002608:	9304      	str	r3, [sp, #16]
	if (data_len > 4)
 800260a:	f240 80ce 	bls.w	80027aa <firmware_image_download_and_install+0x4a2>
	uint16_t data_len_minus_one_word = data_len - 4;
 800260e:	f1aa 0304 	sub.w	r3, sl, #4
 8002612:	b29b      	uxth	r3, r3
 8002614:	9300      	str	r3, [sp, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002616:	6839      	ldr	r1, [r7, #0]
									p_data[bytes_flashed/4]);
 8002618:	ea4f 039b 	mov.w	r3, fp, lsr #2
 800261c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002620:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2002      	movs	r0, #2
 8002628:	2300      	movs	r3, #0
 800262a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800262e:	f001 fbe5 	bl	8003dfc <HAL_FLASH_Program>
  switch (HAL_status)
 8002632:	1e82      	subs	r2, r0, #2
 8002634:	2801      	cmp	r0, #1
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f43f ae7d 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 800263c:	2a01      	cmp	r2, #1
 800263e:	f67f ae7d 	bls.w	800233c <firmware_image_download_and_install+0x34>
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 8002642:	f10b 0b04 	add.w	fp, fp, #4
 8002646:	fa1f fb8b 	uxth.w	fp, fp
			if (ret == HAL_OK)
 800264a:	2800      	cmp	r0, #0
 800264c:	f040 8080 	bne.w	8002750 <firmware_image_download_and_install+0x448>
				etx_ota_fw_received_size += 4;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	3304      	adds	r3, #4
 8002654:	603b      	str	r3, [r7, #0]
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 8002656:	9b00      	ldr	r3, [sp, #0]
 8002658:	455b      	cmp	r3, fp
 800265a:	d8dc      	bhi.n	8002616 <firmware_image_download_and_install+0x30e>
		remaining_data_len_of_last_word = data_len - bytes_flashed;
 800265c:	ebaa 0a0b 	sub.w	sl, sl, fp
			word_data[i] = data[bytes_flashed + i];
 8002660:	4971      	ldr	r1, [pc, #452]	; (8002828 <firmware_image_download_and_install+0x520>)
		remaining_data_len_of_last_word = data_len - bytes_flashed;
 8002662:	fa5f f38a 	uxtb.w	r3, sl
			word_data[i] = data[bytes_flashed + i];
 8002666:	461a      	mov	r2, r3
 8002668:	4459      	add	r1, fp
 800266a:	a804      	add	r0, sp, #16
		remaining_data_len_of_last_word = data_len - bytes_flashed;
 800266c:	9300      	str	r3, [sp, #0]
			word_data[i] = data[bytes_flashed + i];
 800266e:	f002 fee1 	bl	8005434 <memcpy>
 8002672:	e0a4      	b.n	80027be <firmware_image_download_and_install+0x4b6>
			if (header->packet_type == ETX_OTA_PACKET_TYPE_HEADER)
 8002674:	2b02      	cmp	r3, #2
 8002676:	f47f ae5e 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				switch (header->meta_data.payload_type)
 800267a:	7ce2      	ldrb	r2, [r4, #19]
 800267c:	2a00      	cmp	r2, #0
 800267e:	d055      	beq.n	800272c <firmware_image_download_and_install+0x424>
 8002680:	2a01      	cmp	r2, #1
 8002682:	d035      	beq.n	80026f0 <firmware_image_download_and_install+0x3e8>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fdad 	bl	80021e4 <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_NA;
 800268a:	f04f 0b03 	mov.w	fp, #3
 800268e:	e657      	b.n	8002340 <firmware_image_download_and_install+0x38>
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd==ETX_OTA_CMD_END))
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f ae50 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
 8002696:	7922      	ldrb	r2, [r4, #4]
 8002698:	2a01      	cmp	r2, #1
 800269a:	f47f ae4c 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				uint32_t cal_crc = crc32_mpeg2((uint8_t *) ETX_APP_FLASH_ADDR, p_fw_config->App_fw_size);
 800269e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800282c <firmware_image_download_and_install+0x524>
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f8da 2000 	ldr.w	r2, [sl]
 80026a8:	4861      	ldr	r0, [pc, #388]	; (8002830 <firmware_image_download_and_install+0x528>)
 80026aa:	6891      	ldr	r1, [r2, #8]
 80026ac:	f000 f8c8 	bl	8002840 <crc32_mpeg2>
				if (cal_crc != p_fw_config->App_fw_rec_crc)
 80026b0:	f8da 2000 	ldr.w	r2, [sl]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4290      	cmp	r0, r2
 80026b8:	f47f ae3d 	bne.w	8002336 <firmware_image_download_and_install+0x2e>
				etx_ota_state = ETX_OTA_STATE_IDLE;
 80026bc:	9b00      	ldr	r3, [sp, #0]
 80026be:	702b      	strb	r3, [r5, #0]
			switch (ret)
 80026c0:	e762      	b.n	8002588 <firmware_image_download_and_install+0x280>
	switch (etx_ota_state)
 80026c2:	782a      	ldrb	r2, [r5, #0]
 80026c4:	2a04      	cmp	r2, #4
 80026c6:	f63f ae36 	bhi.w	8002336 <firmware_image_download_and_install+0x2e>
 80026ca:	a101      	add	r1, pc, #4	; (adr r1, 80026d0 <firmware_image_download_and_install+0x3c8>)
 80026cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80026d0:	08002589 	.word	0x08002589
 80026d4:	08002337 	.word	0x08002337
 80026d8:	08002675 	.word	0x08002675
 80026dc:	080025c1 	.word	0x080025c1
 80026e0:	08002691 	.word	0x08002691
				  etx_ota_send_resp(ETX_OTA_ACK);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fd7d 	bl	80021e4 <etx_ota_send_resp.isra.0>
				  return ETX_OTA_EC_STOP;
 80026ea:	f04f 0b01 	mov.w	fp, #1
 80026ee:	e627      	b.n	8002340 <firmware_image_download_and_install+0x38>
						if (header->meta_data.package_size > ETX_OTA_BL_FW_SIZE)
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
 80026f6:	d8c5      	bhi.n	8002684 <firmware_image_download_and_install+0x37c>
						display_output[0] = 'B';
 80026f8:	2355      	movs	r3, #85	; 0x55
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_STORED_IN_APP_FW;
 80026fa:	f240 1201 	movw	r2, #257	; 0x101
						display_output[0] = 'B';
 80026fe:	484d      	ldr	r0, [pc, #308]	; (8002834 <firmware_image_download_and_install+0x52c>)
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_STORED_IN_APP_FW;
 8002700:	f8df a128 	ldr.w	sl, [pc, #296]	; 800282c <firmware_image_download_and_install+0x524>
						display_output[0] = 'B';
 8002704:	6043      	str	r3, [r0, #4]
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_STORED_IN_APP_FW;
 8002706:	f8da 3000 	ldr.w	r3, [sl]
 800270a:	82da      	strh	r2, [r3, #22]
						display_output[0] = 'B';
 800270c:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <firmware_image_download_and_install+0x530>)
 800270e:	6003      	str	r3, [r0, #0]
						set_5641as_display_output(display_output);
 8002710:	f7ff fa0a 	bl	8001b28 <set_5641as_display_output>
				p_fw_config->App_fw_size = header->meta_data.package_size;
 8002714:	68a3      	ldr	r3, [r4, #8]
 8002716:	f8da 0000 	ldr.w	r0, [sl]
 800271a:	60c3      	str	r3, [r0, #12]
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	6083      	str	r3, [r0, #8]
				header_ret = firmware_update_configurations_write(p_fw_config);
 8002720:	f000 f976 	bl	8002a10 <firmware_update_configurations_write>
				if (header_ret != FIRM_UPDT_CONF_EC_OK)
 8002724:	b9a0      	cbnz	r0, 8002750 <firmware_image_download_and_install+0x448>
				etx_ota_state = ETX_OTA_STATE_DATA;
 8002726:	2303      	movs	r3, #3
 8002728:	702b      	strb	r3, [r5, #0]
			switch (ret)
 800272a:	e72d      	b.n	8002588 <firmware_image_download_and_install+0x280>
						if (header->meta_data.package_size > ETX_OTA_APP_FW_SIZE)
 800272c:	6861      	ldr	r1, [r4, #4]
 800272e:	f5b1 3fb0 	cmp.w	r1, #90112	; 0x16000
 8002732:	d8a7      	bhi.n	8002684 <firmware_image_download_and_install+0x37c>
						etx_ota_state = ETX_OTA_STATE_HEADER;
 8002734:	702b      	strb	r3, [r5, #0]
						display_output[0] = 'A';
 8002736:	2355      	movs	r3, #85	; 0x55
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_NOT_STORED_IN_APP_FW;
 8002738:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 800282c <firmware_image_download_and_install+0x524>
						display_output[0] = 'A';
 800273c:	483d      	ldr	r0, [pc, #244]	; (8002834 <firmware_image_download_and_install+0x52c>)
 800273e:	6043      	str	r3, [r0, #4]
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_NOT_STORED_IN_APP_FW;
 8002740:	f8da 3000 	ldr.w	r3, [sl]
 8002744:	82da      	strh	r2, [r3, #22]
						display_output[0] = 'A';
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <firmware_image_download_and_install+0x534>)
 8002748:	6003      	str	r3, [r0, #0]
						set_5641as_display_output(display_output);
 800274a:	f7ff f9ed 	bl	8001b28 <set_5641as_display_output>
						break;
 800274e:	e7e1      	b.n	8002714 <firmware_image_download_and_install+0x40c>
 8002750:	4683      	mov	fp, r0
			switch (ret)
 8002752:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002756:	2b03      	cmp	r3, #3
 8002758:	f63f adf2 	bhi.w	8002340 <firmware_image_download_and_install+0x38>
 800275c:	a101      	add	r1, pc, #4	; (adr r1, 8002764 <firmware_image_download_and_install+0x45c>)
 800275e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	080026e5 	.word	0x080026e5
 8002768:	0800233d 	.word	0x0800233d
 800276c:	08002685 	.word	0x08002685
 8002770:	08002337 	.word	0x08002337
			for (uint16_t i=0; i<data_len; i++)
 8002774:	f04f 0a04 	mov.w	sl, #4
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8002778:	46d3      	mov	fp, sl
 800277a:	e6b7      	b.n	80024ec <firmware_image_download_and_install+0x1e4>
		EraseInitStruct.PageAddress  = ETX_APP_FLASH_ADDR;
 800277c:	2258      	movs	r2, #88	; 0x58
		EraseInitStruct.Banks        = FLASH_BANK_1;
 800277e:	e9cd 0304 	strd	r0, r3, [sp, #16]
		EraseInitStruct.PageAddress  = ETX_APP_FLASH_ADDR;
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <firmware_image_download_and_install+0x528>)
		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002784:	a903      	add	r1, sp, #12
 8002786:	a804      	add	r0, sp, #16
		EraseInitStruct.PageAddress  = ETX_APP_FLASH_ADDR;
 8002788:	e9cd 3206 	strd	r3, r2, [sp, #24]
		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 800278c:	f001 fc86 	bl	800409c <HAL_FLASHEx_Erase>
  switch (HAL_status)
 8002790:	2801      	cmp	r0, #1
 8002792:	f43f add0 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 8002796:	1e83      	subs	r3, r0, #2
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	f67f adce 	bls.w	800233c <firmware_image_download_and_install+0x34>
		if (ret != HAL_OK)
 80027a0:	2800      	cmp	r0, #0
 80027a2:	f43f af2d 	beq.w	8002600 <firmware_image_download_and_install+0x2f8>
		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80027a6:	4683      	mov	fp, r0
 80027a8:	e7d3      	b.n	8002752 <firmware_image_download_and_install+0x44a>
		remaining_data_len_of_last_word = data_len;
 80027aa:	fa5f f28a 	uxtb.w	r2, sl
 80027ae:	9200      	str	r2, [sp, #0]
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 80027b0:	f1ba 0f00 	cmp.w	sl, #0
 80027b4:	d031      	beq.n	800281a <firmware_image_download_and_install+0x512>
			word_data[i] = data[i];
 80027b6:	491c      	ldr	r1, [pc, #112]	; (8002828 <firmware_image_download_and_install+0x520>)
 80027b8:	a804      	add	r0, sp, #16
 80027ba:	f002 fe3b 	bl	8005434 <memcpy>
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80027c6:	2002      	movs	r0, #2
 80027c8:	9a04      	ldr	r2, [sp, #16]
 80027ca:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80027ce:	f001 fb15 	bl	8003dfc <HAL_FLASH_Program>
  switch (HAL_status)
 80027d2:	2801      	cmp	r0, #1
 80027d4:	f43f adaf 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 80027d8:	1e82      	subs	r2, r0, #2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	2a01      	cmp	r2, #1
 80027de:	f67f adad 	bls.w	800233c <firmware_image_download_and_install+0x34>
	if (ret == HAL_OK)
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d1b4      	bne.n	8002750 <firmware_image_download_and_install+0x448>
		etx_ota_fw_received_size += remaining_data_len_of_last_word;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9a00      	ldr	r2, [sp, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	603b      	str	r3, [r7, #0]
	ret = HAL_FLASH_Lock();
 80027ee:	f001 fbf5 	bl	8003fdc <HAL_FLASH_Lock>
  switch (HAL_status)
 80027f2:	2801      	cmp	r0, #1
 80027f4:	f43f ad9f 	beq.w	8002336 <firmware_image_download_and_install+0x2e>
 80027f8:	1e82      	subs	r2, r0, #2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	2a01      	cmp	r2, #1
 80027fe:	f67f ad9d 	bls.w	800233c <firmware_image_download_and_install+0x34>
				if (data_ret != HAL_OK)
 8002802:	2800      	cmp	r0, #0
 8002804:	d1a4      	bne.n	8002750 <firmware_image_download_and_install+0x448>
				if (etx_ota_fw_received_size >= p_fw_config->App_fw_size)
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <firmware_image_download_and_install+0x524>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	f63f aeba 	bhi.w	8002588 <firmware_image_download_and_install+0x280>
					etx_ota_state = ETX_OTA_STATE_END;
 8002814:	2304      	movs	r3, #4
 8002816:	702b      	strb	r3, [r5, #0]
			switch (ret)
 8002818:	e6b6      	b.n	8002588 <firmware_image_download_and_install+0x280>
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 800281a:	f8cd a000 	str.w	sl, [sp]
 800281e:	e7ce      	b.n	80027be <firmware_image_download_and_install+0x4b6>
			len += ETX_OTA_DATA_LENGTH_SIZE;
 8002820:	f04f 0b04 	mov.w	fp, #4
 8002824:	e632      	b.n	800248c <firmware_image_download_and_install+0x184>
 8002826:	bf00      	nop
 8002828:	20000060 	.word	0x20000060
 800282c:	2000047c 	.word	0x2000047c
 8002830:	08008000 	.word	0x08008000
 8002834:	20000468 	.word	0x20000468
 8002838:	00460042 	.word	0x00460042
 800283c:	00460041 	.word	0x00460041

08002840 <crc32_mpeg2>:
    {
    	return checksum;
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 8002840:	1e4b      	subs	r3, r1, #1
 8002842:	3303      	adds	r3, #3
 8002844:	d813      	bhi.n	800286e <crc32_mpeg2+0x2e>
 8002846:	4602      	mov	r2, r0
    uint32_t checksum = 0xFFFFFFFF;
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	4411      	add	r1, r2
{
 800284e:	b410      	push	{r4}
 8002850:	4c08      	ldr	r4, [pc, #32]	; (8002874 <crc32_mpeg2+0x34>)
 8002852:	4402      	add	r2, r0
 8002854:	4401      	add	r1, r0
    {
        uint8_t top = (uint8_t) (checksum >> 24);
        top ^= p_data[i];
 8002856:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        checksum = (checksum << 8) ^ crc_table[top];
 800285a:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
 800285e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    for (unsigned int i=0; i<data_length; i++)
 8002862:	4291      	cmp	r1, r2
        checksum = (checksum << 8) ^ crc_table[top];
 8002864:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
    for (unsigned int i=0; i<data_length; i++)
 8002868:	d1f5      	bne.n	8002856 <crc32_mpeg2+0x16>
    }
    return checksum;
}
 800286a:	bc10      	pop	{r4}
 800286c:	4770      	bx	lr
    uint32_t checksum = 0xFFFFFFFF;
 800286e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002872:	4770      	bx	lr
 8002874:	0800547c 	.word	0x0800547c

08002878 <page_erase>:

	return ret;
}

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8002878:	b5d0      	push	{r4, r6, r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	4604      	mov	r4, r0
	#endif
	/** <b>Local variable ret:</b> @ref uin8_t Type variable used to hold the return value of either a @ref FirmUpdConf_Status or a @ref HAL_StatusTypeDef function. */
	uint8_t ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 800287e:	f001 fa97 	bl	8003db0 <HAL_FLASH_Unlock>
	return FIRM_UPDT_CONF_EC_OK;
}

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 8002882:	2801      	cmp	r0, #1
 8002884:	d006      	beq.n	8002894 <page_erase+0x1c>
 8002886:	1e83      	subs	r3, r0, #2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d805      	bhi.n	800289a <page_erase+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 800288e:	2002      	movs	r0, #2
}
 8002890:	b006      	add	sp, #24
 8002892:	bdd0      	pop	{r4, r6, r7, pc}
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8002894:	2004      	movs	r0, #4
}
 8002896:	b006      	add	sp, #24
 8002898:	bdd0      	pop	{r4, r6, r7, pc}
	if (ret != HAL_OK)
 800289a:	2800      	cmp	r0, #0
 800289c:	d1f8      	bne.n	8002890 <page_erase+0x18>
	EraseInitStruct.NbPages      = 1U;
 800289e:	2301      	movs	r3, #1
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80028a0:	2600      	movs	r6, #0
 80028a2:	2701      	movs	r7, #1
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80028a4:	a901      	add	r1, sp, #4
 80028a6:	a802      	add	r0, sp, #8
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80028a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 80028ac:	9404      	str	r4, [sp, #16]
	EraseInitStruct.NbPages      = 1U;
 80028ae:	9305      	str	r3, [sp, #20]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80028b0:	f001 fbf4 	bl	800409c <HAL_FLASHEx_Erase>
  switch (HAL_status)
 80028b4:	2801      	cmp	r0, #1
 80028b6:	d0ed      	beq.n	8002894 <page_erase+0x1c>
 80028b8:	1e83      	subs	r3, r0, #2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d9e6      	bls.n	800288e <page_erase+0x16>
	if (ret != HAL_OK)
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d1e5      	bne.n	8002890 <page_erase+0x18>
	ret = HAL_FLASH_Lock();
 80028c4:	f001 fb8a 	bl	8003fdc <HAL_FLASH_Lock>
  switch (HAL_status)
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d0e3      	beq.n	8002894 <page_erase+0x1c>
 80028cc:	1e83      	subs	r3, r0, #2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d9dc      	bls.n	800288e <page_erase+0x16>
 80028d4:	e7dc      	b.n	8002890 <page_erase+0x18>
 80028d6:	bf00      	nop

080028d8 <firmware_update_configurations_init>:
{
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <firmware_update_configurations_init+0xbc>)
 80028dc:	4f2e      	ldr	r7, [pc, #184]	; (8002998 <firmware_update_configurations_init+0xc0>)
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80028e2:	4c2e      	ldr	r4, [pc, #184]	; (800299c <firmware_update_configurations_init+0xc4>)
 80028e4:	4d2e      	ldr	r5, [pc, #184]	; (80029a0 <firmware_update_configurations_init+0xc8>)
	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80028e6:	603b      	str	r3, [r7, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80028e8:	e005      	b.n	80028f6 <firmware_update_configurations_init+0x1e>
 80028ea:	42ab      	cmp	r3, r5
 80028ec:	4620      	mov	r0, r4
 80028ee:	f04f 0101 	mov.w	r1, #1
 80028f2:	d02f      	beq.n	8002954 <firmware_update_configurations_init+0x7c>
 80028f4:	461c      	mov	r4, r3
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 80028f6:	7fe2      	ldrb	r2, [r4, #31]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80028f8:	f104 0320 	add.w	r3, r4, #32
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 80028fc:	2aff      	cmp	r2, #255	; 0xff
 80028fe:	d1f4      	bne.n	80028ea <firmware_update_configurations_init+0x12>
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002900:	7fc6      	ldrb	r6, [r0, #31]
 8002902:	2e00      	cmp	r6, #0
 8002904:	d1f1      	bne.n	80028ea <firmware_update_configurations_init+0x12>
 8002906:	b101      	cbz	r1, 800290a <firmware_update_configurations_init+0x32>
 8002908:	6038      	str	r0, [r7, #0]
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 800290a:	211c      	movs	r1, #28
 800290c:	3004      	adds	r0, #4
 800290e:	f7ff ff97 	bl	8002840 <crc32_mpeg2>
				if(cal_crc != p_most_recent_val->crc32)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4282      	cmp	r2, r0
 8002918:	d10b      	bne.n	8002932 <firmware_update_configurations_init+0x5a>
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 800291a:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <firmware_update_configurations_init+0xc8>)
 800291c:	4294      	cmp	r4, r2
 800291e:	d035      	beq.n	800298c <firmware_update_configurations_init+0xb4>
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <firmware_update_configurations_init+0xc4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d028      	beq.n	8002978 <firmware_update_configurations_init+0xa0>
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002926:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <firmware_update_configurations_init+0xcc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01c      	beq.n	8002966 <firmware_update_configurations_init+0x8e>
		ret = FIRM_UPDT_CONF_EC_OK;
 800292c:	2600      	movs	r6, #0
}
 800292e:	4630      	mov	r0, r6
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002932:	481a      	ldr	r0, [pc, #104]	; (800299c <firmware_update_configurations_init+0xc4>)
 8002934:	f7ff ffa0 	bl	8002878 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8002938:	b110      	cbz	r0, 8002940 <firmware_update_configurations_init+0x68>
						return FIRM_UPDT_CONF_EC_CRPT;
 800293a:	2605      	movs	r6, #5
}
 800293c:	4630      	mov	r0, r6
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002940:	4818      	ldr	r0, [pc, #96]	; (80029a4 <firmware_update_configurations_init+0xcc>)
 8002942:	f7ff ff99 	bl	8002878 <page_erase>
					if (ret != FIRM_UPDT_CONF_EC_OK)
 8002946:	2800      	cmp	r0, #0
 8002948:	d1f7      	bne.n	800293a <firmware_update_configurations_init+0x62>
					p_most_recent_val = NULL;
 800294a:	2300      	movs	r3, #0
					return FIRM_UPDT_CONF_EC_OK;
 800294c:	461e      	mov	r6, r3
					p_most_recent_val = NULL;
 800294e:	603b      	str	r3, [r7, #0]
}
 8002950:	4630      	mov	r0, r6
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <firmware_update_configurations_init+0xd0>)
 8002956:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	d0f5      	beq.n	800294a <firmware_update_configurations_init+0x72>
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <firmware_update_configurations_init+0xbc>)
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002960:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <firmware_update_configurations_init+0xcc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d1e2      	bne.n	800292c <firmware_update_configurations_init+0x54>
 8002966:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1de      	bne.n	800292c <firmware_update_configurations_init+0x54>
}
 800296e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002972:	480a      	ldr	r0, [pc, #40]	; (800299c <firmware_update_configurations_init+0xc4>)
 8002974:	f7ff bf80 	b.w	8002878 <page_erase>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <firmware_update_configurations_init+0xd0>)
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 800297a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1d5      	bne.n	800292e <firmware_update_configurations_init+0x56>
}
 8002982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <firmware_update_configurations_init+0xcc>)
 8002988:	f7ff bf76 	b.w	8002878 <page_erase>
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 800298c:	7fda      	ldrb	r2, [r3, #31]
 800298e:	2aff      	cmp	r2, #255	; 0xff
 8002990:	d1c6      	bne.n	8002920 <firmware_update_configurations_init+0x48>
 8002992:	e7da      	b.n	800294a <firmware_update_configurations_init+0x72>
 8002994:	0801efe0 	.word	0x0801efe0
 8002998:	20000484 	.word	0x20000484
 800299c:	0801e000 	.word	0x0801e000
 80029a0:	0801f000 	.word	0x0801f000
 80029a4:	0801e800 	.word	0x0801e800
 80029a8:	0801ef00 	.word	0x0801ef00

080029ac <firmware_update_configurations_read>:
	firmware_update_config_t *p_current_val = p_most_recent_val;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <firmware_update_configurations_read+0x5c>)
{
 80029ae:	4684      	mov	ip, r0
	firmware_update_config_t *p_current_val = p_most_recent_val;
 80029b0:	681b      	ldr	r3, [r3, #0]
{
 80029b2:	b510      	push	{r4, lr}
	if (p_current_val == NULL)
 80029b4:	b1ab      	cbz	r3, 80029e2 <firmware_update_configurations_read+0x36>
	return FIRM_UPDT_CONF_EC_OK;
 80029b6:	f04f 0e00 	mov.w	lr, #0
	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	6918      	ldr	r0, [r3, #16]
 80029c0:	68dc      	ldr	r4, [r3, #12]
 80029c2:	f8cc 000c 	str.w	r0, [ip, #12]
 80029c6:	f8cc 1000 	str.w	r1, [ip]
 80029ca:	f8cc 2004 	str.w	r2, [ip, #4]
 80029ce:	f8cc 4008 	str.w	r4, [ip, #8]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	f8cc 1010 	str.w	r1, [ip, #16]
 80029da:	f8cc 2014 	str.w	r2, [ip, #20]
}
 80029de:	4670      	mov	r0, lr
 80029e0:	bd10      	pop	{r4, pc}
		return FIRM_UPDT_CONF_EC_NO_DATA;
 80029e2:	f04f 0e06 	mov.w	lr, #6
		memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 80029e6:	4c09      	ldr	r4, [pc, #36]	; (8002a0c <firmware_update_configurations_read+0x60>)
 80029e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ea:	f8cc 0000 	str.w	r0, [ip]
 80029ee:	f8cc 1004 	str.w	r1, [ip, #4]
 80029f2:	f8cc 2008 	str.w	r2, [ip, #8]
 80029f6:	f8cc 300c 	str.w	r3, [ip, #12]
 80029fa:	cc03      	ldmia	r4!, {r0, r1}
 80029fc:	f8cc 0010 	str.w	r0, [ip, #16]
 8002a00:	f8cc 1014 	str.w	r1, [ip, #20]
}
 8002a04:	4670      	mov	r0, lr
 8002a06:	bd10      	pop	{r4, pc}
 8002a08:	20000484 	.word	0x20000484
 8002a0c:	0801e004 	.word	0x0801e004

08002a10 <firmware_update_configurations_write>:
{
 8002a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a14:	4686      	mov	lr, r0
	new_val_struct.data.reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002a16:	f04f 34ff 	mov.w	r4, #4294967295
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002a1a:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
{
 8002a1e:	b088      	sub	sp, #32
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002a20:	6800      	ldr	r0, [r0, #0]
 8002a22:	f8de 1004 	ldr.w	r1, [lr, #4]
 8002a26:	f8de 2008 	ldr.w	r2, [lr, #8]
 8002a2a:	f8de 300c 	ldr.w	r3, [lr, #12]
 8002a2e:	f10d 0c04 	add.w	ip, sp, #4
 8002a32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a36:	f8de 0010 	ldr.w	r0, [lr, #16]
 8002a3a:	f8de 1014 	ldr.w	r1, [lr, #20]
	if (p_most_recent_val != NULL)
 8002a3e:	4d31      	ldr	r5, [pc, #196]	; (8002b04 <firmware_update_configurations_write+0xf4>)
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002a40:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002a44:	211c      	movs	r1, #28
 8002a46:	a801      	add	r0, sp, #4
	new_val_struct.data.reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002a48:	9405      	str	r4, [sp, #20]
	new_val_struct.data.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002a4a:	f8ad 4018 	strh.w	r4, [sp, #24]
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002a4e:	9607      	str	r6, [sp, #28]
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002a50:	f7ff fef6 	bl	8002840 <crc32_mpeg2>
	if (p_most_recent_val != NULL)
 8002a54:	682c      	ldr	r4, [r5, #0]
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002a56:	9000      	str	r0, [sp, #0]
	if (p_most_recent_val != NULL)
 8002a58:	2c00      	cmp	r4, #0
 8002a5a:	d047      	beq.n	8002aec <firmware_update_configurations_write+0xdc>
		if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <firmware_update_configurations_write+0xf8>)
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <firmware_update_configurations_write+0xfc>)
		p_next_val = p_most_recent_val + 1;
 8002a60:	3420      	adds	r4, #32
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002a62:	4294      	cmp	r4, r2
 8002a64:	bf08      	it	eq
 8002a66:	461c      	moveq	r4, r3
	ret = HAL_FLASH_Unlock();
 8002a68:	f001 f9a2 	bl	8003db0 <HAL_FLASH_Unlock>
  switch (HAL_status)
 8002a6c:	2801      	cmp	r0, #1
 8002a6e:	d019      	beq.n	8002aa4 <firmware_update_configurations_write+0x94>
 8002a70:	1e82      	subs	r2, r0, #2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	2a01      	cmp	r2, #1
 8002a76:	d803      	bhi.n	8002a80 <firmware_update_configurations_write+0x70>
		return FIRM_UPDT_CONF_EC_NR;
 8002a78:	2002      	movs	r0, #2
}
 8002a7a:	b008      	add	sp, #32
 8002a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ret != HAL_OK)
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1fa      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
 8002a84:	4627      	mov	r7, r4
 8002a86:	f1ad 0604 	sub.w	r6, sp, #4
 8002a8a:	f10d 081c 	add.w	r8, sp, #28
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4639      	mov	r1, r7
 8002a92:	2002      	movs	r0, #2
 8002a94:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8002a98:	f001 f9b0 	bl	8003dfc <HAL_FLASH_Program>
  switch (HAL_status)
 8002a9c:	1e83      	subs	r3, r0, #2
 8002a9e:	2801      	cmp	r0, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	d103      	bne.n	8002aac <firmware_update_configurations_write+0x9c>
		return FIRM_UPDT_CONF_EC_ERR;
 8002aa4:	2004      	movs	r0, #4
}
 8002aa6:	b008      	add	sp, #32
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (HAL_status)
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d9e3      	bls.n	8002a78 <firmware_update_configurations_write+0x68>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002ab0:	3704      	adds	r7, #4
		if (ret != HAL_OK)
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1e1      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002ab6:	4546      	cmp	r6, r8
 8002ab8:	d1e9      	bne.n	8002a8e <firmware_update_configurations_write+0x7e>
	ret = HAL_FLASH_Lock();
 8002aba:	f001 fa8f 	bl	8003fdc <HAL_FLASH_Lock>
  switch (HAL_status)
 8002abe:	2801      	cmp	r0, #1
 8002ac0:	d0f0      	beq.n	8002aa4 <firmware_update_configurations_write+0x94>
 8002ac2:	1e83      	subs	r3, r0, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d9d6      	bls.n	8002a78 <firmware_update_configurations_write+0x68>
	if (ret != HAL_OK)
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d1d5      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <firmware_update_configurations_write+0xfc>)
	p_most_recent_val = p_next_val;
 8002ad0:	602c      	str	r4, [r5, #0]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002ad2:	429c      	cmp	r4, r3
 8002ad4:	d00c      	beq.n	8002af0 <firmware_update_configurations_write+0xe0>
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <firmware_update_configurations_write+0x100>)
 8002ad8:	429c      	cmp	r4, r3
 8002ada:	d1ce      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
 8002adc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ca      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002ae4:	4809      	ldr	r0, [pc, #36]	; (8002b0c <firmware_update_configurations_write+0xfc>)
 8002ae6:	f7ff fec7 	bl	8002878 <page_erase>
	return ret;
 8002aea:	e7c6      	b.n	8002a7a <firmware_update_configurations_write+0x6a>
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002aec:	4c07      	ldr	r4, [pc, #28]	; (8002b0c <firmware_update_configurations_write+0xfc>)
 8002aee:	e7bb      	b.n	8002a68 <firmware_update_configurations_write+0x58>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002af0:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002af4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1be      	bne.n	8002a7a <firmware_update_configurations_write+0x6a>
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <firmware_update_configurations_write+0x100>)
 8002afe:	f7ff febb 	bl	8002878 <page_erase>
 8002b02:	e7ba      	b.n	8002a7a <firmware_update_configurations_write+0x6a>
 8002b04:	20000484 	.word	0x20000484
 8002b08:	0801f000 	.word	0x0801f000
 8002b0c:	0801e000 	.word	0x0801e000
 8002b10:	0801e800 	.word	0x0801e800

08002b14 <init_hm10_module>:
 */
static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

void init_hm10_module(UART_HandleTypeDef *huart)
{
	p_huart = huart;
 8002b14:	4b01      	ldr	r3, [pc, #4]	; (8002b1c <init_hm10_module+0x8>)
 8002b16:	6018      	str	r0, [r3, #0]
}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000049c 	.word	0x2000049c

08002b20 <send_hm10_reset_cmd>:

	return HM10_EC_OK;
}

HM10_Status send_hm10_reset_cmd()
{
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	4c29      	ldr	r4, [pc, #164]	; (8002bc8 <send_hm10_reset_cmd+0xa8>)
 8002b24:	4d29      	ldr	r5, [pc, #164]	; (8002bcc <send_hm10_reset_cmd+0xac>)
{
	/** <b>Local variable ret:</b> Return value of either a HAL function type. */
	HAL_StatusTypeDef  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8002b26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	6828      	ldr	r0, [r5, #0]
 8002b30:	f002 fbcc 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8002b34:	2803      	cmp	r0, #3
 8002b36:	d1f6      	bne.n	8002b26 <send_hm10_reset_cmd+0x6>
	TxRx_Buffer[0] = 'A';
 8002b38:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <send_hm10_reset_cmd+0xb0>)
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <send_hm10_reset_cmd+0xb4>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002b3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
	TxRx_Buffer[0] = 'A';
 8002b40:	e9c4 1200 	strd	r1, r2, [r4]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002b44:	6828      	ldr	r0, [r5, #0]
 8002b46:	2208      	movs	r2, #8
 8002b48:	491f      	ldr	r1, [pc, #124]	; (8002bc8 <send_hm10_reset_cmd+0xa8>)
 8002b4a:	f002 fb1d 	bl	8005188 <HAL_UART_Transmit>
	}
}

static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
  switch (HAL_status)
 8002b4e:	2801      	cmp	r0, #1
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002b50:	4606      	mov	r6, r0
  switch (HAL_status)
 8002b52:	d006      	beq.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002b54:	1e83      	subs	r3, r0, #2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d805      	bhi.n	8002b68 <send_hm10_reset_cmd+0x48>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return HM10_EC_NR;
 8002b5c:	2602      	movs	r6, #2
}
 8002b5e:	4630      	mov	r0, r6
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
			return HM10_EC_ERR;
 8002b62:	2604      	movs	r6, #4
}
 8002b64:	4630      	mov	r0, r6
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d1f8      	bne.n	8002b5e <send_hm10_reset_cmd+0x3e>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002b6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b70:	2208      	movs	r2, #8
 8002b72:	4915      	ldr	r1, [pc, #84]	; (8002bc8 <send_hm10_reset_cmd+0xa8>)
 8002b74:	6828      	ldr	r0, [r5, #0]
 8002b76:	f002 fba9 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002b7a:	2801      	cmp	r0, #1
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002b7c:	4606      	mov	r6, r0
  switch (HAL_status)
 8002b7e:	d0f0      	beq.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002b80:	1e83      	subs	r3, r0, #2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d9e9      	bls.n	8002b5c <send_hm10_reset_cmd+0x3c>
	if (ret != HAL_OK)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d1e8      	bne.n	8002b5e <send_hm10_reset_cmd+0x3e>
		if (TxRx_Buffer[i] != HM10_Reset_resp[i])
 8002b8c:	7823      	ldrb	r3, [r4, #0]
 8002b8e:	2b4f      	cmp	r3, #79	; 0x4f
 8002b90:	d1e7      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002b92:	7863      	ldrb	r3, [r4, #1]
 8002b94:	2b4b      	cmp	r3, #75	; 0x4b
 8002b96:	d1e4      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002b98:	78a3      	ldrb	r3, [r4, #2]
 8002b9a:	2b2b      	cmp	r3, #43	; 0x2b
 8002b9c:	d1e1      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002b9e:	78e3      	ldrb	r3, [r4, #3]
 8002ba0:	2b52      	cmp	r3, #82	; 0x52
 8002ba2:	d1de      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002ba4:	7923      	ldrb	r3, [r4, #4]
 8002ba6:	2b45      	cmp	r3, #69	; 0x45
 8002ba8:	d1db      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002baa:	7963      	ldrb	r3, [r4, #5]
 8002bac:	2b53      	cmp	r3, #83	; 0x53
 8002bae:	d1d8      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002bb0:	79a3      	ldrb	r3, [r4, #6]
 8002bb2:	2b45      	cmp	r3, #69	; 0x45
 8002bb4:	d1d5      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
 8002bb6:	79e3      	ldrb	r3, [r4, #7]
 8002bb8:	2b54      	cmp	r3, #84	; 0x54
 8002bba:	d1d2      	bne.n	8002b62 <send_hm10_reset_cmd+0x42>
	HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8002bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc0:	f001 f85c 	bl	8003c7c <HAL_Delay>
	return HM10_EC_OK;
 8002bc4:	e7cb      	b.n	8002b5e <send_hm10_reset_cmd+0x3e>
 8002bc6:	bf00      	nop
 8002bc8:	20000488 	.word	0x20000488
 8002bcc:	2000049c 	.word	0x2000049c
 8002bd0:	522b5441 	.word	0x522b5441
 8002bd4:	54455345 	.word	0x54455345

08002bd8 <send_hm10_renew_cmd>:
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4c29      	ldr	r4, [pc, #164]	; (8002c80 <send_hm10_renew_cmd+0xa8>)
 8002bdc:	4d29      	ldr	r5, [pc, #164]	; (8002c84 <send_hm10_renew_cmd+0xac>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8002bde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002be2:	2201      	movs	r2, #1
 8002be4:	4621      	mov	r1, r4
 8002be6:	6828      	ldr	r0, [r5, #0]
 8002be8:	f002 fb70 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8002bec:	2803      	cmp	r0, #3
 8002bee:	d1f6      	bne.n	8002bde <send_hm10_renew_cmd+0x6>
    TxRx_Buffer[0] = 'A';
 8002bf0:	4925      	ldr	r1, [pc, #148]	; (8002c88 <send_hm10_renew_cmd+0xb0>)
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <send_hm10_renew_cmd+0xb4>)
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002bf4:	f44f 73a0 	mov.w	r3, #320	; 0x140
    TxRx_Buffer[0] = 'A';
 8002bf8:	e9c4 1200 	strd	r1, r2, [r4]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002bfc:	6828      	ldr	r0, [r5, #0]
 8002bfe:	2208      	movs	r2, #8
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <send_hm10_renew_cmd+0xa8>)
 8002c02:	f002 fac1 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8002c06:	2801      	cmp	r0, #1
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002c08:	4606      	mov	r6, r0
  switch (HAL_status)
 8002c0a:	d006      	beq.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c0c:	1e83      	subs	r3, r0, #2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d805      	bhi.n	8002c20 <send_hm10_renew_cmd+0x48>
		return HM10_EC_NR;
 8002c14:	2602      	movs	r6, #2
}
 8002c16:	4630      	mov	r0, r6
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
            return HM10_EC_ERR;
 8002c1a:	2604      	movs	r6, #4
}
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d1f8      	bne.n	8002c16 <send_hm10_renew_cmd+0x3e>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002c24:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c28:	2208      	movs	r2, #8
 8002c2a:	4915      	ldr	r1, [pc, #84]	; (8002c80 <send_hm10_renew_cmd+0xa8>)
 8002c2c:	6828      	ldr	r0, [r5, #0]
 8002c2e:	f002 fb4d 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002c32:	2801      	cmp	r0, #1
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002c34:	4606      	mov	r6, r0
  switch (HAL_status)
 8002c36:	d0f0      	beq.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c38:	1e83      	subs	r3, r0, #2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d9e9      	bls.n	8002c14 <send_hm10_renew_cmd+0x3c>
    if (ret != HAL_OK)
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1e8      	bne.n	8002c16 <send_hm10_renew_cmd+0x3e>
        if (TxRx_Buffer[i] != HM10_Renew_resp[i])
 8002c44:	7823      	ldrb	r3, [r4, #0]
 8002c46:	2b4f      	cmp	r3, #79	; 0x4f
 8002c48:	d1e7      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c4a:	7863      	ldrb	r3, [r4, #1]
 8002c4c:	2b4b      	cmp	r3, #75	; 0x4b
 8002c4e:	d1e4      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c50:	78a3      	ldrb	r3, [r4, #2]
 8002c52:	2b2b      	cmp	r3, #43	; 0x2b
 8002c54:	d1e1      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c56:	78e3      	ldrb	r3, [r4, #3]
 8002c58:	2b52      	cmp	r3, #82	; 0x52
 8002c5a:	d1de      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c5c:	7923      	ldrb	r3, [r4, #4]
 8002c5e:	2b45      	cmp	r3, #69	; 0x45
 8002c60:	d1db      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c62:	7963      	ldrb	r3, [r4, #5]
 8002c64:	2b4e      	cmp	r3, #78	; 0x4e
 8002c66:	d1d8      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c68:	79a3      	ldrb	r3, [r4, #6]
 8002c6a:	2b45      	cmp	r3, #69	; 0x45
 8002c6c:	d1d5      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
 8002c6e:	79e3      	ldrb	r3, [r4, #7]
 8002c70:	2b57      	cmp	r3, #87	; 0x57
 8002c72:	d1d2      	bne.n	8002c1a <send_hm10_renew_cmd+0x42>
    HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8002c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c78:	f001 f800 	bl	8003c7c <HAL_Delay>
    return HM10_EC_OK;
 8002c7c:	e7cb      	b.n	8002c16 <send_hm10_renew_cmd+0x3e>
 8002c7e:	bf00      	nop
 8002c80:	20000488 	.word	0x20000488
 8002c84:	2000049c 	.word	0x2000049c
 8002c88:	522b5441 	.word	0x522b5441
 8002c8c:	57454e45 	.word	0x57454e45

08002c90 <set_hm10_name>:
	if (size > HM10_MAX_BLE_NAME_SIZE)
 8002c90:	290c      	cmp	r1, #12
 8002c92:	f200 8132 	bhi.w	8002efa <set_hm10_name+0x26a>
{
 8002c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9a:	460e      	mov	r6, r1
 8002c9c:	4607      	mov	r7, r0
 8002c9e:	4c99      	ldr	r4, [pc, #612]	; (8002f04 <set_hm10_name+0x274>)
 8002ca0:	4d99      	ldr	r5, [pc, #612]	; (8002f08 <set_hm10_name+0x278>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8002ca2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4621      	mov	r1, r4
 8002caa:	6828      	ldr	r0, [r5, #0]
 8002cac:	f002 fb0e 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8002cb0:	2803      	cmp	r0, #3
 8002cb2:	d1f6      	bne.n	8002ca2 <set_hm10_name+0x12>
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8002cb4:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <set_hm10_name+0x27c>)
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 8002cb6:	2245      	movs	r2, #69	; 0x45
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8002cb8:	6023      	str	r3, [r4, #0]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8002cba:	f644 5341 	movw	r3, #19777	; 0x4d41
	uint8_t size_with_offset = size + bytes_populated_in_TxRx_Buffer;
 8002cbe:	f106 0807 	add.w	r8, r6, #7
 8002cc2:	fa5f f888 	uxtb.w	r8, r8
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002cc6:	f1b8 0f07 	cmp.w	r8, #7
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 8002cca:	71a2      	strb	r2, [r4, #6]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8002ccc:	80a3      	strh	r3, [r4, #4]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002cce:	f000 8116 	beq.w	8002efe <set_hm10_name+0x26e>
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <set_hm10_name+0x280>)
 8002cd4:	1bdb      	subs	r3, r3, r7
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	f240 80cb 	bls.w	8002e72 <set_hm10_name+0x1e2>
 8002cdc:	1e73      	subs	r3, r6, #1
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	f240 80c7 	bls.w	8002e72 <set_hm10_name+0x1e2>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f8c4 3007 	str.w	r3, [r4, #7]
 8002cea:	08b3      	lsrs	r3, r6, #2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f000 80a2 	beq.w	8002e36 <set_hm10_name+0x1a6>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	f8c4 200b 	str.w	r2, [r4, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002cfa:	f040 809c 	bne.w	8002e36 <set_hm10_name+0x1a6>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f8c4 300f 	str.w	r3, [r4, #15]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8002d04:	fa1f f288 	uxth.w	r2, r8
 8002d08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d0c:	497d      	ldr	r1, [pc, #500]	; (8002f04 <set_hm10_name+0x274>)
 8002d0e:	6828      	ldr	r0, [r5, #0]
 8002d10:	f002 fa3a 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8002d14:	2801      	cmp	r0, #1
 8002d16:	f000 808b 	beq.w	8002e30 <set_hm10_name+0x1a0>
 8002d1a:	1e83      	subs	r3, r0, #2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d802      	bhi.n	8002d28 <set_hm10_name+0x98>
		return HM10_EC_NR;
 8002d22:	2002      	movs	r0, #2
}
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ret != HAL_OK)
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d1fb      	bne.n	8002d24 <set_hm10_name+0x94>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8002d2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d30:	4642      	mov	r2, r8
 8002d32:	6828      	ldr	r0, [r5, #0]
 8002d34:	4973      	ldr	r1, [pc, #460]	; (8002f04 <set_hm10_name+0x274>)
 8002d36:	f002 fac9 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002d3a:	2801      	cmp	r0, #1
 8002d3c:	d078      	beq.n	8002e30 <set_hm10_name+0x1a0>
 8002d3e:	1e83      	subs	r3, r0, #2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d9ed      	bls.n	8002d22 <set_hm10_name+0x92>
	if (ret != HAL_OK)
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d1ec      	bne.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Name_resp_without_name_value[bytes_compared])
 8002d4a:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <set_hm10_name+0x284>)
 8002d4c:	7821      	ldrb	r1, [r4, #0]
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4291      	cmp	r1, r2
 8002d52:	d16d      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d54:	7861      	ldrb	r1, [r4, #1]
 8002d56:	785a      	ldrb	r2, [r3, #1]
 8002d58:	4291      	cmp	r1, r2
 8002d5a:	d169      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d5c:	78a1      	ldrb	r1, [r4, #2]
 8002d5e:	789a      	ldrb	r2, [r3, #2]
 8002d60:	4291      	cmp	r1, r2
 8002d62:	d165      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d64:	78e1      	ldrb	r1, [r4, #3]
 8002d66:	78da      	ldrb	r2, [r3, #3]
 8002d68:	4291      	cmp	r1, r2
 8002d6a:	d161      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d6c:	7921      	ldrb	r1, [r4, #4]
 8002d6e:	791a      	ldrb	r2, [r3, #4]
 8002d70:	4291      	cmp	r1, r2
 8002d72:	d15d      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d74:	7961      	ldrb	r1, [r4, #5]
 8002d76:	795a      	ldrb	r2, [r3, #5]
 8002d78:	4291      	cmp	r1, r2
 8002d7a:	d159      	bne.n	8002e30 <set_hm10_name+0x1a0>
 8002d7c:	799b      	ldrb	r3, [r3, #6]
 8002d7e:	79a2      	ldrb	r2, [r4, #6]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d155      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002d84:	f1b8 0f07 	cmp.w	r8, #7
 8002d88:	d0cc      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002d8a:	79e2      	ldrb	r2, [r4, #7]
 8002d8c:	783b      	ldrb	r3, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d14e      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002d92:	f1b8 0f08 	cmp.w	r8, #8
 8002d96:	d0c5      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002d98:	7a22      	ldrb	r2, [r4, #8]
 8002d9a:	787b      	ldrb	r3, [r7, #1]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d147      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002da0:	f1b8 0f09 	cmp.w	r8, #9
 8002da4:	d0be      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002da6:	7a62      	ldrb	r2, [r4, #9]
 8002da8:	78bb      	ldrb	r3, [r7, #2]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d140      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002dae:	f1b8 0f0a 	cmp.w	r8, #10
 8002db2:	d0b7      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002db4:	7aa2      	ldrb	r2, [r4, #10]
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d139      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002dbc:	f1b8 0f0b 	cmp.w	r8, #11
 8002dc0:	d0b0      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002dc2:	7ae2      	ldrb	r2, [r4, #11]
 8002dc4:	793b      	ldrb	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d132      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002dca:	f1b8 0f0c 	cmp.w	r8, #12
 8002dce:	d0a9      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002dd0:	7b22      	ldrb	r2, [r4, #12]
 8002dd2:	797b      	ldrb	r3, [r7, #5]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d12b      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002dd8:	f1b8 0f0d 	cmp.w	r8, #13
 8002ddc:	d0a2      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002dde:	7b62      	ldrb	r2, [r4, #13]
 8002de0:	79bb      	ldrb	r3, [r7, #6]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d124      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002de6:	f1b8 0f0e 	cmp.w	r8, #14
 8002dea:	d09b      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002dec:	7ba2      	ldrb	r2, [r4, #14]
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d11d      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002df4:	f1b8 0f0f 	cmp.w	r8, #15
 8002df8:	d094      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002dfa:	7be2      	ldrb	r2, [r4, #15]
 8002dfc:	7a3b      	ldrb	r3, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d116      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002e02:	f1b8 0f10 	cmp.w	r8, #16
 8002e06:	d08d      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002e08:	7c22      	ldrb	r2, [r4, #16]
 8002e0a:	7a7b      	ldrb	r3, [r7, #9]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d10f      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002e10:	f1b8 0f11 	cmp.w	r8, #17
 8002e14:	d086      	beq.n	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002e16:	7c62      	ldrb	r2, [r4, #17]
 8002e18:	7abb      	ldrb	r3, [r7, #10]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d108      	bne.n	8002e30 <set_hm10_name+0x1a0>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8002e1e:	f1b8 0f13 	cmp.w	r8, #19
 8002e22:	f47f af7f 	bne.w	8002d24 <set_hm10_name+0x94>
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8002e26:	7ca2      	ldrb	r2, [r4, #18]
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	f43f af7a 	beq.w	8002d24 <set_hm10_name+0x94>
	  case HAL_ERROR:
		return HM10_EC_ERR;
 8002e30:	2004      	movs	r0, #4
}
 8002e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e36:	f006 03fc 	and.w	r3, r6, #252	; 0xfc
 8002e3a:	1dda      	adds	r2, r3, #7
 8002e3c:	429e      	cmp	r6, r3
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f43f af60 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e44:	5cf9      	ldrb	r1, [r7, r3]
 8002e46:	54a1      	strb	r1, [r4, r2]
 8002e48:	f103 0208 	add.w	r2, r3, #8
 8002e4c:	b2d2      	uxtb	r2, r2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	4590      	cmp	r8, r2
 8002e52:	b2c9      	uxtb	r1, r1
 8002e54:	f67f af56 	bls.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e58:	5c79      	ldrb	r1, [r7, r1]
 8002e5a:	54a1      	strb	r1, [r4, r2]
 8002e5c:	f103 0209 	add.w	r2, r3, #9
 8002e60:	b2d2      	uxtb	r2, r2
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e62:	3302      	adds	r3, #2
 8002e64:	4590      	cmp	r8, r2
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f67f af4c 	bls.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e6c:	5cfb      	ldrb	r3, [r7, r3]
 8002e6e:	54a3      	strb	r3, [r4, r2]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e70:	e748      	b.n	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e72:	783b      	ldrb	r3, [r7, #0]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e74:	f1b8 0f08 	cmp.w	r8, #8
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e78:	71e3      	strb	r3, [r4, #7]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e7a:	f43f af43 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e7e:	787b      	ldrb	r3, [r7, #1]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e80:	f1b8 0f09 	cmp.w	r8, #9
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e84:	7223      	strb	r3, [r4, #8]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e86:	f43f af3d 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e8a:	78bb      	ldrb	r3, [r7, #2]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e8c:	f1b8 0f0a 	cmp.w	r8, #10
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e90:	7263      	strb	r3, [r4, #9]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e92:	f43f af37 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e96:	78fb      	ldrb	r3, [r7, #3]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e98:	f1b8 0f0b 	cmp.w	r8, #11
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002e9c:	72a3      	strb	r3, [r4, #10]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002e9e:	f43f af31 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ea2:	793b      	ldrb	r3, [r7, #4]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ea4:	f1b8 0f0c 	cmp.w	r8, #12
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ea8:	72e3      	strb	r3, [r4, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002eaa:	f43f af2b 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002eae:	797b      	ldrb	r3, [r7, #5]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002eb0:	f1b8 0f0d 	cmp.w	r8, #13
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002eb4:	7323      	strb	r3, [r4, #12]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002eb6:	f43f af25 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002eba:	79bb      	ldrb	r3, [r7, #6]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ebc:	f1b8 0f0e 	cmp.w	r8, #14
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ec0:	7363      	strb	r3, [r4, #13]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ec2:	f43f af1f 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ec8:	f1b8 0f0f 	cmp.w	r8, #15
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ecc:	73a3      	strb	r3, [r4, #14]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ece:	f43f af19 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ed2:	7a3b      	ldrb	r3, [r7, #8]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ed4:	f1b8 0f10 	cmp.w	r8, #16
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ed8:	73e3      	strb	r3, [r4, #15]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002eda:	f43f af13 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ede:	7a7b      	ldrb	r3, [r7, #9]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ee0:	f1b8 0f11 	cmp.w	r8, #17
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ee4:	7423      	strb	r3, [r4, #16]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ee6:	f43f af0d 	beq.w	8002d04 <set_hm10_name+0x74>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002eea:	7abb      	ldrb	r3, [r7, #10]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002eec:	f1b8 0f13 	cmp.w	r8, #19
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8002ef0:	7463      	strb	r3, [r4, #17]
 8002ef2:	bf04      	itt	eq
 8002ef4:	7afb      	ldrbeq	r3, [r7, #11]
 8002ef6:	74a3      	strbeq	r3, [r4, #18]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002ef8:	e704      	b.n	8002d04 <set_hm10_name+0x74>
		return HM10_EC_ERR;
 8002efa:	2004      	movs	r0, #4
}
 8002efc:	4770      	bx	lr
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8002efe:	4642      	mov	r2, r8
 8002f00:	e702      	b.n	8002d08 <set_hm10_name+0x78>
 8002f02:	bf00      	nop
 8002f04:	20000488 	.word	0x20000488
 8002f08:	2000049c 	.word	0x2000049c
 8002f0c:	4e2b5441 	.word	0x4e2b5441
 8002f10:	2000048e 	.word	0x2000048e
 8002f14:	20000000 	.word	0x20000000

08002f18 <set_hm10_role>:
	switch (ble_role)
 8002f18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d901      	bls.n	8002f24 <set_hm10_role+0xc>
			return HM10_EC_ERR;
 8002f20:	2004      	movs	r0, #4
}
 8002f22:	4770      	bx	lr
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4605      	mov	r5, r0
 8002f28:	4c2d      	ldr	r4, [pc, #180]	; (8002fe0 <set_hm10_role+0xc8>)
 8002f2a:	4e2e      	ldr	r6, [pc, #184]	; (8002fe4 <set_hm10_role+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8002f2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f30:	2201      	movs	r2, #1
 8002f32:	4621      	mov	r1, r4
 8002f34:	6830      	ldr	r0, [r6, #0]
 8002f36:	f002 f9c9 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8002f3a:	2803      	cmp	r0, #3
 8002f3c:	d1f6      	bne.n	8002f2c <set_hm10_role+0x14>
	TxRx_Buffer[4] = 'O';
 8002f3e:	f644 4e4f 	movw	lr, #19535	; 0x4c4f
	TxRx_Buffer[6] = 'E';
 8002f42:	f04f 0c45 	mov.w	ip, #69	; 0x45
	TxRx_Buffer[0] = 'A';
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <set_hm10_role+0xd0>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002f48:	2208      	movs	r2, #8
	TxRx_Buffer[0] = 'A';
 8002f4a:	6023      	str	r3, [r4, #0]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002f4c:	4924      	ldr	r1, [pc, #144]	; (8002fe0 <set_hm10_role+0xc8>)
 8002f4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f52:	6830      	ldr	r0, [r6, #0]
	TxRx_Buffer[7] = ble_role;
 8002f54:	71e5      	strb	r5, [r4, #7]
	TxRx_Buffer[4] = 'O';
 8002f56:	f8a4 e004 	strh.w	lr, [r4, #4]
	TxRx_Buffer[6] = 'E';
 8002f5a:	f884 c006 	strb.w	ip, [r4, #6]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002f5e:	f002 f913 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8002f62:	2801      	cmp	r0, #1
 8002f64:	d010      	beq.n	8002f88 <set_hm10_role+0x70>
 8002f66:	1e82      	subs	r2, r0, #2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	2a01      	cmp	r2, #1
 8002f6c:	d801      	bhi.n	8002f72 <set_hm10_role+0x5a>
		return HM10_EC_NR;
 8002f6e:	2002      	movs	r0, #2
}
 8002f70:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d1fc      	bne.n	8002f70 <set_hm10_role+0x58>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_ROLE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002f76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	6830      	ldr	r0, [r6, #0]
 8002f7e:	4918      	ldr	r1, [pc, #96]	; (8002fe0 <set_hm10_role+0xc8>)
 8002f80:	f002 f9a4 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8002f84:	2801      	cmp	r0, #1
 8002f86:	d101      	bne.n	8002f8c <set_hm10_role+0x74>
		return HM10_EC_ERR;
 8002f88:	2004      	movs	r0, #4
}
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (HAL_status)
 8002f8c:	1e82      	subs	r2, r0, #2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	2a01      	cmp	r2, #1
 8002f92:	d9ec      	bls.n	8002f6e <set_hm10_role+0x56>
	if (ret != HAL_OK)
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d1eb      	bne.n	8002f70 <set_hm10_role+0x58>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Role_resp_without_role_value[bytes_compared])
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <set_hm10_role+0xd4>)
 8002f9a:	7822      	ldrb	r2, [r4, #0]
 8002f9c:	7819      	ldrb	r1, [r3, #0]
 8002f9e:	4291      	cmp	r1, r2
 8002fa0:	d1f2      	bne.n	8002f88 <set_hm10_role+0x70>
 8002fa2:	7861      	ldrb	r1, [r4, #1]
 8002fa4:	785a      	ldrb	r2, [r3, #1]
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d1ee      	bne.n	8002f88 <set_hm10_role+0x70>
 8002faa:	78a1      	ldrb	r1, [r4, #2]
 8002fac:	789a      	ldrb	r2, [r3, #2]
 8002fae:	4291      	cmp	r1, r2
 8002fb0:	d1ea      	bne.n	8002f88 <set_hm10_role+0x70>
 8002fb2:	78e1      	ldrb	r1, [r4, #3]
 8002fb4:	78da      	ldrb	r2, [r3, #3]
 8002fb6:	4291      	cmp	r1, r2
 8002fb8:	d1e6      	bne.n	8002f88 <set_hm10_role+0x70>
 8002fba:	7921      	ldrb	r1, [r4, #4]
 8002fbc:	791a      	ldrb	r2, [r3, #4]
 8002fbe:	4291      	cmp	r1, r2
 8002fc0:	d1e2      	bne.n	8002f88 <set_hm10_role+0x70>
 8002fc2:	7961      	ldrb	r1, [r4, #5]
 8002fc4:	795a      	ldrb	r2, [r3, #5]
 8002fc6:	4291      	cmp	r1, r2
 8002fc8:	d1de      	bne.n	8002f88 <set_hm10_role+0x70>
 8002fca:	79a2      	ldrb	r2, [r4, #6]
 8002fcc:	799b      	ldrb	r3, [r3, #6]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d1da      	bne.n	8002f88 <set_hm10_role+0x70>
	if (TxRx_Buffer[bytes_compared] != ble_role)
 8002fd2:	79e0      	ldrb	r0, [r4, #7]
 8002fd4:	1b40      	subs	r0, r0, r5
 8002fd6:	bf18      	it	ne
 8002fd8:	2001      	movne	r0, #1
 8002fda:	0080      	lsls	r0, r0, #2
}
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000488 	.word	0x20000488
 8002fe4:	2000049c 	.word	0x2000049c
 8002fe8:	522b5441 	.word	0x522b5441
 8002fec:	20000000 	.word	0x20000000

08002ff0 <set_hm10_pin>:
{
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch (pin[current_pin_character])
 8002ff2:	7803      	ldrb	r3, [r0, #0]
 8002ff4:	3b30      	subs	r3, #48	; 0x30
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	f200 808a 	bhi.w	8003110 <set_hm10_pin+0x120>
 8002ffc:	7843      	ldrb	r3, [r0, #1]
 8002ffe:	4605      	mov	r5, r0
 8003000:	3b30      	subs	r3, #48	; 0x30
 8003002:	2b09      	cmp	r3, #9
 8003004:	f100 0701 	add.w	r7, r0, #1
 8003008:	f200 8082 	bhi.w	8003110 <set_hm10_pin+0x120>
 800300c:	7883      	ldrb	r3, [r0, #2]
 800300e:	3b30      	subs	r3, #48	; 0x30
 8003010:	2b09      	cmp	r3, #9
 8003012:	d87d      	bhi.n	8003110 <set_hm10_pin+0x120>
 8003014:	78c3      	ldrb	r3, [r0, #3]
 8003016:	3b30      	subs	r3, #48	; 0x30
 8003018:	2b09      	cmp	r3, #9
 800301a:	d879      	bhi.n	8003110 <set_hm10_pin+0x120>
 800301c:	7903      	ldrb	r3, [r0, #4]
 800301e:	3b30      	subs	r3, #48	; 0x30
 8003020:	2b09      	cmp	r3, #9
 8003022:	d875      	bhi.n	8003110 <set_hm10_pin+0x120>
 8003024:	7943      	ldrb	r3, [r0, #5]
 8003026:	3b30      	subs	r3, #48	; 0x30
 8003028:	2b09      	cmp	r3, #9
 800302a:	d871      	bhi.n	8003110 <set_hm10_pin+0x120>
 800302c:	4c40      	ldr	r4, [pc, #256]	; (8003130 <set_hm10_pin+0x140>)
 800302e:	4e41      	ldr	r6, [pc, #260]	; (8003134 <set_hm10_pin+0x144>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8003030:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003034:	2201      	movs	r2, #1
 8003036:	4621      	mov	r1, r4
 8003038:	6830      	ldr	r0, [r6, #0]
 800303a:	f002 f947 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800303e:	2803      	cmp	r0, #3
 8003040:	d1f6      	bne.n	8003030 <set_hm10_pin+0x40>
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <set_hm10_pin+0x148>)
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 8003044:	2253      	movs	r2, #83	; 0x53
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8003046:	6023      	str	r3, [r4, #0]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8003048:	f245 3341 	movw	r3, #21313	; 0x5341
 800304c:	80a3      	strh	r3, [r4, #4]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <set_hm10_pin+0x14c>)
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 8003050:	71a2      	strb	r2, [r4, #6]
 8003052:	1bdb      	subs	r3, r3, r7
 8003054:	2b02      	cmp	r3, #2
 8003056:	d95d      	bls.n	8003114 <set_hm10_pin+0x124>
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	f8c4 3007 	str.w	r3, [r4, #7]
 800305e:	792b      	ldrb	r3, [r5, #4]
 8003060:	72e3      	strb	r3, [r4, #11]
 8003062:	796b      	ldrb	r3, [r5, #5]
 8003064:	7323      	strb	r3, [r4, #12]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_PIN_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003066:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800306a:	220d      	movs	r2, #13
 800306c:	4930      	ldr	r1, [pc, #192]	; (8003130 <set_hm10_pin+0x140>)
 800306e:	6830      	ldr	r0, [r6, #0]
 8003070:	f002 f88a 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8003074:	2801      	cmp	r0, #1
 8003076:	d04b      	beq.n	8003110 <set_hm10_pin+0x120>
 8003078:	1e83      	subs	r3, r0, #2
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d801      	bhi.n	8003084 <set_hm10_pin+0x94>
		return HM10_EC_NR;
 8003080:	2002      	movs	r0, #2
}
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ret != HAL_OK)
 8003084:	2800      	cmp	r0, #0
 8003086:	d1fc      	bne.n	8003082 <set_hm10_pin+0x92>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_PIN_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003088:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800308c:	220d      	movs	r2, #13
 800308e:	6830      	ldr	r0, [r6, #0]
 8003090:	4927      	ldr	r1, [pc, #156]	; (8003130 <set_hm10_pin+0x140>)
 8003092:	f002 f91b 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8003096:	2801      	cmp	r0, #1
 8003098:	d03a      	beq.n	8003110 <set_hm10_pin+0x120>
 800309a:	1e83      	subs	r3, r0, #2
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d9ee      	bls.n	8003080 <set_hm10_pin+0x90>
	if (ret != HAL_OK)
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d1ed      	bne.n	8003082 <set_hm10_pin+0x92>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Pin_resp_without_pin_value[bytes_compared])
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <set_hm10_pin+0x150>)
 80030a8:	7821      	ldrb	r1, [r4, #0]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4291      	cmp	r1, r2
 80030ae:	d12f      	bne.n	8003110 <set_hm10_pin+0x120>
 80030b0:	7861      	ldrb	r1, [r4, #1]
 80030b2:	785a      	ldrb	r2, [r3, #1]
 80030b4:	4291      	cmp	r1, r2
 80030b6:	d12b      	bne.n	8003110 <set_hm10_pin+0x120>
 80030b8:	78a1      	ldrb	r1, [r4, #2]
 80030ba:	789a      	ldrb	r2, [r3, #2]
 80030bc:	4291      	cmp	r1, r2
 80030be:	d127      	bne.n	8003110 <set_hm10_pin+0x120>
 80030c0:	78e1      	ldrb	r1, [r4, #3]
 80030c2:	78da      	ldrb	r2, [r3, #3]
 80030c4:	4291      	cmp	r1, r2
 80030c6:	d123      	bne.n	8003110 <set_hm10_pin+0x120>
 80030c8:	7921      	ldrb	r1, [r4, #4]
 80030ca:	791a      	ldrb	r2, [r3, #4]
 80030cc:	4291      	cmp	r1, r2
 80030ce:	d11f      	bne.n	8003110 <set_hm10_pin+0x120>
 80030d0:	7961      	ldrb	r1, [r4, #5]
 80030d2:	795a      	ldrb	r2, [r3, #5]
 80030d4:	4291      	cmp	r1, r2
 80030d6:	d11b      	bne.n	8003110 <set_hm10_pin+0x120>
 80030d8:	79a2      	ldrb	r2, [r4, #6]
 80030da:	799b      	ldrb	r3, [r3, #6]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d117      	bne.n	8003110 <set_hm10_pin+0x120>
		if (TxRx_Buffer[bytes_compared++] != pin[current_pin_character])
 80030e0:	79e2      	ldrb	r2, [r4, #7]
 80030e2:	782b      	ldrb	r3, [r5, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d113      	bne.n	8003110 <set_hm10_pin+0x120>
 80030e8:	7a22      	ldrb	r2, [r4, #8]
 80030ea:	786b      	ldrb	r3, [r5, #1]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10f      	bne.n	8003110 <set_hm10_pin+0x120>
 80030f0:	7a62      	ldrb	r2, [r4, #9]
 80030f2:	78ab      	ldrb	r3, [r5, #2]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10b      	bne.n	8003110 <set_hm10_pin+0x120>
 80030f8:	7aa2      	ldrb	r2, [r4, #10]
 80030fa:	78eb      	ldrb	r3, [r5, #3]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <set_hm10_pin+0x120>
 8003100:	7ae2      	ldrb	r2, [r4, #11]
 8003102:	792b      	ldrb	r3, [r5, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d103      	bne.n	8003110 <set_hm10_pin+0x120>
 8003108:	7b22      	ldrb	r2, [r4, #12]
 800310a:	796b      	ldrb	r3, [r5, #5]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0b8      	beq.n	8003082 <set_hm10_pin+0x92>
				return HM10_EC_ERR;
 8003110:	2004      	movs	r0, #4
}
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 8003114:	782b      	ldrb	r3, [r5, #0]
 8003116:	71e3      	strb	r3, [r4, #7]
 8003118:	786b      	ldrb	r3, [r5, #1]
 800311a:	7223      	strb	r3, [r4, #8]
 800311c:	78ab      	ldrb	r3, [r5, #2]
 800311e:	7263      	strb	r3, [r4, #9]
 8003120:	78eb      	ldrb	r3, [r5, #3]
 8003122:	72a3      	strb	r3, [r4, #10]
 8003124:	792b      	ldrb	r3, [r5, #4]
 8003126:	72e3      	strb	r3, [r4, #11]
 8003128:	796b      	ldrb	r3, [r5, #5]
 800312a:	7323      	strb	r3, [r4, #12]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 800312c:	e79b      	b.n	8003066 <set_hm10_pin+0x76>
 800312e:	bf00      	nop
 8003130:	20000488 	.word	0x20000488
 8003134:	2000049c 	.word	0x2000049c
 8003138:	502b5441 	.word	0x502b5441
 800313c:	2000048f 	.word	0x2000048f
 8003140:	20000000 	.word	0x20000000

08003144 <set_hm10_pin_code_mode>:
	switch (pin_code_mode)
 8003144:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d001      	beq.n	8003150 <set_hm10_pin_code_mode+0xc>
			return HM10_EC_ERR;
 800314c:	2004      	movs	r0, #4
}
 800314e:	4770      	bx	lr
{
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	4606      	mov	r6, r0
 8003154:	4c2d      	ldr	r4, [pc, #180]	; (800320c <set_hm10_pin_code_mode+0xc8>)
 8003156:	4d2e      	ldr	r5, [pc, #184]	; (8003210 <set_hm10_pin_code_mode+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8003158:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800315c:	2201      	movs	r2, #1
 800315e:	4621      	mov	r1, r4
 8003160:	6828      	ldr	r0, [r5, #0]
 8003162:	f002 f8b3 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8003166:	2803      	cmp	r0, #3
 8003168:	d1f6      	bne.n	8003158 <set_hm10_pin_code_mode+0x14>
	TxRx_Buffer[4] = 'Y';
 800316a:	f245 0e59 	movw	lr, #20569	; 0x5059
	TxRx_Buffer[6] = 'E';
 800316e:	f04f 0c45 	mov.w	ip, #69	; 0x45
	TxRx_Buffer[0] = 'A';
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <set_hm10_pin_code_mode+0xd0>)
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003174:	2208      	movs	r2, #8
	TxRx_Buffer[0] = 'A';
 8003176:	6023      	str	r3, [r4, #0]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003178:	4924      	ldr	r1, [pc, #144]	; (800320c <set_hm10_pin_code_mode+0xc8>)
 800317a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800317e:	6828      	ldr	r0, [r5, #0]
	TxRx_Buffer[7] = pin_code_mode;
 8003180:	71e6      	strb	r6, [r4, #7]
	TxRx_Buffer[4] = 'Y';
 8003182:	f8a4 e004 	strh.w	lr, [r4, #4]
	TxRx_Buffer[6] = 'E';
 8003186:	f884 c006 	strb.w	ip, [r4, #6]
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800318a:	f001 fffd 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 800318e:	2801      	cmp	r0, #1
 8003190:	d005      	beq.n	800319e <set_hm10_pin_code_mode+0x5a>
 8003192:	1e83      	subs	r3, r0, #2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d803      	bhi.n	80031a2 <set_hm10_pin_code_mode+0x5e>
		return HM10_EC_NR;
 800319a:	2002      	movs	r0, #2
}
 800319c:	bd70      	pop	{r4, r5, r6, pc}
			return HM10_EC_ERR;
 800319e:	2004      	movs	r0, #4
}
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != HAL_OK)
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1fa      	bne.n	800319c <set_hm10_pin_code_mode+0x58>
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_TYPE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80031a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80031aa:	2208      	movs	r2, #8
 80031ac:	6828      	ldr	r0, [r5, #0]
 80031ae:	4917      	ldr	r1, [pc, #92]	; (800320c <set_hm10_pin_code_mode+0xc8>)
 80031b0:	f002 f88c 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 80031b4:	2801      	cmp	r0, #1
 80031b6:	d0f2      	beq.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031b8:	1e83      	subs	r3, r0, #2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d9ec      	bls.n	800319a <set_hm10_pin_code_mode+0x56>
	if (ret != HAL_OK)
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d1eb      	bne.n	800319c <set_hm10_pin_code_mode+0x58>
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Type_resp_without_type_value[bytes_compared])
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <set_hm10_pin_code_mode+0xd4>)
 80031c6:	7822      	ldrb	r2, [r4, #0]
 80031c8:	7819      	ldrb	r1, [r3, #0]
 80031ca:	4291      	cmp	r1, r2
 80031cc:	d1e7      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031ce:	7861      	ldrb	r1, [r4, #1]
 80031d0:	785a      	ldrb	r2, [r3, #1]
 80031d2:	4291      	cmp	r1, r2
 80031d4:	d1e3      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031d6:	78a1      	ldrb	r1, [r4, #2]
 80031d8:	789a      	ldrb	r2, [r3, #2]
 80031da:	4291      	cmp	r1, r2
 80031dc:	d1df      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031de:	78e1      	ldrb	r1, [r4, #3]
 80031e0:	78da      	ldrb	r2, [r3, #3]
 80031e2:	4291      	cmp	r1, r2
 80031e4:	d1db      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031e6:	7921      	ldrb	r1, [r4, #4]
 80031e8:	791a      	ldrb	r2, [r3, #4]
 80031ea:	4291      	cmp	r1, r2
 80031ec:	d1d7      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031ee:	7961      	ldrb	r1, [r4, #5]
 80031f0:	795a      	ldrb	r2, [r3, #5]
 80031f2:	4291      	cmp	r1, r2
 80031f4:	d1d3      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
 80031f6:	79a2      	ldrb	r2, [r4, #6]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d1cf      	bne.n	800319e <set_hm10_pin_code_mode+0x5a>
	if (TxRx_Buffer[bytes_compared] != pin_code_mode)
 80031fe:	79e3      	ldrb	r3, [r4, #7]
 8003200:	1b98      	subs	r0, r3, r6
 8003202:	bf18      	it	ne
 8003204:	2001      	movne	r0, #1
 8003206:	0080      	lsls	r0, r0, #2
}
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	bf00      	nop
 800320c:	20000488 	.word	0x20000488
 8003210:	2000049c 	.word	0x2000049c
 8003214:	542b5441 	.word	0x542b5441
 8003218:	20000000 	.word	0x20000000

0800321c <set_hm10_module_work_mode>:
    switch (module_work_mode)
 800321c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <set_hm10_module_work_mode+0xc>
            return HM10_EC_ERR;
 8003224:	2004      	movs	r0, #4
}
 8003226:	4770      	bx	lr
{
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4606      	mov	r6, r0
 800322c:	4c2d      	ldr	r4, [pc, #180]	; (80032e4 <set_hm10_module_work_mode+0xc8>)
 800322e:	4d2e      	ldr	r5, [pc, #184]	; (80032e8 <set_hm10_module_work_mode+0xcc>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8003230:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003234:	2201      	movs	r2, #1
 8003236:	4621      	mov	r1, r4
 8003238:	6828      	ldr	r0, [r5, #0]
 800323a:	f002 f847 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800323e:	2803      	cmp	r0, #3
 8003240:	d1f6      	bne.n	8003230 <set_hm10_module_work_mode+0x14>
    TxRx_Buffer[4] = 'O';
 8003242:	f244 4e4f 	movw	lr, #17487	; 0x444f
    TxRx_Buffer[6] = 'E';
 8003246:	f04f 0c45 	mov.w	ip, #69	; 0x45
    TxRx_Buffer[0] = 'A';
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <set_hm10_module_work_mode+0xd0>)
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800324c:	2208      	movs	r2, #8
    TxRx_Buffer[0] = 'A';
 800324e:	6023      	str	r3, [r4, #0]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003250:	4924      	ldr	r1, [pc, #144]	; (80032e4 <set_hm10_module_work_mode+0xc8>)
 8003252:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003256:	6828      	ldr	r0, [r5, #0]
    TxRx_Buffer[7] = module_work_mode;
 8003258:	71e6      	strb	r6, [r4, #7]
    TxRx_Buffer[4] = 'O';
 800325a:	f8a4 e004 	strh.w	lr, [r4, #4]
    TxRx_Buffer[6] = 'E';
 800325e:	f884 c006 	strb.w	ip, [r4, #6]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003262:	f001 ff91 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8003266:	2801      	cmp	r0, #1
 8003268:	d005      	beq.n	8003276 <set_hm10_module_work_mode+0x5a>
 800326a:	1e82      	subs	r2, r0, #2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	2a01      	cmp	r2, #1
 8003270:	d803      	bhi.n	800327a <set_hm10_module_work_mode+0x5e>
		return HM10_EC_NR;
 8003272:	2002      	movs	r0, #2
}
 8003274:	bd70      	pop	{r4, r5, r6, pc}
		return HM10_EC_ERR;
 8003276:	2004      	movs	r0, #4
}
 8003278:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 800327a:	2800      	cmp	r0, #0
 800327c:	d1fa      	bne.n	8003274 <set_hm10_module_work_mode+0x58>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_MODE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800327e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003282:	2208      	movs	r2, #8
 8003284:	6828      	ldr	r0, [r5, #0]
 8003286:	4917      	ldr	r1, [pc, #92]	; (80032e4 <set_hm10_module_work_mode+0xc8>)
 8003288:	f002 f820 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 800328c:	2801      	cmp	r0, #1
 800328e:	d0f2      	beq.n	8003276 <set_hm10_module_work_mode+0x5a>
 8003290:	1e82      	subs	r2, r0, #2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	2a01      	cmp	r2, #1
 8003296:	d9ec      	bls.n	8003272 <set_hm10_module_work_mode+0x56>
    if (ret != HAL_OK)
 8003298:	2800      	cmp	r0, #0
 800329a:	d1eb      	bne.n	8003274 <set_hm10_module_work_mode+0x58>
        if (TxRx_Buffer[bytes_compared] != HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared])
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <set_hm10_module_work_mode+0xd4>)
 800329e:	7822      	ldrb	r2, [r4, #0]
 80032a0:	7819      	ldrb	r1, [r3, #0]
 80032a2:	4291      	cmp	r1, r2
 80032a4:	d1e7      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032a6:	7861      	ldrb	r1, [r4, #1]
 80032a8:	785a      	ldrb	r2, [r3, #1]
 80032aa:	4291      	cmp	r1, r2
 80032ac:	d1e3      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032ae:	78a1      	ldrb	r1, [r4, #2]
 80032b0:	789a      	ldrb	r2, [r3, #2]
 80032b2:	4291      	cmp	r1, r2
 80032b4:	d1df      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032b6:	78e1      	ldrb	r1, [r4, #3]
 80032b8:	78da      	ldrb	r2, [r3, #3]
 80032ba:	4291      	cmp	r1, r2
 80032bc:	d1db      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032be:	7921      	ldrb	r1, [r4, #4]
 80032c0:	791a      	ldrb	r2, [r3, #4]
 80032c2:	4291      	cmp	r1, r2
 80032c4:	d1d7      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032c6:	7961      	ldrb	r1, [r4, #5]
 80032c8:	795a      	ldrb	r2, [r3, #5]
 80032ca:	4291      	cmp	r1, r2
 80032cc:	d1d3      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
 80032ce:	79a2      	ldrb	r2, [r4, #6]
 80032d0:	799b      	ldrb	r3, [r3, #6]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d1cf      	bne.n	8003276 <set_hm10_module_work_mode+0x5a>
    if (TxRx_Buffer[bytes_compared] != module_work_mode)
 80032d6:	79e0      	ldrb	r0, [r4, #7]
 80032d8:	1b80      	subs	r0, r0, r6
 80032da:	bf18      	it	ne
 80032dc:	2001      	movne	r0, #1
 80032de:	0080      	lsls	r0, r0, #2
}
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
 80032e2:	bf00      	nop
 80032e4:	20000488 	.word	0x20000488
 80032e8:	2000049c 	.word	0x2000049c
 80032ec:	4d2b5441 	.word	0x4d2b5441
 80032f0:	20000000 	.word	0x20000000

080032f4 <disconnect_hm10_from_bt_address>:
{
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4d2c      	ldr	r5, [pc, #176]	; (80033a8 <disconnect_hm10_from_bt_address+0xb4>)
 80032f8:	4c2c      	ldr	r4, [pc, #176]	; (80033ac <disconnect_hm10_from_bt_address+0xb8>)
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 80032fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032fe:	2201      	movs	r2, #1
 8003300:	4629      	mov	r1, r5
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	f001 ffe2 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8003308:	2803      	cmp	r0, #3
 800330a:	d1f6      	bne.n	80032fa <disconnect_hm10_from_bt_address+0x6>
    TxRx_Buffer[0] = 'A';
 800330c:	f245 4641 	movw	r6, #21569	; 0x5441
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003310:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003314:	2202      	movs	r2, #2
 8003316:	4924      	ldr	r1, [pc, #144]	; (80033a8 <disconnect_hm10_from_bt_address+0xb4>)
 8003318:	6820      	ldr	r0, [r4, #0]
    TxRx_Buffer[0] = 'A';
 800331a:	802e      	strh	r6, [r5, #0]
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800331c:	f001 ff34 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 8003320:	1e43      	subs	r3, r0, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d802      	bhi.n	800332e <disconnect_hm10_from_bt_address+0x3a>
        return HM10_BT_Connection_Status_Unknown;
 8003328:	2600      	movs	r6, #0
}
 800332a:	4630      	mov	r0, r6
 800332c:	bd70      	pop	{r4, r5, r6, pc}
    if (ret != HAL_OK)
 800332e:	2800      	cmp	r0, #0
 8003330:	d1fa      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003332:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003336:	2202      	movs	r2, #2
 8003338:	491b      	ldr	r1, [pc, #108]	; (80033a8 <disconnect_hm10_from_bt_address+0xb4>)
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	f001 ffc6 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8003340:	1e43      	subs	r3, r0, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003346:	4606      	mov	r6, r0
  switch (HAL_status)
 8003348:	d9ee      	bls.n	8003328 <disconnect_hm10_from_bt_address+0x34>
    if (ret != HAL_OK)
 800334a:	2800      	cmp	r0, #0
 800334c:	d1ec      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800334e:	782b      	ldrb	r3, [r5, #0]
 8003350:	2b4f      	cmp	r3, #79	; 0x4f
 8003352:	d1e9      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
 8003354:	786b      	ldrb	r3, [r5, #1]
 8003356:	2b4b      	cmp	r3, #75	; 0x4b
 8003358:	d1e6      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
    ret = HAL_UART_Receive(p_huart, &TxRx_Buffer[bytes_compared], HM10_OK_LOST_RESPONSE_SIZE_WITHOUT_THE_OK_PART, HM10_CUSTOM_HAL_TIMEOUT);
 800335a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800335e:	2205      	movs	r2, #5
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	4913      	ldr	r1, [pc, #76]	; (80033b0 <disconnect_hm10_from_bt_address+0xbc>)
 8003364:	f001 ffb2 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 8003368:	2801      	cmp	r0, #1
 800336a:	d0de      	beq.n	800332a <disconnect_hm10_from_bt_address+0x36>
 800336c:	1e83      	subs	r3, r0, #2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d801      	bhi.n	8003378 <disconnect_hm10_from_bt_address+0x84>
 8003374:	2601      	movs	r6, #1
    if (ret != HAL_OK)
 8003376:	e7d8      	b.n	800332a <disconnect_hm10_from_bt_address+0x36>
    ret = HAL_ret_handler(ret);
 8003378:	b200      	sxth	r0, r0
    if (ret != HAL_OK)
 800337a:	b980      	cbnz	r0, 800339e <disconnect_hm10_from_bt_address+0xaa>
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800337c:	78ab      	ldrb	r3, [r5, #2]
 800337e:	2b2b      	cmp	r3, #43	; 0x2b
 8003380:	d1d2      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
 8003382:	78eb      	ldrb	r3, [r5, #3]
 8003384:	2b4c      	cmp	r3, #76	; 0x4c
 8003386:	d1cf      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
 8003388:	792b      	ldrb	r3, [r5, #4]
 800338a:	2b4f      	cmp	r3, #79	; 0x4f
 800338c:	d1cc      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
 800338e:	796b      	ldrb	r3, [r5, #5]
 8003390:	2b53      	cmp	r3, #83	; 0x53
 8003392:	d1c9      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
 8003394:	79ab      	ldrb	r3, [r5, #6]
 8003396:	2b54      	cmp	r3, #84	; 0x54
 8003398:	d1c6      	bne.n	8003328 <disconnect_hm10_from_bt_address+0x34>
    return HM10_BT_Connection_Lost;
 800339a:	2602      	movs	r6, #2
 800339c:	e7c5      	b.n	800332a <disconnect_hm10_from_bt_address+0x36>
        return HM10_BT_Connection_Status_Unknown;
 800339e:	1e83      	subs	r3, r0, #2
 80033a0:	425e      	negs	r6, r3
 80033a2:	415e      	adcs	r6, r3
        if (ret == HM10_EC_NR)
 80033a4:	e7c1      	b.n	800332a <disconnect_hm10_from_bt_address+0x36>
 80033a6:	bf00      	nop
 80033a8:	20000488 	.word	0x20000488
 80033ac:	2000049c 	.word	0x2000049c
 80033b0:	2000048a 	.word	0x2000048a

080033b4 <send_hm10_ota_data>:
{
 80033b4:	468c      	mov	ip, r1
 80033b6:	b508      	push	{r3, lr}
 80033b8:	4686      	mov	lr, r0
 80033ba:	4613      	mov	r3, r2
	ret = HAL_UART_Transmit(p_huart, ble_ota_data, size, timeout);
 80033bc:	4a07      	ldr	r2, [pc, #28]	; (80033dc <send_hm10_ota_data+0x28>)
 80033be:	4671      	mov	r1, lr
 80033c0:	6810      	ldr	r0, [r2, #0]
 80033c2:	4662      	mov	r2, ip
 80033c4:	f001 fee0 	bl	8005188 <HAL_UART_Transmit>
  switch (HAL_status)
 80033c8:	2801      	cmp	r0, #1
 80033ca:	d005      	beq.n	80033d8 <send_hm10_ota_data+0x24>
 80033cc:	1e83      	subs	r3, r0, #2
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf98      	it	ls
 80033d4:	2002      	movls	r0, #2
}
 80033d6:	bd08      	pop	{r3, pc}
		return HM10_EC_ERR;
 80033d8:	2004      	movs	r0, #4
}
 80033da:	bd08      	pop	{r3, pc}
 80033dc:	2000049c 	.word	0x2000049c

080033e0 <get_hm10_ota_data>:
{
 80033e0:	468c      	mov	ip, r1
 80033e2:	b508      	push	{r3, lr}
 80033e4:	4686      	mov	lr, r0
 80033e6:	4613      	mov	r3, r2
	ret = HAL_UART_Receive(p_huart, ble_ota_data, size, timeout);
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <get_hm10_ota_data+0x28>)
 80033ea:	4671      	mov	r1, lr
 80033ec:	6810      	ldr	r0, [r2, #0]
 80033ee:	4662      	mov	r2, ip
 80033f0:	f001 ff6c 	bl	80052cc <HAL_UART_Receive>
  switch (HAL_status)
 80033f4:	2801      	cmp	r0, #1
 80033f6:	d005      	beq.n	8003404 <get_hm10_ota_data+0x24>
 80033f8:	1e83      	subs	r3, r0, #2
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	bf98      	it	ls
 8003400:	2002      	movls	r0, #2
}
 8003402:	bd08      	pop	{r3, pc}
		return HM10_EC_ERR;
 8003404:	2004      	movs	r0, #4
}
 8003406:	bd08      	pop	{r3, pc}
 8003408:	2000049c 	.word	0x2000049c

0800340c <validate_application_firmware>:
		printf("DONE: Bootloader Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}

static void validate_application_firmware(uint8_t *is_app_fw_validation_ok)
{
 800340c:	b538      	push	{r3, r4, r5, lr}
    #if ETX_OTA_VERBOSE
        printf("Validating the Application Firmware of our MCU/MPU...\r\n");
    #endif
    if ((fw_config.App_fw_rec_crc==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 800340e:	4d0b      	ldr	r5, [pc, #44]	; (800343c <validate_application_firmware+0x30>)
{
 8003410:	4604      	mov	r4, r0
    if ((fw_config.App_fw_rec_crc==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 8003412:	68eb      	ldr	r3, [r5, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	d003      	beq.n	8003420 <validate_application_firmware+0x14>
 8003418:	68a9      	ldr	r1, [r5, #8]
 800341a:	1e4b      	subs	r3, r1, #1
 800341c:	3303      	adds	r3, #3
 800341e:	d902      	bls.n	8003426 <validate_application_firmware+0x1a>
    {
        #if ETX_OTA_VERBOSE
            printf("WARNING: No Application Firmware has been identified to be installed in our MCU/MPU.\r\n");
        #endif
        *is_app_fw_validation_ok = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	7023      	strb	r3, [r4, #0]
        }
    }
    #if ETX_OTA_VERBOSE
		printf("DONE: Application Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}
 8003424:	bd38      	pop	{r3, r4, r5, pc}
    else if (fw_config.is_bl_fw_stored_in_app_fw == BT_FW_STORED_IN_APP_FW)
 8003426:	7dab      	ldrb	r3, [r5, #22]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d0f9      	beq.n	8003420 <validate_application_firmware+0x14>
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 800342c:	4804      	ldr	r0, [pc, #16]	; (8003440 <validate_application_firmware+0x34>)
 800342e:	f7ff fa07 	bl	8002840 <crc32_mpeg2>
        if (cal_crc != fw_config.App_fw_rec_crc)
 8003432:	68eb      	ldr	r3, [r5, #12]
 8003434:	4283      	cmp	r3, r0
 8003436:	d1f3      	bne.n	8003420 <validate_application_firmware+0x14>
 8003438:	e7f4      	b.n	8003424 <validate_application_firmware+0x18>
 800343a:	bf00      	nop
 800343c:	20000500 	.word	0x20000500
 8003440:	08008000 	.word	0x08008000

08003444 <HAL_uart_rx_flush.constprop.0>:
	HAL_StatusTypeDef  ret;
	/** <b>Local variable buff:</b> @ref uint8_t Type variable used to temporarily hold an available byte of data from the UART from which it is desired to flush its Rx. */
	uint8_t buff;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 8003444:	2301      	movs	r3, #1
static void HAL_uart_rx_flush(UART_HandleTypeDef *p_huart)
 8003446:	b500      	push	{lr}
 8003448:	b083      	sub	sp, #12
	ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 800344a:	461a      	mov	r2, r3
 800344c:	4813      	ldr	r0, [pc, #76]	; (800349c <HAL_uart_rx_flush.constprop.0+0x58>)
 800344e:	a901      	add	r1, sp, #4
 8003450:	f001 ff3c 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8003454:	2803      	cmp	r0, #3
 8003456:	d102      	bne.n	800345e <HAL_uart_rx_flush.constprop.0+0x1a>
	{
		HAL_uart_rx_flush(p_huart);
	}
}
 8003458:	b003      	add	sp, #12
 800345a:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 800345e:	2301      	movs	r3, #1
 8003460:	480e      	ldr	r0, [pc, #56]	; (800349c <HAL_uart_rx_flush.constprop.0+0x58>)
 8003462:	461a      	mov	r2, r3
 8003464:	f10d 0105 	add.w	r1, sp, #5
 8003468:	f001 ff30 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800346c:	2803      	cmp	r0, #3
 800346e:	d0f3      	beq.n	8003458 <HAL_uart_rx_flush.constprop.0+0x14>
	ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 8003470:	2301      	movs	r3, #1
 8003472:	480a      	ldr	r0, [pc, #40]	; (800349c <HAL_uart_rx_flush.constprop.0+0x58>)
 8003474:	461a      	mov	r2, r3
 8003476:	f10d 0106 	add.w	r1, sp, #6
 800347a:	f001 ff27 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 800347e:	2803      	cmp	r0, #3
 8003480:	d0ea      	beq.n	8003458 <HAL_uart_rx_flush.constprop.0+0x14>
	ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 8003482:	2301      	movs	r3, #1
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <HAL_uart_rx_flush.constprop.0+0x58>)
 8003486:	461a      	mov	r2, r3
 8003488:	f10d 0107 	add.w	r1, sp, #7
 800348c:	f001 ff1e 	bl	80052cc <HAL_UART_Receive>
	if (ret != HAL_TIMEOUT)
 8003490:	2803      	cmp	r0, #3
 8003492:	d0e1      	beq.n	8003458 <HAL_uart_rx_flush.constprop.0+0x14>
		HAL_uart_rx_flush(p_huart);
 8003494:	f7ff ffd6 	bl	8003444 <HAL_uart_rx_flush.constprop.0>
}
 8003498:	e7de      	b.n	8003458 <HAL_uart_rx_flush.constprop.0+0x14>
 800349a:	bf00      	nop
 800349c:	200005a8 	.word	0x200005a8

080034a0 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a0:	2220      	movs	r2, #32
{
 80034a2:	b530      	push	{r4, r5, lr}
 80034a4:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a6:	2100      	movs	r1, #0
 80034a8:	eb0d 0002 	add.w	r0, sp, r2
 80034ac:	f001 ff96 	bl	80053dc <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034b0:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b2:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034b4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80034c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80034c6:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c8:	f000 ff62 	bl	8004390 <HAL_RCC_OscConfig>
 80034cc:	b108      	cbz	r0, 80034d2 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034d2:	4601      	mov	r1, r0
 80034d4:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80034d6:	2201      	movs	r2, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80034d8:	2390      	movs	r3, #144	; 0x90
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034da:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034dc:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80034e0:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80034e4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034e6:	f001 f943 	bl	8004770 <HAL_RCC_ClockConfig>
 80034ea:	b108      	cbz	r0, 80034f0 <SystemClock_Config+0x50>
 80034ec:	b672      	cpsid	i
  while (1)
 80034ee:	e7fe      	b.n	80034ee <SystemClock_Config+0x4e>
}
 80034f0:	b011      	add	sp, #68	; 0x44
 80034f2:	bd30      	pop	{r4, r5, pc}

080034f4 <main>:
{
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	2400      	movs	r4, #0
{
 80034fa:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80034fc:	f000 fb9a 	bl	8003c34 <HAL_Init>
  SystemClock_Config();
 8003500:	f7ff ffce 	bl	80034a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003508:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350c:	4ba7      	ldr	r3, [pc, #668]	; (80037ac <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003510:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(IATR_LED_GPIO_Output_GPIO_Port, IATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 8003512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	f042 0210 	orr.w	r2, r2, #16
 800351a:	619a      	str	r2, [r3, #24]
 800351c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(IATR_LED_GPIO_Output_GPIO_Port, IATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 800351e:	48a4      	ldr	r0, [pc, #656]	; (80037b0 <main+0x2bc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003520:	f002 0210 	and.w	r2, r2, #16
 8003524:	9201      	str	r2, [sp, #4]
 8003526:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003528:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800352c:	f042 0220 	orr.w	r2, r2, #32
 8003530:	619a      	str	r2, [r3, #24]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	f002 0220 	and.w	r2, r2, #32
 8003538:	9202      	str	r2, [sp, #8]
 800353a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	f042 0204 	orr.w	r2, r2, #4
 8003542:	619a      	str	r2, [r3, #24]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	f002 0204 	and.w	r2, r2, #4
 800354a:	9203      	str	r2, [sp, #12]
 800354c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	f042 0208 	orr.w	r2, r2, #8
 8003554:	619a      	str	r2, [r3, #24]
 8003556:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(IATR_LED_GPIO_Output_GPIO_Port, IATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 8003558:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(IATR_LED_GPIO_Output_GPIO_Port, IATR_LED_GPIO_Output_Pin, GPIO_PIN_RESET);
 8003562:	f000 ff11 	bl	8004388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin, GPIO_PIN_RESET);
 8003566:	4622      	mov	r2, r4
 8003568:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800356c:	4891      	ldr	r0, [pc, #580]	; (80037b4 <main+0x2c0>)
 800356e:	f000 ff0b 	bl	8004388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Hot_Water_Pump_GPIO_Output_Pin|Display_E_terminal_GPIO_Output_Pin
 8003572:	4622      	mov	r2, r4
 8003574:	f248 11e3 	movw	r1, #33251	; 0x81e3
 8003578:	488f      	ldr	r0, [pc, #572]	; (80037b8 <main+0x2c4>)
 800357a:	f000 ff05 	bl	8004388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin|Display_K4_terminal_GPIO_Output_Pin|Display_K1_terminal_GPIO_Output_Pin, GPIO_PIN_SET);
 800357e:	4632      	mov	r2, r6
 8003580:	f44f 41e4 	mov.w	r1, #29184	; 0x7200
 8003584:	488c      	ldr	r0, [pc, #560]	; (80037b8 <main+0x2c4>)
 8003586:	f000 feff 	bl	8004388 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IATR_LED_GPIO_Output_Pin;
 800358a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(IATR_LED_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 800358e:	4888      	ldr	r0, [pc, #544]	; (80037b0 <main+0x2bc>)
 8003590:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = IATR_LED_GPIO_Output_Pin;
 8003592:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(IATR_LED_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 800359a:	f000 fde1 	bl	8004160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HM10_is_default_settings_GPIO_Input_Pin;
 800359e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(HM10_is_default_settings_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 80035a2:	4883      	ldr	r0, [pc, #524]	; (80037b0 <main+0x2bc>)
 80035a4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = HM10_is_default_settings_GPIO_Input_Pin;
 80035a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035a8:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(HM10_is_default_settings_GPIO_Input_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f000 fdd8 	bl	8004160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin;
 80035b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	487f      	ldr	r0, [pc, #508]	; (80037b4 <main+0x2c0>)
 80035b6:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = Display_C_terminal_GPIO_Output_Pin|Display_D_terminal_GPIO_Output_Pin|Water_Heating_Resistor_GPIO_Output_Pin|Cold_Water_Pump_GPIO_Output_Pin;
 80035b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	f000 fdce 	bl	8004160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin
 80035c4:	f24f 33e3 	movw	r3, #62435	; 0xf3e3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	487b      	ldr	r0, [pc, #492]	; (80037b8 <main+0x2c4>)
 80035ca:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = Display_A_terminal_GPIO_Output_Pin|Display_B_terminal_GPIO_Output_Pin|Display_K2_terminal_GPIO_Output_Pin|Display_K3_terminal_GPIO_Output_Pin
 80035cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d2:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	f000 fdc4 	bl	8004160 <HAL_GPIO_Init>
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035d8:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 9600;
 80035da:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart3.Instance = USART3;
 80035de:	4877      	ldr	r0, [pc, #476]	; (80037bc <main+0x2c8>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035e0:	6143      	str	r3, [r0, #20]
  huart3.Instance = USART3;
 80035e2:	4b77      	ldr	r3, [pc, #476]	; (80037c0 <main+0x2cc>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035ec:	6104      	str	r4, [r0, #16]
  huart3.Init.BaudRate = 9600;
 80035ee:	6042      	str	r2, [r0, #4]
  huart3.Instance = USART3;
 80035f0:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035f2:	f001 fd5b 	bl	80050ac <HAL_UART_Init>
 80035f6:	b108      	cbz	r0, 80035fc <main+0x108>
 80035f8:	b672      	cpsid	i
  while (1)
 80035fa:	e7fe      	b.n	80035fa <main+0x106>
  htim2.Instance = TIM2;
 80035fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 416-1;
 8003600:	f240 139f 	movw	r3, #415	; 0x19f
  htim2.Instance = TIM2;
 8003604:	4c6f      	ldr	r4, [pc, #444]	; (80037c4 <main+0x2d0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003606:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 800360a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003612:	9007      	str	r0, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003618:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800361a:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800361c:	6022      	str	r2, [r4, #0]
  htim2.Init.Period = 416-1;
 800361e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003620:	f001 f988 	bl	8004934 <HAL_TIM_Base_Init>
 8003624:	b108      	cbz	r0, 800362a <main+0x136>
 8003626:	b672      	cpsid	i
  while (1)
 8003628:	e7fe      	b.n	8003628 <main+0x134>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800362e:	4620      	mov	r0, r4
 8003630:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003632:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003634:	f001 fba2 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8003638:	4603      	mov	r3, r0
 800363a:	b108      	cbz	r0, 8003640 <main+0x14c>
 800363c:	b672      	cpsid	i
  while (1)
 800363e:	e7fe      	b.n	800363e <main+0x14a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003640:	4620      	mov	r0, r4
 8003642:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003648:	f001 fcfa 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 800364c:	b9e0      	cbnz	r0, 8003688 <main+0x194>
  htim3.Init.Period = 1818-1;
 800364e:	f240 7219 	movw	r2, #1817	; 0x719
  htim3.Instance = TIM3;
 8003652:	4c5d      	ldr	r4, [pc, #372]	; (80037c8 <main+0x2d4>)
 8003654:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <main+0x2d8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003656:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800365a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800365e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8003662:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8003666:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366e:	9005      	str	r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003670:	9011      	str	r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003672:	9006      	str	r0, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003676:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003678:	4620      	mov	r0, r4
  htim3.Init.Period = 1818-1;
 800367a:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 800367c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800367e:	f001 f959 	bl	8004934 <HAL_TIM_Base_Init>
 8003682:	b118      	cbz	r0, 800368c <main+0x198>
 8003684:	b672      	cpsid	i
  while (1)
 8003686:	e7fe      	b.n	8003686 <main+0x192>
 8003688:	b672      	cpsid	i
 800368a:	e7fe      	b.n	800368a <main+0x196>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800368c:	4620      	mov	r0, r4
 800368e:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003690:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003692:	f001 fb73 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8003696:	b108      	cbz	r0, 800369c <main+0x1a8>
 8003698:	b672      	cpsid	i
  while (1)
 800369a:	e7fe      	b.n	800369a <main+0x1a6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800369c:	4620      	mov	r0, r4
 800369e:	f001 f9ff 	bl	8004aa0 <HAL_TIM_PWM_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b108      	cbz	r0, 80036aa <main+0x1b6>
 80036a6:	b672      	cpsid	i
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <main+0x1b4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036aa:	4620      	mov	r0, r4
 80036ac:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ae:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036b2:	f001 fcc5 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 80036b6:	4602      	mov	r2, r0
 80036b8:	b108      	cbz	r0, 80036be <main+0x1ca>
 80036ba:	b672      	cpsid	i
  while (1)
 80036bc:	e7fe      	b.n	80036bc <main+0x1c8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036be:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036c0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036c4:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036c6:	a90b      	add	r1, sp, #44	; 0x2c
 80036c8:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036ca:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036cc:	f001 fa56 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 80036d0:	b108      	cbz	r0, 80036d6 <main+0x1e2>
 80036d2:	b672      	cpsid	i
  while (1)
 80036d4:	e7fe      	b.n	80036d4 <main+0x1e0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036d6:	2204      	movs	r2, #4
 80036d8:	4620      	mov	r0, r4
 80036da:	a90b      	add	r1, sp, #44	; 0x2c
 80036dc:	f001 fa4e 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 80036e0:	b108      	cbz	r0, 80036e6 <main+0x1f2>
 80036e2:	b672      	cpsid	i
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <main+0x1f0>
  HAL_TIM_MspPostInit(&htim3);
 80036e6:	4838      	ldr	r0, [pc, #224]	; (80037c8 <main+0x2d4>)
 80036e8:	f000 f9d4 	bl	8003a94 <HAL_TIM_MspPostInit>
  uint8_t is_app_fw_validation_ok = 1;
 80036ec:	2001      	movs	r0, #1
    display_peripherals.A.GPIO_Port = GPIOB;
 80036ee:	4938      	ldr	r1, [pc, #224]	; (80037d0 <main+0x2dc>)
    display_peripherals.A.GPIO_Pin = GPIO_PIN_0;
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <main+0x2c4>)
 80036f2:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <main+0x2e0>)
    display_peripherals.E.GPIO_Port = GPIOB;
 80036f4:	618b      	str	r3, [r1, #24]
    display_peripherals.A.GPIO_Pin = GPIO_PIN_0;
 80036f6:	e9c1 3200 	strd	r3, r2, [r1]
    display_peripherals.B.GPIO_Port = GPIOB;
 80036fa:	4a37      	ldr	r2, [pc, #220]	; (80037d8 <main+0x2e4>)
    display_peripherals.G.GPIO_Port = GPIOB;
 80036fc:	624b      	str	r3, [r1, #36]	; 0x24
    display_peripherals.B.GPIO_Port = GPIOB;
 80036fe:	608a      	str	r2, [r1, #8]
    display_peripherals.C.GPIO_Port = GPIOA;
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <main+0x2c0>)
    display_peripherals.K1.GPIO_Port = GPIOB;
 8003702:	630b      	str	r3, [r1, #48]	; 0x30
    display_peripherals.C.GPIO_Port = GPIOA;
 8003704:	60ca      	str	r2, [r1, #12]
    display_peripherals.C.GPIO_Pin = GPIO_PIN_2;
 8003706:	4a35      	ldr	r2, [pc, #212]	; (80037dc <main+0x2e8>)
    display_peripherals.K3.GPIO_Port = GPIOB;
 8003708:	63cb      	str	r3, [r1, #60]	; 0x3c
    display_peripherals.C.GPIO_Pin = GPIO_PIN_2;
 800370a:	610a      	str	r2, [r1, #16]
    display_peripherals.D.GPIO_Port = GPIOA;
 800370c:	4a34      	ldr	r2, [pc, #208]	; (80037e0 <main+0x2ec>)
    display_peripherals.K3.GPIO_Pin = GPIO_PIN_13;
 800370e:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <main+0x2f0>)
    display_peripherals.D.GPIO_Port = GPIOA;
 8003710:	614a      	str	r2, [r1, #20]
    display_peripherals.E.GPIO_Pin = GPIO_PIN_5;
 8003712:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <main+0x2f4>)
    display_peripherals.K3.GPIO_Pin = GPIO_PIN_13;
 8003714:	640b      	str	r3, [r1, #64]	; 0x40
    display_peripherals.E.GPIO_Pin = GPIO_PIN_5;
 8003716:	61ca      	str	r2, [r1, #28]
    display_peripherals.F.GPIO_Port = GPIOB;
 8003718:	4a34      	ldr	r2, [pc, #208]	; (80037ec <main+0x2f8>)
    display_peripherals.K4.GPIO_Port = GPIOB;
 800371a:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <main+0x2fc>)
    display_peripherals.F.GPIO_Port = GPIOB;
 800371c:	620a      	str	r2, [r1, #32]
    display_peripherals.G.GPIO_Pin = GPIO_PIN_7;
 800371e:	4a35      	ldr	r2, [pc, #212]	; (80037f4 <main+0x300>)
  uint8_t is_app_fw_validation_ok = 1;
 8003720:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
    display_peripherals.G.GPIO_Pin = GPIO_PIN_7;
 8003724:	628a      	str	r2, [r1, #40]	; 0x28
    display_peripherals.Dp.GPIO_Port = GPIOB;
 8003726:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <main+0x304>)
    display_peripherals.K1.GPIO_Pin = GPIO_PIN_9;
 8003728:	4834      	ldr	r0, [pc, #208]	; (80037fc <main+0x308>)
    display_peripherals.Dp.GPIO_Port = GPIOB;
 800372a:	62ca      	str	r2, [r1, #44]	; 0x2c
    display_peripherals.K2.GPIO_Port = GPIOB;
 800372c:	f102 6270 	add.w	r2, r2, #251658240	; 0xf000000
 8003730:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
    display_peripherals.K4.GPIO_Port = GPIOB;
 8003734:	644b      	str	r3, [r1, #68]	; 0x44
    init_5641as_display_module(&htim2, &display_peripherals, on_time_steps, off_time_steps);
 8003736:	2206      	movs	r2, #6
 8003738:	2304      	movs	r3, #4
 800373a:	4822      	ldr	r0, [pc, #136]	; (80037c4 <main+0x2d0>)
 800373c:	f7fe f9d4 	bl	8001ae8 <init_5641as_display_module>
  display_output[0] = 'B';
 8003740:	4c2f      	ldr	r4, [pc, #188]	; (8003800 <main+0x30c>)
 8003742:	4a30      	ldr	r2, [pc, #192]	; (8003804 <main+0x310>)
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <main+0x314>)
  set_5641as_display_output(display_output);
 8003746:	4620      	mov	r0, r4
  display_output[0] = 'B';
 8003748:	e9c4 2300 	strd	r2, r3, [r4]
  set_5641as_display_output(display_output);
 800374c:	2503      	movs	r5, #3
 800374e:	f7fe f9eb 	bl	8001b28 <set_5641as_display_output>
        end_tick = HAL_GetTick() + 500;
 8003752:	f000 fa8d 	bl	8003c70 <HAL_GetTick>
        current_tick = 0;
 8003756:	2300      	movs	r3, #0
        end_tick = HAL_GetTick() + 500;
 8003758:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
        while (current_tick < end_tick)
 800375c:	e002      	b.n	8003764 <main+0x270>
            current_tick = HAL_GetTick();
 800375e:	f000 fa87 	bl	8003c70 <HAL_GetTick>
 8003762:	4603      	mov	r3, r0
        while (current_tick < end_tick)
 8003764:	429e      	cmp	r6, r3
 8003766:	d8fa      	bhi.n	800375e <main+0x26a>
        ret = firmware_update_configurations_init();
 8003768:	f7ff f8b6 	bl	80028d8 <firmware_update_configurations_init>
        if (ret == FIRM_UPDT_CONF_EC_OK)
 800376c:	2800      	cmp	r0, #0
 800376e:	d055      	beq.n	800381c <main+0x328>
    while(attempts < 3);
 8003770:	3d01      	subs	r5, #1
 8003772:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003776:	d1ec      	bne.n	8003752 <main+0x25e>
 8003778:	4d24      	ldr	r5, [pc, #144]	; (800380c <main+0x318>)
                dst[0] = Command_NULL_in_ASCII;
 800377a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003810 <main+0x31c>
		display_output[0] = 'E';
 800377e:	4f25      	ldr	r7, [pc, #148]	; (8003814 <main+0x320>)
 8003780:	4e25      	ldr	r6, [pc, #148]	; (8003818 <main+0x324>)
                dst[0] = Command_NULL_in_ASCII;
 8003782:	2330      	movs	r3, #48	; 0x30
		display_output[0] = 'E';
 8003784:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Command_NULL_in_ASCII;
 8003788:	606b      	str	r3, [r5, #4]
 800378a:	f8c5 8000 	str.w	r8, [r5]
        set_5641as_display_output(display_output);
 800378e:	481c      	ldr	r0, [pc, #112]	; (8003800 <main+0x30c>)
 8003790:	f7fe f9ca 	bl	8001b28 <set_5641as_display_output>
        HAL_Delay(2000);
 8003794:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003798:	f000 fa70 	bl	8003c7c <HAL_Delay>
        set_5641as_display_output(ascii_error_code);
 800379c:	481b      	ldr	r0, [pc, #108]	; (800380c <main+0x318>)
 800379e:	f7fe f9c3 	bl	8001b28 <set_5641as_display_output>
        HAL_Delay(2000);
 80037a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037a6:	f000 fa69 	bl	8003c7c <HAL_Delay>
    while (1)
 80037aa:	e7ea      	b.n	8003782 <main+0x28e>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40011000 	.word	0x40011000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	200005a8 	.word	0x200005a8
 80037c0:	40004800 	.word	0x40004800
 80037c4:	20000518 	.word	0x20000518
 80037c8:	20000560 	.word	0x20000560
 80037cc:	40000400 	.word	0x40000400
 80037d0:	200004b8 	.word	0x200004b8
 80037d4:	0c000001 	.word	0x0c000001
 80037d8:	00024001 	.word	0x00024001
 80037dc:	08000004 	.word	0x08000004
 80037e0:	00084001 	.word	0x00084001
 80037e4:	0c002000 	.word	0x0c002000
 80037e8:	0c000020 	.word	0x0c000020
 80037ec:	00404001 	.word	0x00404001
 80037f0:	40004001 	.word	0x40004001
 80037f4:	0c000080 	.word	0x0c000080
 80037f8:	01004001 	.word	0x01004001
 80037fc:	0c000200 	.word	0x0c000200
 8003800:	200004b0 	.word	0x200004b0
 8003804:	006f0042 	.word	0x006f0042
 8003808:	0074006f 	.word	0x0074006f
 800380c:	200004a8 	.word	0x200004a8
 8003810:	01050000 	.word	0x01050000
 8003814:	00720045 	.word	0x00720045
 8003818:	003d0072 	.word	0x003d0072
    GPIO_is_hm10_default_settings.GPIO_Pin = GPIO_is_hm10_default_settings_Pin;
 800381c:	f44f 4680 	mov.w	r6, #16384	; 0x4000
            firmware_update_configurations_read(&fw_config);
 8003820:	4d6a      	ldr	r5, [pc, #424]	; (80039cc <main+0x4d8>)
 8003822:	4628      	mov	r0, r5
 8003824:	f7ff f8c2 	bl	80029ac <firmware_update_configurations_read>
    GPIO_is_hm10_default_settings.GPIO_Port = GPIO_is_hm10_default_settings_Port;
 8003828:	4b69      	ldr	r3, [pc, #420]	; (80039d0 <main+0x4dc>)
 800382a:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <main+0x4e0>)
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings);
 800382c:	2001      	movs	r0, #1
    GPIO_is_hm10_default_settings.GPIO_Port = GPIO_is_hm10_default_settings_Port;
 800382e:	601a      	str	r2, [r3, #0]
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings);
 8003830:	4969      	ldr	r1, [pc, #420]	; (80039d8 <main+0x4e4>)
 8003832:	462a      	mov	r2, r5
    GPIO_is_hm10_default_settings.GPIO_Pin = GPIO_is_hm10_default_settings_Pin;
 8003834:	809e      	strh	r6, [r3, #4]
    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings);
 8003836:	f7fe fd0d 	bl	8002254 <init_firmware_update_module>
    if (ret != ETX_OTA_EC_OK)
 800383a:	b1d0      	cbz	r0, 8003872 <main+0x37e>
 800383c:	4d67      	ldr	r5, [pc, #412]	; (80039dc <main+0x4e8>)
			display_output[0] = 'E';
 800383e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80039e0 <main+0x4ec>
 8003842:	4f68      	ldr	r7, [pc, #416]	; (80039e4 <main+0x4f0>)
            set_5641as_display_output(display_output);
 8003844:	4e68      	ldr	r6, [pc, #416]	; (80039e8 <main+0x4f4>)
                dst[0] = Command_NULL_in_ASCII;
 8003846:	f04f 7183 	mov.w	r1, #17170432	; 0x1060000
 800384a:	2330      	movs	r3, #48	; 0x30
            set_5641as_display_output(display_output);
 800384c:	4630      	mov	r0, r6
                dst[0] = Command_NULL_in_ASCII;
 800384e:	e9c5 1300 	strd	r1, r3, [r5]
			display_output[0] = 'E';
 8003852:	e9c4 8700 	strd	r8, r7, [r4]
            set_5641as_display_output(display_output);
 8003856:	f7fe f967 	bl	8001b28 <set_5641as_display_output>
            HAL_Delay(2000);
 800385a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800385e:	f000 fa0d 	bl	8003c7c <HAL_Delay>
            set_5641as_display_output(ascii_error_code);
 8003862:	485e      	ldr	r0, [pc, #376]	; (80039dc <main+0x4e8>)
 8003864:	f7fe f960 	bl	8001b28 <set_5641as_display_output>
            HAL_Delay(2000);
 8003868:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800386c:	f000 fa06 	bl	8003c7c <HAL_Delay>
        while (1)
 8003870:	e7e9      	b.n	8003846 <main+0x352>
    if (fw_config.BL_fw_rec_crc != DATA_BLOCK_32BIT_ERASED_VALUE)
 8003872:	686b      	ldr	r3, [r5, #4]
 8003874:	3301      	adds	r3, #1
 8003876:	d020      	beq.n	80038ba <main+0x3c6>
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) BOOTLOADER_FIRMWARE_ADDRESS, fw_config.BL_fw_size);
 8003878:	6829      	ldr	r1, [r5, #0]
 800387a:	485c      	ldr	r0, [pc, #368]	; (80039ec <main+0x4f8>)
 800387c:	f7fe ffe0 	bl	8002840 <crc32_mpeg2>
        if (cal_crc != fw_config.BL_fw_rec_crc)
 8003880:	686b      	ldr	r3, [r5, #4]
 8003882:	4298      	cmp	r0, r3
 8003884:	d019      	beq.n	80038ba <main+0x3c6>
 8003886:	4d55      	ldr	r5, [pc, #340]	; (80039dc <main+0x4e8>)
                dst[0] = Command_NULL_in_ASCII;
 8003888:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80039f0 <main+0x4fc>
				display_output[0] = 'E';
 800388c:	4f54      	ldr	r7, [pc, #336]	; (80039e0 <main+0x4ec>)
 800388e:	4e55      	ldr	r6, [pc, #340]	; (80039e4 <main+0x4f0>)
                dst[0] = Command_NULL_in_ASCII;
 8003890:	2330      	movs	r3, #48	; 0x30
				display_output[0] = 'E';
 8003892:	e9c4 7600 	strd	r7, r6, [r4]
                dst[0] = Command_NULL_in_ASCII;
 8003896:	606b      	str	r3, [r5, #4]
 8003898:	f8c5 8000 	str.w	r8, [r5]
                set_5641as_display_output(display_output);
 800389c:	4852      	ldr	r0, [pc, #328]	; (80039e8 <main+0x4f4>)
 800389e:	f7fe f943 	bl	8001b28 <set_5641as_display_output>
                HAL_Delay(2000);
 80038a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038a6:	f000 f9e9 	bl	8003c7c <HAL_Delay>
                set_5641as_display_output(ascii_error_code);
 80038aa:	484c      	ldr	r0, [pc, #304]	; (80039dc <main+0x4e8>)
 80038ac:	f7fe f93c 	bl	8001b28 <set_5641as_display_output>
                HAL_Delay(2000);
 80038b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038b4:	f000 f9e2 	bl	8003c7c <HAL_Delay>
            while (1)
 80038b8:	e7ea      	b.n	8003890 <main+0x39c>
  validate_application_firmware(&is_app_fw_validation_ok);
 80038ba:	a80b      	add	r0, sp, #44	; 0x2c
 80038bc:	f7ff fda6 	bl	800340c <validate_application_firmware>
  HAL_Delay(PRE_ETX_OTA_REQUESTS_HEARING_DELAY);
 80038c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038c4:	f000 f9da 	bl	8003c7c <HAL_Delay>
  HAL_uart_rx_flush(&huart3);
 80038c8:	f7ff fdbc 	bl	8003444 <HAL_uart_rx_flush.constprop.0>
  display_output[0] = '.';
 80038cc:	f04f 132e 	mov.w	r3, #3014702	; 0x2e002e
  set_5641as_display_output(display_output);
 80038d0:	4845      	ldr	r0, [pc, #276]	; (80039e8 <main+0x4f4>)
  display_output[0] = '.';
 80038d2:	e9c4 3300 	strd	r3, r3, [r4]
                set_5641as_display_output(display_output);
 80038d6:	4607      	mov	r7, r0
  set_5641as_display_output(display_output);
 80038d8:	f7fe f926 	bl	8001b28 <set_5641as_display_output>
  end_tick = HAL_GetTick() + ETX_CUSTOM_HAL_TIMEOUT;
 80038dc:	f000 f9c8 	bl	8003c70 <HAL_GetTick>
  uint32_t current_tick = 0;
 80038e0:	2500      	movs	r5, #0
                display_output[0] = 'E';
 80038e2:	f44f 0a8a 	mov.w	sl, #4521984	; 0x450000
  end_tick = HAL_GetTick() + ETX_CUSTOM_HAL_TIMEOUT;
 80038e6:	f500 560c 	add.w	r6, r0, #8960	; 0x2300
                display_output[0] = 'E';
 80038ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80039f4 <main+0x500>
  end_tick = HAL_GetTick() + ETX_CUSTOM_HAL_TIMEOUT;
 80038ee:	3628      	adds	r6, #40	; 0x28
		  ret = firmware_image_download_and_install();
 80038f0:	f7fe fd0a 	bl	8002308 <firmware_image_download_and_install>
 80038f4:	4680      	mov	r8, r0
		  start_5641as_display_module(); // We start back again the 5641AS Driver Timer's Base generation in Interrupt Mode.
 80038f6:	f7fe f90b 	bl	8001b10 <start_5641as_display_module>
		  switch (ret)
 80038fa:	f1b8 0f04 	cmp.w	r8, #4
 80038fe:	d84a      	bhi.n	8003996 <main+0x4a2>
 8003900:	e8df f008 	tbb	[pc, r8]
 8003904:	442d3803 	.word	0x442d3803
 8003908:	24          	.byte	0x24
 8003909:	00          	.byte	0x00
				HAL_NVIC_SystemReset();
 800390a:	f000 fa27 	bl	8003d5c <HAL_NVIC_SystemReset>
	  while ((current_tick<end_tick) || (is_app_fw_validation_ok==0));
 800390e:	42b5      	cmp	r5, r6
 8003910:	d3ee      	bcc.n	80038f0 <main+0x3fc>
 8003912:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ea      	beq.n	80038f0 <main+0x3fc>
	  validate_application_firmware(&is_app_fw_validation_ok);
 800391a:	a80b      	add	r0, sp, #44	; 0x2c
 800391c:	f7ff fd76 	bl	800340c <validate_application_firmware>
  while (is_app_fw_validation_ok == 0);
 8003920:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0e3      	beq.n	80038f0 <main+0x3fc>
  display_output[0] = 0;
 8003928:	2300      	movs	r3, #0
  set_5641as_display_output(display_output);
 800392a:	482f      	ldr	r0, [pc, #188]	; (80039e8 <main+0x4f4>)
  display_output[0] = 0;
 800392c:	e9c4 3300 	strd	r3, r3, [r4]
  set_5641as_display_output(display_output);
 8003930:	f7fe f8fa 	bl	8001b28 <set_5641as_display_output>
  HAL_Delay(1); // Give the right Delay to guarantee that the 5641AS 7-segment Display Device LEDs will all be turned Off.
 8003934:	2001      	movs	r0, #1
 8003936:	f000 f9a1 	bl	8003c7c <HAL_Delay>
  stop_5641as_display_module();
 800393a:	f7fe f8ef 	bl	8001b1c <stop_5641as_display_module>
  HAL_Delay(1); // Give the right Delay to guarantee that the non-blocking Interrupts will stop working (this is based in the time at which they are triggered, which was configured at the STM32CubeMx App).
 800393e:	2001      	movs	r0, #1
 8003940:	f000 f99c 	bl	8003c7c <HAL_Delay>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (APPLICATION_FIRMWARE_RESET_HANDLER_ADDRESS));
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <main+0x504>)
 8003946:	685b      	ldr	r3, [r3, #4]
	app_reset_handler();
 8003948:	4798      	blx	r3
  while (1)
 800394a:	e7fe      	b.n	800394a <main+0x456>
				current_tick = HAL_GetTick();
 800394c:	f000 f990 	bl	8003c70 <HAL_GetTick>
                display_output[0] = 'E';
 8003950:	e9c4 9a00 	strd	r9, sl, [r4]
				current_tick = HAL_GetTick();
 8003954:	4605      	mov	r5, r0
                set_5641as_display_output(display_output);
 8003956:	4638      	mov	r0, r7
 8003958:	f7fe f8e6 	bl	8001b28 <set_5641as_display_output>
				break;
 800395c:	e7d7      	b.n	800390e <main+0x41a>
				current_tick = HAL_GetTick();
 800395e:	f000 f987 	bl	8003c70 <HAL_GetTick>
				display_output[0] = '.';
 8003962:	f04f 132e 	mov.w	r3, #3014702	; 0x2e002e
				current_tick = HAL_GetTick();
 8003966:	4605      	mov	r5, r0
				display_output[0] = '.';
 8003968:	e9c4 3300 	strd	r3, r3, [r4]
				set_5641as_display_output(display_output);
 800396c:	4638      	mov	r0, r7
 800396e:	f7fe f8db 	bl	8001b28 <set_5641as_display_output>
				break;
 8003972:	e7cc      	b.n	800390e <main+0x41a>
				current_tick = HAL_GetTick();
 8003974:	f000 f97c 	bl	8003c70 <HAL_GetTick>
                display_output[0] = 'E';
 8003978:	f44f 03a2 	mov.w	r3, #5308416	; 0x510000
				current_tick = HAL_GetTick();
 800397c:	4605      	mov	r5, r0
				display_output[0] = 'E';
 800397e:	6063      	str	r3, [r4, #4]
				set_5641as_display_output(display_output);
 8003980:	4638      	mov	r0, r7
				display_output[0] = 'E';
 8003982:	f8c4 9000 	str.w	r9, [r4]
				set_5641as_display_output(display_output);
 8003986:	f7fe f8cf 	bl	8001b28 <set_5641as_display_output>
				break;
 800398a:	e7c0      	b.n	800390e <main+0x41a>
				current_tick = HAL_GetTick();
 800398c:	f000 f970 	bl	8003c70 <HAL_GetTick>
				display_output[0] = 'E';
 8003990:	f44f 0386 	mov.w	r3, #4390912	; 0x430000
 8003994:	e7f2      	b.n	800397c <main+0x488>
 8003996:	4d11      	ldr	r5, [pc, #68]	; (80039dc <main+0x4e8>)
					display_output[0] = 'E';
 8003998:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80039e0 <main+0x4ec>
 800399c:	4f11      	ldr	r7, [pc, #68]	; (80039e4 <main+0x4f0>)
                    set_5641as_display_output(display_output);
 800399e:	4e12      	ldr	r6, [pc, #72]	; (80039e8 <main+0x4f4>)
                dst[0] = Command_NULL_in_ASCII;
 80039a0:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 80039a4:	2330      	movs	r3, #48	; 0x30
                    set_5641as_display_output(display_output);
 80039a6:	4630      	mov	r0, r6
                dst[0] = Command_NULL_in_ASCII;
 80039a8:	e9c5 2300 	strd	r2, r3, [r5]
					display_output[0] = 'E';
 80039ac:	e9c4 8700 	strd	r8, r7, [r4]
                    set_5641as_display_output(display_output);
 80039b0:	f7fe f8ba 	bl	8001b28 <set_5641as_display_output>
                    HAL_Delay(2000);
 80039b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039b8:	f000 f960 	bl	8003c7c <HAL_Delay>
                    set_5641as_display_output(ascii_error_code);
 80039bc:	4807      	ldr	r0, [pc, #28]	; (80039dc <main+0x4e8>)
 80039be:	f7fe f8b3 	bl	8001b28 <set_5641as_display_output>
                    HAL_Delay(2000);
 80039c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039c6:	f000 f959 	bl	8003c7c <HAL_Delay>
                while (1)
 80039ca:	e7e9      	b.n	80039a0 <main+0x4ac>
 80039cc:	20000500 	.word	0x20000500
 80039d0:	200004a0 	.word	0x200004a0
 80039d4:	40011000 	.word	0x40011000
 80039d8:	200005a8 	.word	0x200005a8
 80039dc:	200004a8 	.word	0x200004a8
 80039e0:	00720045 	.word	0x00720045
 80039e4:	003d0072 	.word	0x003d0072
 80039e8:	200004b0 	.word	0x200004b0
 80039ec:	08001800 	.word	0x08001800
 80039f0:	01070000 	.word	0x01070000
 80039f4:	004f0045 	.word	0x004f0045
 80039f8:	08008000 	.word	0x08008000

080039fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_MspInit+0x2c>)
{
 80039fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	619a      	str	r2, [r3, #24]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	f002 0201 	and.w	r2, r2, #1
 8003a0e:	9200      	str	r2, [sp, #0]
 8003a10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a18:	61da      	str	r2, [r3, #28]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a24:	b002      	add	sp, #8
 8003a26:	4770      	bx	lr
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a2c:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8003a2e:	6803      	ldr	r3, [r0, #0]
{
 8003a30:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d012      	beq.n	8003a5e <HAL_TIM_Base_MspInit+0x32>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_TIM_Base_MspInit+0x60>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d002      	beq.n	8003a44 <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a3e:	b003      	add	sp, #12
 8003a40:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_TIM_Base_MspInit+0x64>)
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	f042 0202 	orr.w	r2, r2, #2
 8003a4c:	61da      	str	r2, [r3, #28]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	9b01      	ldr	r3, [sp, #4]
}
 8003a58:	b003      	add	sp, #12
 8003a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a60:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a64:	69d9      	ldr	r1, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a66:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a68:	f041 0101 	orr.w	r1, r1, #1
 8003a6c:	61d9      	str	r1, [r3, #28]
 8003a6e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a70:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a7a:	f000 f923 	bl	8003cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a7e:	201c      	movs	r0, #28
}
 8003a80:	b003      	add	sp, #12
 8003a82:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a86:	f000 b95b 	b.w	8003d40 <HAL_NVIC_EnableIRQ>
 8003a8a:	bf00      	nop
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	2300      	movs	r3, #0
{
 8003a96:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 8003a98:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <HAL_TIM_MspPostInit+0x4c>)
 8003a9a:	6801      	ldr	r1, [r0, #0]
{
 8003a9c:	b086      	sub	sp, #24
  if(htim->Instance==TIM3)
 8003a9e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003aa4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM3)
 8003aa8:	d001      	beq.n	8003aae <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003aaa:	b006      	add	sp, #24
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = Cold_Fan_PWM_TIM3_CH1_Pin|Hot_Fan_PWM_TIM3_CH2_Pin;
 8003aae:	24c0      	movs	r4, #192	; 0xc0
 8003ab0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab2:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003abc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abe:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	f042 0204 	orr.w	r2, r2, #4
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Cold_Fan_PWM_TIM3_CH1_Pin|Hot_Fan_PWM_TIM3_CH2_Pin;
 8003ad0:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	f000 fb42 	bl	8004160 <HAL_GPIO_Init>
}
 8003adc:	b006      	add	sp, #24
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40010800 	.word	0x40010800

08003ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ae8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aea:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_UART_MspInit+0x70>)
 8003aee:	6802      	ldr	r2, [r0, #0]
{
 8003af0:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 8003af2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003af8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART3)
 8003afc:	d001      	beq.n	8003b02 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003afe:	b006      	add	sp, #24
 8003b00:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b02:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003b06:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8003b08:	f44f 6680 	mov.w	r6, #1024	; 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b10:	61da      	str	r2, [r3, #28]
 8003b12:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8003b14:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b16:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003b1a:	9200      	str	r2, [sp, #0]
 8003b1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8003b20:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	619a      	str	r2, [r3, #24]
 8003b28:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8003b2a:	480c      	ldr	r0, [pc, #48]	; (8003b5c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b32:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b34:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8003b38:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8003b3c:	f000 fb10 	bl	8004160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8003b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b44:	2300      	movs	r3, #0
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8003b46:	4805      	ldr	r0, [pc, #20]	; (8003b5c <HAL_UART_MspInit+0x74>)
 8003b48:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8003b4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8003b50:	f000 fb06 	bl	8004160 <HAL_GPIO_Init>
}
 8003b54:	b006      	add	sp, #24
 8003b56:	bdd0      	pop	{r4, r6, r7, pc}
 8003b58:	40004800 	.word	0x40004800
 8003b5c:	40010c00 	.word	0x40010c00

08003b60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <NMI_Handler>
 8003b62:	bf00      	nop

08003b64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <HardFault_Handler>
 8003b66:	bf00      	nop

08003b68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <MemManage_Handler>
 8003b6a:	bf00      	nop

08003b6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <BusFault_Handler>
 8003b6e:	bf00      	nop

08003b70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <UsageFault_Handler>
 8003b72:	bf00      	nop

08003b74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <DebugMon_Handler>:
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop

08003b7c <PendSV_Handler>:
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b80:	f000 b86a 	b.w	8003c58 <HAL_IncTick>

08003b84 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b84:	4801      	ldr	r0, [pc, #4]	; (8003b8c <TIM2_IRQHandler+0x8>)
 8003b86:	f001 b9b1 	b.w	8004eec <HAL_TIM_IRQHandler>
 8003b8a:	bf00      	nop
 8003b8c:	20000518 	.word	0x20000518

08003b90 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <SystemInit+0x8>)
 8003b92:	4a02      	ldr	r2, [pc, #8]	; (8003b9c <SystemInit+0xc>)
 8003b94:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	08001800 	.word	0x08001800

08003ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ba0:	f7ff fff6 	bl	8003b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ba4:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ba6:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bac:	e002      	b.n	8003bb4 <LoopCopyDataInit>

08003bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb2:	3304      	adds	r3, #4

08003bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb8:	d3f9      	bcc.n	8003bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003bbc:	4c09      	ldr	r4, [pc, #36]	; (8003be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc0:	e001      	b.n	8003bc6 <LoopFillZerobss>

08003bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc4:	3204      	adds	r2, #4

08003bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc8:	d3fb      	bcc.n	8003bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bca:	f001 fc0f 	bl	80053ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bce:	f7ff fc91 	bl	80034f4 <main>
  bx lr
 8003bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8003bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003bdc:	080058b0 	.word	0x080058b0
  ldr r2, =_sbss
 8003be0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003be4:	20000618 	.word	0x20000618

08003be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003be8:	e7fe      	b.n	8003be8 <ADC1_2_IRQHandler>
	...

08003bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <HAL_InitTick+0x3c>)
{
 8003bf4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf6:	7811      	ldrb	r1, [r2, #0]
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <HAL_InitTick+0x40>)
 8003bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	fbb2 f0f3 	udiv	r0, r2, r3
 8003c04:	f000 f8bc 	bl	8003d80 <HAL_SYSTICK_Config>
 8003c08:	b908      	cbnz	r0, 8003c0e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c0a:	2d0f      	cmp	r5, #15
 8003c0c:	d901      	bls.n	8003c12 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003c0e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
 8003c12:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c14:	4602      	mov	r2, r0
 8003c16:	4629      	mov	r1, r5
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f000 f852 	bl	8003cc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_InitTick+0x44>)
 8003c22:	4620      	mov	r0, r4
 8003c24:	601d      	str	r5, [r3, #0]
}
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	20000010 	.word	0x20000010

08003c34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_Init+0x20>)
{
 8003c36:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c38:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c3a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c42:	f000 f82d 	bl	8003ca0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c46:	200f      	movs	r0, #15
 8003c48:	f7ff ffd0 	bl	8003bec <HAL_InitTick>
  HAL_MspInit();
 8003c4c:	f7ff fed6 	bl	80039fc <HAL_MspInit>
}
 8003c50:	2000      	movs	r0, #0
 8003c52:	bd08      	pop	{r3, pc}
 8003c54:	40022000 	.word	0x40022000

08003c58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_IncTick+0x10>)
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_IncTick+0x14>)
 8003c5c:	6811      	ldr	r1, [r2, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	440b      	add	r3, r1
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	200005f0 	.word	0x200005f0
 8003c6c:	2000000c 	.word	0x2000000c

08003c70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c70:	4b01      	ldr	r3, [pc, #4]	; (8003c78 <HAL_GetTick+0x8>)
 8003c72:	6818      	ldr	r0, [r3, #0]
}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200005f0 	.word	0x200005f0

08003c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff fff6 	bl	8003c70 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c84:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003c86:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003c88:	d002      	beq.n	8003c90 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_Delay+0x20>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c90:	f7ff ffee 	bl	8003c70 <HAL_GetTick>
 8003c94:	1b40      	subs	r0, r0, r5
 8003c96:	42a0      	cmp	r0, r4
 8003c98:	d3fa      	bcc.n	8003c90 <HAL_Delay+0x14>
  {
  }
}
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	2000000c 	.word	0x2000000c

08003ca0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca0:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ca6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003caa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003cbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc4:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc6:	b500      	push	{lr}
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cce:	f1c3 0e07 	rsb	lr, r3, #7
 8003cd2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cda:	bf28      	it	cs
 8003cdc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce0:	f1bc 0f06 	cmp.w	ip, #6
 8003ce4:	d91b      	bls.n	8003d1e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cea:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cec:	fa0c fc03 	lsl.w	ip, ip, r3
 8003cf0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 3cff 	mov.w	ip, #4294967295
 8003cf8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003cfc:	ea21 010c 	bic.w	r1, r1, ip
 8003d00:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003d08:	db0c      	blt.n	8003d24 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0a:	0109      	lsls	r1, r1, #4
 8003d0c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d10:	b2c9      	uxtb	r1, r1
 8003d12:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d16:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d1e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d20:	4613      	mov	r3, r2
 8003d22:	e7e7      	b.n	8003cf4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_NVIC_SetPriority+0x78>)
 8003d26:	f000 000f 	and.w	r0, r0, #15
 8003d2a:	0109      	lsls	r1, r1, #4
 8003d2c:	b2c9      	uxtb	r1, r1
 8003d2e:	4403      	add	r3, r0
 8003d30:	7619      	strb	r1, [r3, #24]
 8003d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	e000ecfc 	.word	0xe000ecfc

08003d40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	db07      	blt.n	8003d54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d44:	2301      	movs	r3, #1
 8003d46:	f000 011f 	and.w	r1, r0, #31
 8003d4a:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <HAL_NVIC_EnableIRQ+0x18>)
 8003d4c:	0940      	lsrs	r0, r0, #5
 8003d4e:	408b      	lsls	r3, r1
 8003d50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d5c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d60:	4905      	ldr	r1, [pc, #20]	; (8003d78 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d64:	68ca      	ldr	r2, [r1, #12]
 8003d66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60cb      	str	r3, [r1, #12]
 8003d6e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003d74:	e7fd      	b.n	8003d72 <HAL_NVIC_SystemReset+0x16>
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00
 8003d7c:	05fa0004 	.word	0x05fa0004

08003d80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d80:	3801      	subs	r0, #1
 8003d82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003d86:	d20f      	bcs.n	8003da8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d90:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d92:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d94:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	4c05      	ldr	r4, [pc, #20]	; (8003dac <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d9e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003da2:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da4:	6119      	str	r1, [r3, #16]
 8003da6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003da8:	2001      	movs	r0, #1
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef __attribute__((optimize("O0"))) HAL_FLASH_Unlock(void)
//HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <HAL_FLASH_Unlock+0x40>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_FLASH_Unlock+0x40>)
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_FLASH_Unlock+0x44>)
 8003dca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_FLASH_Unlock+0x40>)
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <HAL_FLASH_Unlock+0x48>)
 8003dd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_FLASH_Unlock+0x40>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003de2:	79fb      	ldrb	r3, [r7, #7]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40022000 	.word	0x40022000
 8003df4:	45670123 	.word	0x45670123
 8003df8:	cdef89ab 	.word	0xcdef89ab

08003dfc <HAL_FLASH_Program>:
{
 8003dfc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8003e00:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003fd4 <HAL_FLASH_Program+0x1d8>
{
 8003e04:	b082      	sub	sp, #8
  __HAL_LOCK(&pFlash);
 8003e06:	f89a 4018 	ldrb.w	r4, [sl, #24]
{
 8003e0a:	e9cd 2000 	strd	r2, r0, [sp]
  __HAL_LOCK(&pFlash);
 8003e0e:	2c01      	cmp	r4, #1
 8003e10:	f000 80d2 	beq.w	8003fb8 <HAL_FLASH_Program+0x1bc>
 8003e14:	469b      	mov	fp, r3
 8003e16:	2301      	movs	r3, #1
 8003e18:	4689      	mov	r9, r1
 8003e1a:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003e1e:	f7ff ff27 	bl	8003c70 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e22:	f24c 3650 	movw	r6, #50000	; 0xc350
  uint32_t tickstart = HAL_GetTick();
 8003e26:	4604      	mov	r4, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e28:	4d6b      	ldr	r5, [pc, #428]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003e2a:	e005      	b.n	8003e38 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e2c:	f7ff ff20 	bl	8003c70 <HAL_GetTick>
 8003e30:	1b00      	subs	r0, r0, r4
 8003e32:	42b0      	cmp	r0, r6
 8003e34:	f200 80be 	bhi.w	8003fb4 <HAL_FLASH_Program+0x1b8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e38:	68eb      	ldr	r3, [r5, #12]
 8003e3a:	07da      	lsls	r2, r3, #31
 8003e3c:	d4f6      	bmi.n	8003e2c <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003e3e:	68eb      	ldr	r3, [r5, #12]
 8003e40:	069b      	lsls	r3, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e42:	bf44      	itt	mi
 8003e44:	2320      	movmi	r3, #32
 8003e46:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003e48:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	06d6      	lsls	r6, r2, #27
 8003e4e:	d458      	bmi.n	8003f02 <HAL_FLASH_Program+0x106>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003e50:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003e52:	07d5      	lsls	r5, r2, #31
 8003e54:	d455      	bmi.n	8003f02 <HAL_FLASH_Program+0x106>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003e56:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003e58:	f013 0804 	ands.w	r8, r3, #4
 8003e5c:	d151      	bne.n	8003f02 <HAL_FLASH_Program+0x106>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e5e:	9b01      	ldr	r3, [sp, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d004      	beq.n	8003e6e <HAL_FLASH_Program+0x72>
      nbiterations = 4U;
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	bf0c      	ite	eq
 8003e68:	2302      	moveq	r3, #2
 8003e6a:	2304      	movne	r3, #4
 8003e6c:	9301      	str	r3, [sp, #4]
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e6e:	f24c 3650 	movw	r6, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e72:	4c59      	ldr	r4, [pc, #356]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e74:	9800      	ldr	r0, [sp, #0]
 8003e76:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003e7a:	f1c3 0120 	rsb	r1, r3, #32
 8003e7e:	f1a3 0220 	sub.w	r2, r3, #32
 8003e82:	fa0b f101 	lsl.w	r1, fp, r1
 8003e86:	fa20 f303 	lsr.w	r3, r0, r3
 8003e8a:	430b      	orrs	r3, r1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e8c:	2100      	movs	r1, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e8e:	fa2b f202 	lsr.w	r2, fp, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e92:	f8ca 101c 	str.w	r1, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e96:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e98:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e9a:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8003ea2:	f8a9 3000 	strh.w	r3, [r9]
  uint32_t tickstart = HAL_GetTick();
 8003ea6:	f7ff fee3 	bl	8003c70 <HAL_GetTick>
 8003eaa:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003eac:	e004      	b.n	8003eb8 <HAL_FLASH_Program+0xbc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003eae:	f7ff fedf 	bl	8003c70 <HAL_GetTick>
 8003eb2:	1b40      	subs	r0, r0, r5
 8003eb4:	42b0      	cmp	r0, r6
 8003eb6:	d875      	bhi.n	8003fa4 <HAL_FLASH_Program+0x1a8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003eb8:	68e3      	ldr	r3, [r4, #12]
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	d4f7      	bmi.n	8003eae <HAL_FLASH_Program+0xb2>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ec2:	bf44      	itt	mi
 8003ec4:	2320      	movmi	r3, #32
 8003ec6:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ec8:	68e3      	ldr	r3, [r4, #12]
 8003eca:	06db      	lsls	r3, r3, #27
 8003ecc:	d43c      	bmi.n	8003f48 <HAL_FLASH_Program+0x14c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ece:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ed0:	07dd      	lsls	r5, r3, #31
 8003ed2:	d439      	bmi.n	8003f48 <HAL_FLASH_Program+0x14c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ed4:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ed6:	f010 0004 	ands.w	r0, r0, #4
 8003eda:	d135      	bne.n	8003f48 <HAL_FLASH_Program+0x14c>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003edc:	6923      	ldr	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8003ede:	f108 0801 	add.w	r8, r8, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8003ee8:	9b01      	ldr	r3, [sp, #4]
 8003eea:	fa5f f288 	uxtb.w	r2, r8
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f109 0902 	add.w	r9, r9, #2
 8003ef4:	d8be      	bhi.n	8003e74 <HAL_FLASH_Program+0x78>
  __HAL_UNLOCK(&pFlash);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8003efc:	b002      	add	sp, #8
 8003efe:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f013 0310 	ands.w	r3, r3, #16
 8003f0a:	d159      	bne.n	8003fc0 <HAL_FLASH_Program+0x1c4>
 8003f0c:	2104      	movs	r1, #4
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f0e:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f10:	68d2      	ldr	r2, [r2, #12]
 8003f12:	0754      	lsls	r4, r2, #29
 8003f14:	d506      	bpl.n	8003f24 <HAL_FLASH_Program+0x128>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003f16:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f18:	f8da 201c 	ldr.w	r2, [sl, #28]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	f8ca 201c 	str.w	r2, [sl, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003f24:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f26:	69d1      	ldr	r1, [r2, #28]
 8003f28:	07c8      	lsls	r0, r1, #31
 8003f2a:	d509      	bpl.n	8003f40 <HAL_FLASH_Program+0x144>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003f2c:	f8da 101c 	ldr.w	r1, [sl, #28]
 8003f30:	f041 0104 	orr.w	r1, r1, #4
 8003f34:	f8ca 101c 	str.w	r1, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003f38:	69d1      	ldr	r1, [r2, #28]
 8003f3a:	f021 0101 	bic.w	r1, r1, #1
 8003f3e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f40:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
    return HAL_ERROR;
 8003f42:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f44:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8003f46:	e7d6      	b.n	8003ef6 <HAL_FLASH_Program+0xfa>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f48:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	f012 0210 	ands.w	r2, r2, #16
 8003f50:	d02e      	beq.n	8003fb0 <HAL_FLASH_Program+0x1b4>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f52:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8003f54:	2210      	movs	r2, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f56:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	f8ca 301c 	str.w	r3, [sl, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	0758      	lsls	r0, r3, #29
 8003f68:	d506      	bpl.n	8003f78 <HAL_FLASH_Program+0x17c>
    flags |= FLASH_FLAG_PGERR;
 8003f6a:	460a      	mov	r2, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f6c:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	f8ca 301c 	str.w	r3, [sl, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	07c9      	lsls	r1, r1, #31
 8003f7e:	d509      	bpl.n	8003f94 <HAL_FLASH_Program+0x198>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003f80:	f8da 101c 	ldr.w	r1, [sl, #28]
 8003f84:	f041 0104 	orr.w	r1, r1, #4
 8003f88:	f8ca 101c 	str.w	r1, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003f8c:	69d9      	ldr	r1, [r3, #28]
 8003f8e:	f021 0101 	bic.w	r1, r1, #1
 8003f92:	61d9      	str	r1, [r3, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_FLASH_Program+0x1dc>)
    return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	611a      	str	r2, [r3, #16]
      if (status != HAL_OK)
 8003fa2:	e7a8      	b.n	8003ef6 <HAL_FLASH_Program+0xfa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8003fae:	e7a2      	b.n	8003ef6 <HAL_FLASH_Program+0xfa>
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	e7d6      	b.n	8003f62 <HAL_FLASH_Program+0x166>
 8003fb4:	2003      	movs	r0, #3
 8003fb6:	e79e      	b.n	8003ef6 <HAL_FLASH_Program+0xfa>
  __HAL_LOCK(&pFlash);
 8003fb8:	2002      	movs	r0, #2
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fc0:	f8da 201c 	ldr.w	r2, [sl, #28]
 8003fc4:	2114      	movs	r1, #20
 8003fc6:	f042 0202 	orr.w	r2, r2, #2
    flags |= FLASH_FLAG_WRPERR;
 8003fca:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fcc:	f8ca 201c 	str.w	r2, [sl, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003fd0:	e79d      	b.n	8003f0e <HAL_FLASH_Program+0x112>
 8003fd2:	bf00      	nop
 8003fd4:	200005f8 	.word	0x200005f8
 8003fd8:	40022000 	.word	0x40022000

08003fdc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003fdc:	4a03      	ldr	r2, [pc, #12]	; (8003fec <HAL_FLASH_Lock+0x10>)
}
 8003fde:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003fe0:	6913      	ldr	r3, [r2, #16]
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	6113      	str	r3, [r2, #16]
}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000

08003ff0 <FLASH_WaitForLastOperation>:
{
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7ff fe3c 	bl	8003c70 <HAL_GetTick>
 8003ff8:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ffa:	4e26      	ldr	r6, [pc, #152]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 8003ffc:	1c60      	adds	r0, r4, #1
 8003ffe:	d136      	bne.n	800406e <FLASH_WaitForLastOperation+0x7e>
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 8004002:	68d3      	ldr	r3, [r2, #12]
 8004004:	07d9      	lsls	r1, r3, #31
 8004006:	d4fc      	bmi.n	8004002 <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	0696      	lsls	r6, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800400e:	bf44      	itt	mi
 8004010:	2220      	movmi	r2, #32
 8004012:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	06d5      	lsls	r5, r2, #27
 800401a:	d407      	bmi.n	800402c <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800401c:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800401e:	07d4      	lsls	r4, r2, #31
 8004020:	d404      	bmi.n	800402c <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004022:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004024:	f010 0004 	ands.w	r0, r0, #4
 8004028:	d100      	bne.n	800402c <FLASH_WaitForLastOperation+0x3c>
}
 800402a:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f013 0310 	ands.w	r3, r3, #16
 8004034:	d126      	bne.n	8004084 <FLASH_WaitForLastOperation+0x94>
 8004036:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004038:	4a16      	ldr	r2, [pc, #88]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 800403a:	68d2      	ldr	r2, [r2, #12]
 800403c:	0750      	lsls	r0, r2, #29
 800403e:	d505      	bpl.n	800404c <FLASH_WaitForLastOperation+0x5c>
    flags |= FLASH_FLAG_PGERR;
 8004040:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004042:	4915      	ldr	r1, [pc, #84]	; (8004098 <FLASH_WaitForLastOperation+0xa8>)
 8004044:	69ca      	ldr	r2, [r1, #28]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
 800404e:	69d1      	ldr	r1, [r2, #28]
 8004050:	07c9      	lsls	r1, r1, #31
 8004052:	d508      	bpl.n	8004066 <FLASH_WaitForLastOperation+0x76>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004054:	4810      	ldr	r0, [pc, #64]	; (8004098 <FLASH_WaitForLastOperation+0xa8>)
 8004056:	69c1      	ldr	r1, [r0, #28]
 8004058:	f041 0104 	orr.w	r1, r1, #4
 800405c:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800405e:	69d1      	ldr	r1, [r2, #28]
 8004060:	f021 0101 	bic.w	r1, r1, #1
 8004064:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004066:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <FLASH_WaitForLastOperation+0xa4>)
    return HAL_ERROR;
 8004068:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 800406a:	60d3      	str	r3, [r2, #12]
}
 800406c:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800406e:	68f3      	ldr	r3, [r6, #12]
 8004070:	07db      	lsls	r3, r3, #31
 8004072:	d5c9      	bpl.n	8004008 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004074:	b124      	cbz	r4, 8004080 <FLASH_WaitForLastOperation+0x90>
 8004076:	f7ff fdfb 	bl	8003c70 <HAL_GetTick>
 800407a:	1b40      	subs	r0, r0, r5
 800407c:	42a0      	cmp	r0, r4
 800407e:	d9bd      	bls.n	8003ffc <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8004080:	2003      	movs	r0, #3
}
 8004082:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004084:	4804      	ldr	r0, [pc, #16]	; (8004098 <FLASH_WaitForLastOperation+0xa8>)
 8004086:	2114      	movs	r1, #20
 8004088:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800408a:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800408c:	f042 0202 	orr.w	r2, r2, #2
 8004090:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004092:	e7d1      	b.n	8004038 <FLASH_WaitForLastOperation+0x48>
 8004094:	40022000 	.word	0x40022000
 8004098:	200005f8 	.word	0x200005f8

0800409c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800409c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040a0:	4e2d      	ldr	r6, [pc, #180]	; (8004158 <HAL_FLASHEx_Erase+0xbc>)
 80040a2:	7e33      	ldrb	r3, [r6, #24]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d054      	beq.n	8004152 <HAL_FLASHEx_Erase+0xb6>
 80040a8:	2301      	movs	r3, #1
 80040aa:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80040ac:	6803      	ldr	r3, [r0, #0]
 80040ae:	4681      	mov	r9, r0
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d031      	beq.n	8004118 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80040b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b8:	4688      	mov	r8, r1
 80040ba:	f7ff ff99 	bl	8003ff0 <FLASH_WaitForLastOperation>
 80040be:	4607      	mov	r7, r0
 80040c0:	bb78      	cbnz	r0, 8004122 <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80040ca:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 80040ce:	eb05 2383 	add.w	r3, r5, r3, lsl #10
 80040d2:	429d      	cmp	r5, r3
 80040d4:	d225      	bcs.n	8004122 <HAL_FLASHEx_Erase+0x86>
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80040d6:	4c21      	ldr	r4, [pc, #132]	; (800415c <HAL_FLASHEx_Erase+0xc0>)
 80040d8:	e007      	b.n	80040ea <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 80040da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80040de:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 80040e2:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80040e6:	42ab      	cmp	r3, r5
 80040e8:	d91c      	bls.n	8004124 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040ea:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80040ec:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040ee:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80040f8:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004100:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004102:	f7ff ff75 	bl	8003ff0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800410e:	2800      	cmp	r0, #0
 8004110:	d0e3      	beq.n	80040da <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8004112:	f8c8 5000 	str.w	r5, [r8]
            break;
 8004116:	e005      	b.n	8004124 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004118:	f24c 3050 	movw	r0, #50000	; 0xc350
 800411c:	f7ff ff68 	bl	8003ff0 <FLASH_WaitForLastOperation>
 8004120:	b120      	cbz	r0, 800412c <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004122:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8004124:	2300      	movs	r3, #0
 8004126:	7633      	strb	r3, [r6, #24]
}
 8004128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800412c:	4c0b      	ldr	r4, [pc, #44]	; (800415c <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800412e:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004130:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004132:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004142:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004144:	f7ff ff54 	bl	8003ff0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6123      	str	r3, [r4, #16]
 8004150:	e7e8      	b.n	8004124 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8004152:	2002      	movs	r0, #2
}
 8004154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004158:	200005f8 	.word	0x200005f8
 800415c:	40022000 	.word	0x40022000

08004160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004164:	680e      	ldr	r6, [r1, #0]
{
 8004166:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004168:	2e00      	cmp	r6, #0
 800416a:	f000 80b5 	beq.w	80042d8 <HAL_GPIO_Init+0x178>
 800416e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004170:	4f7a      	ldr	r7, [pc, #488]	; (800435c <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8004172:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8004174:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004176:	4d7a      	ldr	r5, [pc, #488]	; (8004360 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8004178:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8004364 <HAL_GPIO_Init+0x204>
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800417e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004180:	fa36 f403 	lsrs.w	r4, r6, r3
 8004184:	f102 0204 	add.w	r2, r2, #4
 8004188:	f000 80a6 	beq.w	80042d8 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 800418c:	2401      	movs	r4, #1
 800418e:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8004190:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004194:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8004198:	d1f1      	bne.n	800417e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800419a:	684e      	ldr	r6, [r1, #4]
 800419c:	2e12      	cmp	r6, #18
 800419e:	f200 809e 	bhi.w	80042de <HAL_GPIO_Init+0x17e>
 80041a2:	2e12      	cmp	r6, #18
 80041a4:	d81a      	bhi.n	80041dc <HAL_GPIO_Init+0x7c>
 80041a6:	e8df f006 	tbb	[pc, r6]
 80041aa:	b9a7      	.short	0xb9a7
 80041ac:	1919ceb5 	.word	0x1919ceb5
 80041b0:	19191919 	.word	0x19191919
 80041b4:	19191919 	.word	0x19191919
 80041b8:	b1191919 	.word	0xb1191919
 80041bc:	bc          	.byte	0xbc
 80041bd:	00          	.byte	0x00
 80041be:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004368 <HAL_GPIO_Init+0x208>
 80041c2:	4576      	cmp	r6, lr
 80041c4:	f000 8098 	beq.w	80042f8 <HAL_GPIO_Init+0x198>
 80041c8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80041cc:	4576      	cmp	r6, lr
 80041ce:	f000 8093 	beq.w	80042f8 <HAL_GPIO_Init+0x198>
 80041d2:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80041d6:	4576      	cmp	r6, lr
 80041d8:	f000 808e 	beq.w	80042f8 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80041e0:	bf9c      	itt	ls
 80041e2:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041e4:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041e6:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041ea:	bf84      	itt	hi
 80041ec:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041f0:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041f4:	f8de 4000 	ldr.w	r4, [lr]
 80041f8:	fa0a f90b 	lsl.w	r9, sl, fp
 80041fc:	fa06 fb0b 	lsl.w	fp, r6, fp
 8004200:	ea24 040b 	bic.w	r4, r4, fp
 8004204:	ea44 0409 	orr.w	r4, r4, r9
 8004208:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800420c:	684c      	ldr	r4, [r1, #4]
 800420e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8004212:	d079      	beq.n	8004308 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004214:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004218:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800421c:	f04e 0e01 	orr.w	lr, lr, #1
 8004220:	f8c7 e018 	str.w	lr, [r7, #24]
 8004224:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004228:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800422c:	f00e 0e01 	and.w	lr, lr, #1
 8004230:	f8cd e004 	str.w	lr, [sp, #4]
 8004234:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8004238:	f023 0e03 	bic.w	lr, r3, #3
 800423c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8004240:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8004244:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004248:	fa06 f609 	lsl.w	r6, r6, r9
 800424c:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004250:	f8df b118 	ldr.w	fp, [pc, #280]	; 800436c <HAL_GPIO_Init+0x20c>
 8004254:	4558      	cmp	r0, fp
 8004256:	d013      	beq.n	8004280 <HAL_GPIO_Init+0x120>
 8004258:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800425c:	4558      	cmp	r0, fp
 800425e:	d06b      	beq.n	8004338 <HAL_GPIO_Init+0x1d8>
 8004260:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8004370 <HAL_GPIO_Init+0x210>
 8004264:	4558      	cmp	r0, fp
 8004266:	d060      	beq.n	800432a <HAL_GPIO_Init+0x1ca>
 8004268:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004374 <HAL_GPIO_Init+0x214>
 800426c:	4558      	cmp	r0, fp
 800426e:	bf0c      	ite	eq
 8004270:	f04f 0b03 	moveq.w	fp, #3
 8004274:	f04f 0b04 	movne.w	fp, #4
 8004278:	fa0b f909 	lsl.w	r9, fp, r9
 800427c:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004280:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004284:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004286:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800428a:	bf14      	ite	ne
 800428c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004290:	ea26 060c 	biceq.w	r6, r6, ip
 8004294:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004296:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004298:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800429c:	bf14      	ite	ne
 800429e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042a2:	ea26 060c 	biceq.w	r6, r6, ip
 80042a6:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80042a8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80042ae:	bf14      	ite	ne
 80042b0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042b4:	ea26 060c 	biceq.w	r6, r6, ip
 80042b8:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80042be:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042c0:	d01f      	beq.n	8004302 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->IMR, iocurrent);
 80042c2:	ea44 040c 	orr.w	r4, r4, ip
 80042c6:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c8:	680e      	ldr	r6, [r1, #0]
	position++;
 80042ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042cc:	fa36 f403 	lsrs.w	r4, r6, r3
 80042d0:	f102 0204 	add.w	r2, r2, #4
 80042d4:	f47f af5a 	bne.w	800418c <HAL_GPIO_Init+0x2c>
  }
}
 80042d8:	b003      	add	sp, #12
 80042da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80042de:	4546      	cmp	r6, r8
 80042e0:	d00a      	beq.n	80042f8 <HAL_GPIO_Init+0x198>
 80042e2:	f67f af6c 	bls.w	80041be <HAL_GPIO_Init+0x5e>
 80042e6:	f8df e090 	ldr.w	lr, [pc, #144]	; 8004378 <HAL_GPIO_Init+0x218>
 80042ea:	4576      	cmp	r6, lr
 80042ec:	d004      	beq.n	80042f8 <HAL_GPIO_Init+0x198>
 80042ee:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80042f2:	4576      	cmp	r6, lr
 80042f4:	f47f af72 	bne.w	80041dc <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042f8:	688e      	ldr	r6, [r1, #8]
 80042fa:	bb3e      	cbnz	r6, 800434c <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042fc:	f04f 0a04 	mov.w	sl, #4
 8004300:	e76c      	b.n	80041dc <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004302:	ea24 040c 	bic.w	r4, r4, ip
 8004306:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004308:	680e      	ldr	r6, [r1, #0]
 800430a:	e738      	b.n	800417e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800430c:	68cc      	ldr	r4, [r1, #12]
 800430e:	f104 0a04 	add.w	sl, r4, #4
          break;
 8004312:	e763      	b.n	80041dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004314:	68cc      	ldr	r4, [r1, #12]
 8004316:	f104 0a08 	add.w	sl, r4, #8
          break;
 800431a:	e75f      	b.n	80041dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800431c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8004320:	e75c      	b.n	80041dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004322:	68cc      	ldr	r4, [r1, #12]
 8004324:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8004328:	e758      	b.n	80041dc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800432a:	f04f 0b02 	mov.w	fp, #2
 800432e:	fa0b f909 	lsl.w	r9, fp, r9
 8004332:	ea46 0609 	orr.w	r6, r6, r9
 8004336:	e7a3      	b.n	8004280 <HAL_GPIO_Init+0x120>
 8004338:	f04f 0b01 	mov.w	fp, #1
 800433c:	fa0b f909 	lsl.w	r9, fp, r9
 8004340:	ea46 0609 	orr.w	r6, r6, r9
 8004344:	e79c      	b.n	8004280 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8004346:	f04f 0a00 	mov.w	sl, #0
 800434a:	e747      	b.n	80041dc <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800434c:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800434e:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8004352:	bf0c      	ite	eq
 8004354:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8004356:	6144      	strne	r4, [r0, #20]
 8004358:	e740      	b.n	80041dc <HAL_GPIO_Init+0x7c>
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	40010400 	.word	0x40010400
 8004364:	10220000 	.word	0x10220000
 8004368:	10120000 	.word	0x10120000
 800436c:	40010800 	.word	0x40010800
 8004370:	40011000 	.word	0x40011000
 8004374:	40011400 	.word	0x40011400
 8004378:	10310000 	.word	0x10310000

0800437c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800437c:	6883      	ldr	r3, [r0, #8]
 800437e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004380:	bf14      	ite	ne
 8004382:	2001      	movne	r0, #1
 8004384:	2000      	moveq	r0, #0
 8004386:	4770      	bx	lr

08004388 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004388:	b902      	cbnz	r2, 800438c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800438a:	0409      	lsls	r1, r1, #16
 800438c:	6101      	str	r1, [r0, #16]
  }
}
 800438e:	4770      	bx	lr

08004390 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004390:	2800      	cmp	r0, #0
 8004392:	f000 81b6 	beq.w	8004702 <HAL_RCC_OscConfig+0x372>
{
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	4604      	mov	r4, r0
 800439e:	07dd      	lsls	r5, r3, #31
{
 80043a0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	d535      	bpl.n	8004410 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a4:	499a      	ldr	r1, [pc, #616]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043a6:	684a      	ldr	r2, [r1, #4]
 80043a8:	f002 020c 	and.w	r2, r2, #12
 80043ac:	2a04      	cmp	r2, #4
 80043ae:	f000 80ef 	beq.w	8004590 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b2:	684a      	ldr	r2, [r1, #4]
 80043b4:	f002 020c 	and.w	r2, r2, #12
 80043b8:	2a08      	cmp	r2, #8
 80043ba:	f000 80e5 	beq.w	8004588 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_OscConfig+0x58>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 810c 	beq.w	80045e4 <HAL_RCC_OscConfig+0x254>
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d0:	f000 8182 	beq.w	80046d8 <HAL_RCC_OscConfig+0x348>
 80043d4:	4b8e      	ldr	r3, [pc, #568]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e004      	b.n	80043f2 <HAL_RCC_OscConfig+0x62>
 80043e8:	4a89      	ldr	r2, [pc, #548]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7ff fc3d 	bl	8003c70 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4e86      	ldr	r6, [pc, #536]	; (8004610 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80043f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e005      	b.n	8004408 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7ff fc38 	bl	8003c70 <HAL_GetTick>
 8004400:	1b40      	subs	r0, r0, r5
 8004402:	2864      	cmp	r0, #100	; 0x64
 8004404:	f200 80ea 	bhi.w	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	039a      	lsls	r2, r3, #14
 800440c:	d5f6      	bpl.n	80043fc <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	079f      	lsls	r7, r3, #30
 8004412:	d528      	bpl.n	8004466 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004414:	4a7e      	ldr	r2, [pc, #504]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004416:	6851      	ldr	r1, [r2, #4]
 8004418:	f011 0f0c 	tst.w	r1, #12
 800441c:	f000 808d 	beq.w	800453a <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004420:	6851      	ldr	r1, [r2, #4]
 8004422:	f001 010c 	and.w	r1, r1, #12
 8004426:	2908      	cmp	r1, #8
 8004428:	f000 8083 	beq.w	8004532 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8118 	beq.w	8004664 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	2201      	movs	r2, #1
 8004436:	4b77      	ldr	r3, [pc, #476]	; (8004614 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4e75      	ldr	r6, [pc, #468]	; (8004610 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800443a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800443c:	f7ff fc18 	bl	8003c70 <HAL_GetTick>
 8004440:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	e005      	b.n	8004450 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004444:	f7ff fc14 	bl	8003c70 <HAL_GetTick>
 8004448:	1b40      	subs	r0, r0, r5
 800444a:	2802      	cmp	r0, #2
 800444c:	f200 80c6 	bhi.w	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	0798      	lsls	r0, r3, #30
 8004454:	d5f6      	bpl.n	8004444 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	6833      	ldr	r3, [r6, #0]
 8004458:	6962      	ldr	r2, [r4, #20]
 800445a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800445e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004462:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	071a      	lsls	r2, r3, #28
 8004468:	d41f      	bmi.n	80044aa <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800446a:	075d      	lsls	r5, r3, #29
 800446c:	d542      	bpl.n	80044f4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446e:	4b68      	ldr	r3, [pc, #416]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	00d0      	lsls	r0, r2, #3
 8004474:	d57d      	bpl.n	8004572 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4e67      	ldr	r6, [pc, #412]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800447a:	6833      	ldr	r3, [r6, #0]
 800447c:	05d9      	lsls	r1, r3, #23
 800447e:	f140 809d 	bpl.w	80045bc <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f000 80fe 	beq.w	8004686 <HAL_RCC_OscConfig+0x2f6>
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80ca 	beq.w	8004624 <HAL_RCC_OscConfig+0x294>
 8004490:	2b05      	cmp	r3, #5
 8004492:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	f000 812c 	beq.w	80046f2 <HAL_RCC_OscConfig+0x362>
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	621a      	str	r2, [r3, #32]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	621a      	str	r2, [r3, #32]
 80044a8:	e0f2      	b.n	8004690 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044aa:	69a3      	ldr	r3, [r4, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d04f      	beq.n	8004550 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80044b0:	2201      	movs	r2, #1
 80044b2:	4b58      	ldr	r3, [pc, #352]	; (8004614 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b4:	4e56      	ldr	r6, [pc, #344]	; (8004610 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80044b6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80044ba:	f7ff fbd9 	bl	8003c70 <HAL_GetTick>
 80044be:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c0:	e005      	b.n	80044ce <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7ff fbd5 	bl	8003c70 <HAL_GetTick>
 80044c6:	1b40      	subs	r0, r0, r5
 80044c8:	2802      	cmp	r0, #2
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80044d0:	079b      	lsls	r3, r3, #30
 80044d2:	d5f6      	bpl.n	80044c2 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d4:	4b51      	ldr	r3, [pc, #324]	; (800461c <HAL_RCC_OscConfig+0x28c>)
 80044d6:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x290>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80044e2:	bf00      	nop
  }
  while (Delay --);
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	9201      	str	r2, [sp, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f9      	bne.n	80044e2 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	075d      	lsls	r5, r3, #29
 80044f2:	d4bc      	bmi.n	800446e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f4:	69e0      	ldr	r0, [r4, #28]
 80044f6:	b1c0      	cbz	r0, 800452a <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f8:	4d45      	ldr	r5, [pc, #276]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044fa:	686b      	ldr	r3, [r5, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	f000 80d8 	beq.w	80046b6 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8004506:	2200      	movs	r2, #0
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	f000 80fa 	beq.w	8004706 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8004512:	f7ff fbad 	bl	8003c70 <HAL_GetTick>
 8004516:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004518:	e004      	b.n	8004524 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7ff fba9 	bl	8003c70 <HAL_GetTick>
 800451e:	1b00      	subs	r0, r0, r4
 8004520:	2802      	cmp	r0, #2
 8004522:	d85b      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	019b      	lsls	r3, r3, #6
 8004528:	d4f7      	bmi.n	800451a <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800452a:	2000      	movs	r0, #0
}
 800452c:	b002      	add	sp, #8
 800452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004532:	6852      	ldr	r2, [r2, #4]
 8004534:	03d6      	lsls	r6, r2, #15
 8004536:	f53f af79 	bmi.w	800442c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4a35      	ldr	r2, [pc, #212]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	0795      	lsls	r5, r2, #30
 8004540:	d530      	bpl.n	80045a4 <HAL_RCC_OscConfig+0x214>
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	2a01      	cmp	r2, #1
 8004546:	d02d      	beq.n	80045a4 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8004548:	2001      	movs	r0, #1
}
 800454a:	b002      	add	sp, #8
 800454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004552:	4e2f      	ldr	r6, [pc, #188]	; (8004610 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004554:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004558:	f7ff fb8a 	bl	8003c70 <HAL_GetTick>
 800455c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455e:	e004      	b.n	800456a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7ff fb86 	bl	8003c70 <HAL_GetTick>
 8004564:	1b40      	subs	r0, r0, r5
 8004566:	2802      	cmp	r0, #2
 8004568:	d838      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800456c:	079f      	lsls	r7, r3, #30
 800456e:	d4f7      	bmi.n	8004560 <HAL_RCC_OscConfig+0x1d0>
 8004570:	e7bd      	b.n	80044ee <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004574:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800457a:	61da      	str	r2, [r3, #28]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004586:	e777      	b.n	8004478 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004588:	684a      	ldr	r2, [r1, #4]
 800458a:	03d0      	lsls	r0, r2, #15
 800458c:	f57f af17 	bpl.w	80043be <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	0391      	lsls	r1, r2, #14
 8004596:	f57f af3b 	bpl.w	8004410 <HAL_RCC_OscConfig+0x80>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	2a00      	cmp	r2, #0
 800459e:	f47f af37 	bne.w	8004410 <HAL_RCC_OscConfig+0x80>
 80045a2:	e7d1      	b.n	8004548 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	491a      	ldr	r1, [pc, #104]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045a6:	6960      	ldr	r0, [r4, #20]
 80045a8:	680a      	ldr	r2, [r1, #0]
 80045aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80045ae:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80045b2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b4:	071a      	lsls	r2, r3, #28
 80045b6:	f57f af58 	bpl.w	800446a <HAL_RCC_OscConfig+0xda>
 80045ba:	e776      	b.n	80044aa <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80045c4:	f7ff fb54 	bl	8003c70 <HAL_GetTick>
 80045c8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	6833      	ldr	r3, [r6, #0]
 80045cc:	05da      	lsls	r2, r3, #23
 80045ce:	f53f af58 	bmi.w	8004482 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7ff fb4d 	bl	8003c70 <HAL_GetTick>
 80045d6:	1bc0      	subs	r0, r0, r7
 80045d8:	2864      	cmp	r0, #100	; 0x64
 80045da:	d9f6      	bls.n	80045ca <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 80045dc:	2003      	movs	r0, #3
}
 80045de:	b002      	add	sp, #8
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e4:	4d0a      	ldr	r5, [pc, #40]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045f6:	f7ff fb3b 	bl	8003c70 <HAL_GetTick>
 80045fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fc:	e004      	b.n	8004608 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fe:	f7ff fb37 	bl	8003c70 <HAL_GetTick>
 8004602:	1b80      	subs	r0, r0, r6
 8004604:	2864      	cmp	r0, #100	; 0x64
 8004606:	d8e9      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	039b      	lsls	r3, r3, #14
 800460c:	d4f7      	bmi.n	80045fe <HAL_RCC_OscConfig+0x26e>
 800460e:	e6fe      	b.n	800440e <HAL_RCC_OscConfig+0x7e>
 8004610:	40021000 	.word	0x40021000
 8004614:	42420000 	.word	0x42420000
 8004618:	40007000 	.word	0x40007000
 800461c:	20000008 	.word	0x20000008
 8004620:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	4e50      	ldr	r6, [pc, #320]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462a:	6a33      	ldr	r3, [r6, #32]
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6233      	str	r3, [r6, #32]
 8004632:	6a33      	ldr	r3, [r6, #32]
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800463a:	f7ff fb19 	bl	8003c70 <HAL_GetTick>
 800463e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e004      	b.n	800464c <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7ff fb15 	bl	8003c70 <HAL_GetTick>
 8004646:	1bc0      	subs	r0, r0, r7
 8004648:	4540      	cmp	r0, r8
 800464a:	d8c7      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	6a33      	ldr	r3, [r6, #32]
 800464e:	0798      	lsls	r0, r3, #30
 8004650:	d4f7      	bmi.n	8004642 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004652:	2d00      	cmp	r5, #0
 8004654:	f43f af4e 	beq.w	80044f4 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
 800465a:	69d3      	ldr	r3, [r2, #28]
 800465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004660:	61d3      	str	r3, [r2, #28]
 8004662:	e747      	b.n	80044f4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004664:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4e40      	ldr	r6, [pc, #256]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8004668:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800466a:	f7ff fb01 	bl	8003c70 <HAL_GetTick>
 800466e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004670:	e004      	b.n	800467c <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004672:	f7ff fafd 	bl	8003c70 <HAL_GetTick>
 8004676:	1b40      	subs	r0, r0, r5
 8004678:	2802      	cmp	r0, #2
 800467a:	d8af      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	0799      	lsls	r1, r3, #30
 8004680:	d4f7      	bmi.n	8004672 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	e6ef      	b.n	8004466 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004686:	4a38      	ldr	r2, [pc, #224]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
 8004688:	6a13      	ldr	r3, [r2, #32]
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004690:	f7ff faee 	bl	8003c70 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004698:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4f33      	ldr	r7, [pc, #204]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
 800469c:	e004      	b.n	80046a8 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7ff fae7 	bl	8003c70 <HAL_GetTick>
 80046a2:	1b80      	subs	r0, r0, r6
 80046a4:	4540      	cmp	r0, r8
 80046a6:	d899      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d5f7      	bpl.n	800469e <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	f43f af20 	beq.w	80044f4 <HAL_RCC_OscConfig+0x164>
 80046b4:	e7d0      	b.n	8004658 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b6:	2801      	cmp	r0, #1
 80046b8:	f43f af38 	beq.w	800452c <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80046bc:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	6a22      	ldr	r2, [r4, #32]
 80046c0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80046c4:	4291      	cmp	r1, r2
 80046c6:	f47f af3f 	bne.w	8004548 <HAL_RCC_OscConfig+0x1b8>
 80046ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80046d0:	1a18      	subs	r0, r3, r0
 80046d2:	bf18      	it	ne
 80046d4:	2001      	movne	r0, #1
 80046d6:	e729      	b.n	800452c <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e67f      	b.n	80043f2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f2:	f042 0204 	orr.w	r2, r2, #4
 80046f6:	621a      	str	r2, [r3, #32]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e7c6      	b.n	8004690 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8004702:	2001      	movs	r0, #1
}
 8004704:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004706:	f7ff fab3 	bl	8003c70 <HAL_GetTick>
 800470a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	e005      	b.n	800471a <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7ff faaf 	bl	8003c70 <HAL_GetTick>
 8004712:	1b80      	subs	r0, r0, r6
 8004714:	2802      	cmp	r0, #2
 8004716:	f63f af61 	bhi.w	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471a:	682b      	ldr	r3, [r5, #0]
 800471c:	0199      	lsls	r1, r3, #6
 800471e:	d4f6      	bmi.n	800470e <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004720:	6a23      	ldr	r3, [r4, #32]
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004726:	d105      	bne.n	8004734 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004728:	686a      	ldr	r2, [r5, #4]
 800472a:	68a1      	ldr	r1, [r4, #8]
 800472c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004730:	430a      	orrs	r2, r1
 8004732:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004734:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004736:	4d0c      	ldr	r5, [pc, #48]	; (8004768 <HAL_RCC_OscConfig+0x3d8>)
 8004738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800473a:	686a      	ldr	r2, [r5, #4]
 800473c:	430b      	orrs	r3, r1
 800473e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004742:	490a      	ldr	r1, [pc, #40]	; (800476c <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004744:	4313      	orrs	r3, r2
 8004746:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004748:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800474a:	f7ff fa91 	bl	8003c70 <HAL_GetTick>
 800474e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004750:	e005      	b.n	800475e <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7ff fa8d 	bl	8003c70 <HAL_GetTick>
 8004756:	1b00      	subs	r0, r0, r4
 8004758:	2802      	cmp	r0, #2
 800475a:	f63f af3f 	bhi.w	80045dc <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	019a      	lsls	r2, r3, #6
 8004762:	d5f6      	bpl.n	8004752 <HAL_RCC_OscConfig+0x3c2>
 8004764:	e6e1      	b.n	800452a <HAL_RCC_OscConfig+0x19a>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	42420000 	.word	0x42420000

08004770 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004770:	2800      	cmp	r0, #0
 8004772:	f000 80a1 	beq.w	80048b8 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004776:	4a56      	ldr	r2, [pc, #344]	; (80048d0 <HAL_RCC_ClockConfig+0x160>)
{
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	4604      	mov	r4, r0
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	428b      	cmp	r3, r1
 8004786:	460d      	mov	r5, r1
 8004788:	d20c      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	f023 0307 	bic.w	r3, r3, #7
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004794:	6813      	ldr	r3, [r2, #0]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	428b      	cmp	r3, r1
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800479e:	2001      	movs	r0, #1
}
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	079e      	lsls	r6, r3, #30
 80047a8:	d514      	bpl.n	80047d4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047aa:	0758      	lsls	r0, r3, #29
 80047ac:	d504      	bpl.n	80047b8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ae:	4949      	ldr	r1, [pc, #292]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 80047b0:	684a      	ldr	r2, [r1, #4]
 80047b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047b6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	0719      	lsls	r1, r3, #28
 80047ba:	d504      	bpl.n	80047c6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047bc:	4945      	ldr	r1, [pc, #276]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 80047be:	684a      	ldr	r2, [r1, #4]
 80047c0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80047c4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	4943      	ldr	r1, [pc, #268]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 80047c8:	68a0      	ldr	r0, [r4, #8]
 80047ca:	684a      	ldr	r2, [r1, #4]
 80047cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047d0:	4302      	orrs	r2, r0
 80047d2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d4:	07da      	lsls	r2, r3, #31
 80047d6:	d520      	bpl.n	800481a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047dc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e0:	d06c      	beq.n	80048bc <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	2a02      	cmp	r2, #2
 80047e4:	d065      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	079e      	lsls	r6, r3, #30
 80047e8:	d5d9      	bpl.n	800479e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4e3a      	ldr	r6, [pc, #232]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f0:	6873      	ldr	r3, [r6, #4]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80047fa:	f7ff fa39 	bl	8003c70 <HAL_GetTick>
 80047fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004800:	e004      	b.n	800480c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004802:	f7ff fa35 	bl	8003c70 <HAL_GetTick>
 8004806:	1bc0      	subs	r0, r0, r7
 8004808:	4540      	cmp	r0, r8
 800480a:	d85a      	bhi.n	80048c2 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480c:	6873      	ldr	r3, [r6, #4]
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004818:	d1f3      	bne.n	8004802 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481a:	4a2d      	ldr	r2, [pc, #180]	; (80048d0 <HAL_RCC_ClockConfig+0x160>)
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	42ab      	cmp	r3, r5
 8004824:	d909      	bls.n	800483a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	432b      	orrs	r3, r5
 800482e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	42ab      	cmp	r3, r5
 8004838:	d1b1      	bne.n	800479e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	0758      	lsls	r0, r3, #29
 800483e:	d506      	bpl.n	800484e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4924      	ldr	r1, [pc, #144]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 8004842:	68e0      	ldr	r0, [r4, #12]
 8004844:	684a      	ldr	r2, [r1, #4]
 8004846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484a:	4302      	orrs	r2, r0
 800484c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484e:	0719      	lsls	r1, r3, #28
 8004850:	d507      	bpl.n	8004862 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 8004854:	6921      	ldr	r1, [r4, #16]
 8004856:	6853      	ldr	r3, [r2, #4]
 8004858:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800485c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004860:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8004862:	491c      	ldr	r1, [pc, #112]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 8004864:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004866:	f002 030c 	and.w	r3, r2, #12
 800486a:	2b08      	cmp	r3, #8
 800486c:	d010      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_RCC_ClockConfig+0x164>)
 8004872:	481a      	ldr	r0, [pc, #104]	; (80048dc <HAL_RCC_ClockConfig+0x16c>)
 8004874:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004876:	491a      	ldr	r1, [pc, #104]	; (80048e0 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004878:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800487c:	5c80      	ldrb	r0, [r0, r2]
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_RCC_ClockConfig+0x174>)
 8004880:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004882:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004884:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004886:	f7ff f9b1 	bl	8003bec <HAL_InitTick>
  return HAL_OK;
 800488a:	2000      	movs	r0, #0
}
 800488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004890:	4815      	ldr	r0, [pc, #84]	; (80048e8 <HAL_RCC_ClockConfig+0x178>)
 8004892:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004896:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004898:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800489a:	d514      	bpl.n	80048c6 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800489c:	480e      	ldr	r0, [pc, #56]	; (80048d8 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800489e:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048a0:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048a4:	4911      	ldr	r1, [pc, #68]	; (80048ec <HAL_RCC_ClockConfig+0x17c>)
 80048a6:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80048aa:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b0:	e7de      	b.n	8004870 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	019f      	lsls	r7, r3, #6
 80048b4:	d499      	bmi.n	80047ea <HAL_RCC_ClockConfig+0x7a>
 80048b6:	e772      	b.n	800479e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80048b8:	2001      	movs	r0, #1
}
 80048ba:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048bc:	039b      	lsls	r3, r3, #14
 80048be:	d494      	bmi.n	80047ea <HAL_RCC_ClockConfig+0x7a>
 80048c0:	e76d      	b.n	800479e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80048c2:	2003      	movs	r0, #3
 80048c4:	e76c      	b.n	80047a0 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048c6:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <HAL_RCC_ClockConfig+0x180>)
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	e7d0      	b.n	8004870 <HAL_RCC_ClockConfig+0x100>
 80048ce:	bf00      	nop
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40021000 	.word	0x40021000
 80048d8:	007a1200 	.word	0x007a1200
 80048dc:	0800587c 	.word	0x0800587c
 80048e0:	20000010 	.word	0x20000010
 80048e4:	20000008 	.word	0x20000008
 80048e8:	08005894 	.word	0x08005894
 80048ec:	080058a4 	.word	0x080058a4
 80048f0:	003d0900 	.word	0x003d0900

080048f4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4905      	ldr	r1, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004900:	5ccb      	ldrb	r3, [r1, r3]
 8004902:	6810      	ldr	r0, [r2, #0]
}
 8004904:	40d8      	lsrs	r0, r3
 8004906:	4770      	bx	lr
 8004908:	40021000 	.word	0x40021000
 800490c:	20000008 	.word	0x20000008
 8004910:	0800588c 	.word	0x0800588c

08004914 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004916:	4a05      	ldr	r2, [pc, #20]	; (800492c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4905      	ldr	r1, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800491c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	6810      	ldr	r0, [r2, #0]
}
 8004924:	40d8      	lsrs	r0, r3
 8004926:	4770      	bx	lr
 8004928:	40021000 	.word	0x40021000
 800492c:	20000008 	.word	0x20000008
 8004930:	0800588c 	.word	0x0800588c

08004934 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004934:	2800      	cmp	r0, #0
 8004936:	d066      	beq.n	8004a06 <HAL_TIM_Base_Init+0xd2>
{
 8004938:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800493e:	4604      	mov	r4, r0
 8004940:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004944:	2b00      	cmp	r3, #0
 8004946:	d045      	beq.n	80049d4 <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800494c:	492f      	ldr	r1, [pc, #188]	; (8004a0c <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004952:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004954:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004956:	d042      	beq.n	80049de <HAL_TIM_Base_Init+0xaa>
 8004958:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800495c:	d011      	beq.n	8004982 <HAL_TIM_Base_Init+0x4e>
 800495e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004962:	428a      	cmp	r2, r1
 8004964:	d00d      	beq.n	8004982 <HAL_TIM_Base_Init+0x4e>
 8004966:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800496a:	428a      	cmp	r2, r1
 800496c:	d009      	beq.n	8004982 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496e:	69a0      	ldr	r0, [r4, #24]
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004976:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004978:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800497e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004980:	e010      	b.n	80049a4 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8004982:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004988:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800498a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004992:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004998:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800499c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800499e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049a2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a4:	2301      	movs	r3, #1
 80049a6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049b0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049d0:	2000      	movs	r0, #0
}
 80049d2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049d8:	f7ff f828 	bl	8003a2c <HAL_TIM_Base_MspInit>
 80049dc:	e7b4      	b.n	8004948 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80049de:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80049e6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ec:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ee:	69a1      	ldr	r1, [r4, #24]
 80049f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80049f6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	68e3      	ldr	r3, [r4, #12]
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a00:	6963      	ldr	r3, [r4, #20]
 8004a02:	6313      	str	r3, [r2, #48]	; 0x30
 8004a04:	e7ce      	b.n	80049a4 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8004a06:	2001      	movs	r0, #1
}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00

08004a10 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d11f      	bne.n	8004a58 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a1a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a20:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a22:	490f      	ldr	r1, [pc, #60]	; (8004a60 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a24:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a28:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a2a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIM_Base_Start_IT+0x32>
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d006      	beq.n	8004a42 <HAL_TIM_Base_Start_IT+0x32>
 8004a34:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <HAL_TIM_Base_Start_IT+0x54>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_Base_Start_IT+0x32>
 8004a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d104      	bne.n	8004a4c <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a48:	2a06      	cmp	r2, #6
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8004a4c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004a4e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	4770      	bx	lr
    return HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
 8004a5a:	4770      	bx	lr
  return HAL_OK;
 8004a5c:	2000      	movs	r0, #0
}
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400

08004a68 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8004a68:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	6802      	ldr	r2, [r0, #0]
{
 8004a6e:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a70:	68d1      	ldr	r1, [r2, #12]
 8004a72:	f021 0101 	bic.w	r1, r1, #1
 8004a76:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004a78:	6a11      	ldr	r1, [r2, #32]
 8004a7a:	ea11 0f0c 	tst.w	r1, ip
 8004a7e:	d108      	bne.n	8004a92 <HAL_TIM_Base_Stop_IT+0x2a>
 8004a80:	f240 4144 	movw	r1, #1092	; 0x444
 8004a84:	6a10      	ldr	r0, [r2, #32]
 8004a86:	4208      	tst	r0, r1
 8004a88:	d103      	bne.n	8004a92 <HAL_TIM_Base_Stop_IT+0x2a>
 8004a8a:	6811      	ldr	r1, [r2, #0]
 8004a8c:	f021 0101 	bic.w	r1, r1, #1
 8004a90:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004a92:	2201      	movs	r2, #1
}
 8004a94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_PWM_MspInit>:
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop

08004aa0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d066      	beq.n	8004b72 <HAL_TIM_PWM_Init+0xd2>
{
 8004aa4:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d045      	beq.n	8004b40 <HAL_TIM_PWM_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab8:	492f      	ldr	r1, [pc, #188]	; (8004b78 <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004aba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abe:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004ac0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac2:	d042      	beq.n	8004b4a <HAL_TIM_PWM_Init+0xaa>
 8004ac4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ac8:	d011      	beq.n	8004aee <HAL_TIM_PWM_Init+0x4e>
 8004aca:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004ace:	428a      	cmp	r2, r1
 8004ad0:	d00d      	beq.n	8004aee <HAL_TIM_PWM_Init+0x4e>
 8004ad2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ad6:	428a      	cmp	r2, r1
 8004ad8:	d009      	beq.n	8004aee <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ada:	69a0      	ldr	r0, [r4, #24]
 8004adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae2:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004ae4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004ae6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004aea:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	e010      	b.n	8004b10 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8004aee:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004af6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b06:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004b08:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004b0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b0e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004b10:	2301      	movs	r3, #1
 8004b12:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b14:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b3c:	2000      	movs	r0, #0
}
 8004b3e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004b44:	f7ff ffaa 	bl	8004a9c <HAL_TIM_PWM_MspInit>
 8004b48:	e7b4      	b.n	8004ab4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004b4a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b50:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004b52:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b58:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b5a:	69a1      	ldr	r1, [r4, #24]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004b62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	68e3      	ldr	r3, [r4, #12]
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	6963      	ldr	r3, [r4, #20]
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	e7ce      	b.n	8004b10 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 8004b72:	2001      	movs	r0, #1
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40012c00 	.word	0x40012c00

08004b7c <HAL_TIM_PWM_ConfigChannel>:
{
 8004b7c:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004b7e:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8004b82:	2801      	cmp	r0, #1
 8004b84:	f000 80c5 	beq.w	8004d12 <HAL_TIM_PWM_ConfigChannel+0x196>
 8004b88:	2001      	movs	r0, #1
{
 8004b8a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004b8c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8004b90:	2a0c      	cmp	r2, #12
 8004b92:	d808      	bhi.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004b94:	e8df f002 	tbb	[pc, r2]
 8004b98:	0707073b 	.word	0x0707073b
 8004b9c:	07070765 	.word	0x07070765
 8004ba0:	07070792 	.word	0x07070792
 8004ba4:	0d          	.byte	0x0d
 8004ba5:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 8004bac:	2001      	movs	r0, #1
}
 8004bae:	bcf0      	pop	{r4, r5, r6, r7}
 8004bb0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bb2:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004bb6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bb8:	6a14      	ldr	r4, [r2, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bba:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bbe:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8004bc2:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004bc4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004bc6:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd0:	688e      	ldr	r6, [r1, #8]
 8004bd2:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd6:	4e68      	ldr	r6, [pc, #416]	; (8004d78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004bd8:	42b2      	cmp	r2, r6
 8004bda:	f000 80b8 	beq.w	8004d4e <HAL_TIM_PWM_ConfigChannel+0x1d2>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004be2:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004be4:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8004be6:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004bec:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004bf2:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf4:	69d1      	ldr	r1, [r2, #28]
 8004bf6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004bfa:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bfc:	69d1      	ldr	r1, [r2, #28]
 8004bfe:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8004c02:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8004c0c:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c0e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004c10:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004c12:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c14:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 8004c16:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	f024 0401 	bic.w	r4, r4, #1
 8004c1e:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004c20:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004c22:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c24:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004c28:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8004c2a:	688e      	ldr	r6, [r1, #8]
 8004c2c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c2e:	4e52      	ldr	r6, [pc, #328]	; (8004d78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c30:	42b2      	cmp	r2, r6
 8004c32:	d070      	beq.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8004c34:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8004c36:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c38:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c3a:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004c3c:	6355      	str	r5, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004c3e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c40:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c44:	f041 0108 	orr.w	r1, r1, #8
 8004c48:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c4a:	6991      	ldr	r1, [r2, #24]
 8004c4c:	f021 0104 	bic.w	r1, r1, #4
 8004c50:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c52:	6991      	ldr	r1, [r2, #24]
 8004c54:	4321      	orrs	r1, r4
 8004c56:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c5e:	bcf0      	pop	{r4, r5, r6, r7}
 8004c60:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c62:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004c66:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c68:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 8004c6a:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6e:	f024 0410 	bic.w	r4, r4, #16
 8004c72:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004c74:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004c76:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c78:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c80:	688e      	ldr	r6, [r1, #8]
 8004c82:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c86:	4e3c      	ldr	r6, [pc, #240]	; (8004d78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c88:	42b2      	cmp	r2, r6
 8004c8a:	d051      	beq.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8004c8c:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004c8e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c90:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c92:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8004c94:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004c96:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c98:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c9c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004ca0:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca2:	6991      	ldr	r1, [r2, #24]
 8004ca4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004ca8:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004caa:	6991      	ldr	r1, [r2, #24]
 8004cac:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8004cb0:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8004cba:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cbc:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004cbe:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004cc0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc2:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc4:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8004ccc:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004cce:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004cd0:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004cd6:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cd8:	688e      	ldr	r6, [r1, #8]
 8004cda:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cde:	4e26      	ldr	r6, [pc, #152]	; (8004d78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ce0:	42b2      	cmp	r2, r6
 8004ce2:	d03a      	beq.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 8004ce4:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cea:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 8004cec:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004cee:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf0:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf4:	f041 0108 	orr.w	r1, r1, #8
 8004cf8:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfa:	69d1      	ldr	r1, [r2, #28]
 8004cfc:	f021 0104 	bic.w	r1, r1, #4
 8004d00:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d02:	69d1      	ldr	r1, [r2, #28]
 8004d04:	4321      	orrs	r1, r4
 8004d06:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8004d10:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004d12:	2002      	movs	r0, #2
}
 8004d14:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004d16:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d18:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d1c:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d22:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004d26:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d28:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2c:	4335      	orrs	r5, r6
 8004d2e:	e781      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d30:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d36:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d3e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004d42:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d44:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004d4c:	e79e      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x110>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d4e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d50:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d54:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004d58:	e741      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d5c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d60:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d64:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d68:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004d6c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d72:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004d76:	e7b5      	b.n	8004ce4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d78:	40012c00 	.word	0x40012c00

08004d7c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004d7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d075      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xf4>
 8004d84:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004d86:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004d88:	2001      	movs	r0, #1
{
 8004d8a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8004d8e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004d96:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004da0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004da2:	680b      	ldr	r3, [r1, #0]
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d065      	beq.n	8004e74 <HAL_TIM_ConfigClockSource+0xf8>
 8004da8:	d824      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x78>
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d07c      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0x12c>
 8004dae:	d94b      	bls.n	8004e48 <HAL_TIM_ConfigClockSource+0xcc>
 8004db0:	2b50      	cmp	r3, #80	; 0x50
 8004db2:	d117      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockPolarity,
 8004db6:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004db8:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dba:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004dc0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	6a23      	ldr	r3, [r4, #32]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dca:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004dd6:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd8:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dde:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004de6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004dec:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004df0:	bc30      	pop	{r4, r5}
 8004df2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d038      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xf0>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d110      	bne.n	8004e22 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e00:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004e04:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e06:	432b      	orrs	r3, r5
 8004e08:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004e12:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e14:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e16:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e1e:	60a3      	str	r3, [r4, #8]
      break;
 8004e20:	e7e0      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004e22:	2b70      	cmp	r3, #112	; 0x70
 8004e24:	d1de      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e26:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004e2a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e2c:	432b      	orrs	r3, r5
 8004e2e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e30:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e34:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004e38:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004e3a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004e3c:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e44:	60a3      	str	r3, [r4, #8]
      break;
 8004e46:	e7cd      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d002      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xd6>
 8004e4c:	d90a      	bls.n	8004e64 <HAL_TIM_ConfigClockSource+0xe8>
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d1c8      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004e52:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004e60:	60a3      	str	r3, [r4, #8]
}
 8004e62:	e7bf      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004e64:	f033 0110 	bics.w	r1, r3, #16
 8004e68:	d1bc      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
 8004e6a:	e7f2      	b.n	8004e52 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e7b9      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004e70:	2002      	movs	r0, #2
}
 8004e72:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004e74:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004e78:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	f021 0110 	bic.w	r1, r1, #16
 8004e84:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e88:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e90:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004e94:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e96:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004e98:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004ea4:	60a3      	str	r3, [r4, #8]
}
 8004ea6:	e79d      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8004ea8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004eac:	6a21      	ldr	r1, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2000      	movs	r0, #0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004eb4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	6a23      	ldr	r3, [r4, #32]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ebe:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004ec8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004eca:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004ecc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004ed6:	60a3      	str	r3, [r4, #8]
}
 8004ed8:	e784      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x68>
 8004eda:	bf00      	nop

08004edc <HAL_TIM_OC_DelayElapsedCallback>:
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <HAL_TIM_IC_CaptureCallback>:
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop

08004ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <HAL_TIM_TriggerCallback>:
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eec:	6803      	ldr	r3, [r0, #0]
{
 8004eee:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	691a      	ldr	r2, [r3, #16]
{
 8004ef2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef4:	0791      	lsls	r1, r2, #30
 8004ef6:	d502      	bpl.n	8004efe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	0792      	lsls	r2, r2, #30
 8004efc:	d45f      	bmi.n	8004fbe <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	0750      	lsls	r0, r2, #29
 8004f02:	d502      	bpl.n	8004f0a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	0751      	lsls	r1, r2, #29
 8004f08:	d446      	bmi.n	8004f98 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	0712      	lsls	r2, r2, #28
 8004f0e:	d502      	bpl.n	8004f16 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	0710      	lsls	r0, r2, #28
 8004f14:	d42e      	bmi.n	8004f74 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	06d2      	lsls	r2, r2, #27
 8004f1a:	d502      	bpl.n	8004f22 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	06d0      	lsls	r0, r2, #27
 8004f20:	d418      	bmi.n	8004f54 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	07d1      	lsls	r1, r2, #31
 8004f26:	d502      	bpl.n	8004f2e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	07d2      	lsls	r2, r2, #31
 8004f2c:	d45d      	bmi.n	8004fea <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	0610      	lsls	r0, r2, #24
 8004f32:	d502      	bpl.n	8004f3a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	0611      	lsls	r1, r2, #24
 8004f38:	d45f      	bmi.n	8004ffa <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	0652      	lsls	r2, r2, #25
 8004f3e:	d502      	bpl.n	8004f46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	0650      	lsls	r0, r2, #25
 8004f44:	d461      	bmi.n	800500a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	0691      	lsls	r1, r2, #26
 8004f4a:	d502      	bpl.n	8004f52 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	0692      	lsls	r2, r2, #26
 8004f50:	d443      	bmi.n	8004fda <HAL_TIM_IRQHandler+0xee>
}
 8004f52:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f54:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f58:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004f60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f62:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f66:	d064      	beq.n	8005032 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f68:	f7ff ffba 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f6e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	7722      	strb	r2, [r4, #28]
 8004f72:	e7d6      	b.n	8004f22 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f74:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f78:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f7e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004f80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f82:	0799      	lsls	r1, r3, #30
 8004f84:	d152      	bne.n	800502c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	f7ff ffa9 	bl	8004edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff ffaa 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f92:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f94:	7722      	strb	r2, [r4, #28]
 8004f96:	e7be      	b.n	8004f16 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f98:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f9e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa2:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004faa:	d13c      	bne.n	8005026 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fac:	f7ff ff96 	bl	8004edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff ff97 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fb8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	7722      	strb	r2, [r4, #28]
 8004fbc:	e7a5      	b.n	8004f0a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fbe:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d025      	beq.n	800501a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	f7ff ff87 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	7722      	strb	r2, [r4, #28]
 8004fd8:	e791      	b.n	8004efe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fda:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004fde:	4620      	mov	r0, r4
}
 8004fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fe4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004fe6:	f000 b85d 	b.w	80050a4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fea:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff2:	f7fc fe63 	bl	8001cbc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	e799      	b.n	8004f2e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004ffe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005002:	f000 f851 	bl	80050a8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	e797      	b.n	8004f3a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800500a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800500e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005010:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005012:	f7ff ff69 	bl	8004ee8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	e795      	b.n	8004f46 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	f7ff ff5f 	bl	8004edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff ff60 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005024:	e7d5      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	f7ff ff5b 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 800502a:	e7c4      	b.n	8004fb6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800502c:	f7ff ff58 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 8005030:	e7ae      	b.n	8004f90 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	f7ff ff53 	bl	8004edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005036:	4620      	mov	r0, r4
 8005038:	f7ff ff54 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 800503c:	e796      	b.n	8004f6c <HAL_TIM_IRQHandler+0x80>
 800503e:	bf00      	nop

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005040:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005044:	2a01      	cmp	r2, #1
 8005046:	d027      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8005048:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800504c:	681a      	ldr	r2, [r3, #0]
{
 800504e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005054:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005056:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	4d10      	ldr	r5, [pc, #64]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800505a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800505e:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8005062:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8005064:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005066:	d009      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005068:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800506c:	d006      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800506e:	480c      	ldr	r0, [pc, #48]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005070:	4282      	cmp	r2, r0
 8005072:	d003      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005074:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005078:	4282      	cmp	r2, r0
 800507a:	d104      	bne.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005082:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005084:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005086:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005088:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800508e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8005092:	4610      	mov	r0, r2
}
 8005094:	bc30      	pop	{r4, r5}
 8005096:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005098:	2002      	movs	r0, #2
}
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400

080050a4 <HAL_TIMEx_CommutCallback>:
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <HAL_TIMEx_BreakCallback>:
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d065      	beq.n	800517c <HAL_UART_Init+0xd0>
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050b6:	4604      	mov	r4, r0
 80050b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d055      	beq.n	800516c <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050c0:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80050c4:	2124      	movs	r1, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80050c6:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80050cc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ce:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80050d0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d4:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050d6:	4302      	orrs	r2, r0
 80050d8:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80050da:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050dc:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80050e4:	4331      	orrs	r1, r6
 80050e6:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80050e8:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 80050ea:	4825      	ldr	r0, [pc, #148]	; (8005180 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 80050ec:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80050f0:	f021 010c 	bic.w	r1, r1, #12
 80050f4:	430a      	orrs	r2, r1
 80050f6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f8:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 80050fa:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005100:	ea42 0205 	orr.w	r2, r2, r5
 8005104:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8005106:	d036      	beq.n	8005176 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7ff fbf4 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800510c:	6862      	ldr	r2, [r4, #4]
 800510e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005118:	fbb3 f3f2 	udiv	r3, r3, r2
 800511c:	f04f 0e64 	mov.w	lr, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005122:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005126:	4817      	ldr	r0, [pc, #92]	; (8005184 <HAL_UART_Init+0xd8>)
 8005128:	6821      	ldr	r1, [r4, #0]
 800512a:	fba0 6203 	umull	r6, r2, r0, r3
 800512e:	0952      	lsrs	r2, r2, #5
 8005130:	fb0e 3312 	mls	r3, lr, r2, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	; 0x32
 8005138:	fba0 0303 	umull	r0, r3, r0, r3
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8005142:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005144:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 8005146:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005148:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800514c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514e:	694b      	ldr	r3, [r1, #20]
 8005150:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005154:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8005156:	68cb      	ldr	r3, [r1, #12]
 8005158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800515c:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005160:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	6365      	str	r5, [r4, #52]	; 0x34
}
 800516a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800516c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8005170:	f7fe fcba 	bl	8003ae8 <HAL_UART_MspInit>
 8005174:	e7a4      	b.n	80050c0 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8005176:	f7ff fbcd 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 800517a:	e7c7      	b.n	800510c <HAL_UART_Init+0x60>
    return HAL_ERROR;
 800517c:	2001      	movs	r0, #1
}
 800517e:	4770      	bx	lr
 8005180:	40013800 	.word	0x40013800
 8005184:	51eb851f 	.word	0x51eb851f

08005188 <HAL_UART_Transmit>:
{
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800518e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005192:	2b20      	cmp	r3, #32
 8005194:	d16b      	bne.n	800526e <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8005196:	4688      	mov	r8, r1
 8005198:	b109      	cbz	r1, 800519e <HAL_UART_Transmit+0x16>
 800519a:	4617      	mov	r7, r2
 800519c:	b912      	cbnz	r2, 80051a4 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800519e:	2001      	movs	r0, #1
}
 80051a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a6:	f04f 0900 	mov.w	r9, #0
 80051aa:	4604      	mov	r4, r0
 80051ac:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80051b4:	f7fe fd5c 	bl	8003c70 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80051ba:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80051c0:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80051c2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	d056      	beq.n	8005274 <HAL_UART_Transmit+0xec>
    while (huart->TxXferCount > 0U)
 80051c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d07b      	beq.n	80052c6 <HAL_UART_Transmit+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	1c69      	adds	r1, r5, #1
 80051d2:	d11b      	bne.n	800520c <HAL_UART_Transmit+0x84>
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	0612      	lsls	r2, r2, #24
 80051d8:	d5fc      	bpl.n	80051d4 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80051da:	f1b8 0f00 	cmp.w	r8, #0
 80051de:	d041      	beq.n	8005264 <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e0:	f818 2b01 	ldrb.w	r2, [r8], #1
 80051e4:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80051e6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80051e8:	3a01      	subs	r2, #1
 80051ea:	b292      	uxth	r2, r2
 80051ec:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ee:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80051f0:	b292      	uxth	r2, r2
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d1ec      	bne.n	80051d0 <HAL_UART_Transmit+0x48>
 80051f6:	1c68      	adds	r0, r5, #1
 80051f8:	d142      	bne.n	8005280 <HAL_UART_Transmit+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	0651      	lsls	r1, r2, #25
 80051fe:	d5fc      	bpl.n	80051fa <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8005200:	2320      	movs	r3, #32
 8005202:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8005206:	2000      	movs	r0, #0
}
 8005208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	0617      	lsls	r7, r2, #24
 8005210:	d4e3      	bmi.n	80051da <HAL_UART_Transmit+0x52>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005212:	b12d      	cbz	r5, 8005220 <HAL_UART_Transmit+0x98>
 8005214:	f7fe fd2c 	bl	8003c70 <HAL_GetTick>
 8005218:	1b80      	subs	r0, r0, r6
 800521a:	4285      	cmp	r5, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521c:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800521e:	d2d7      	bcs.n	80051d0 <HAL_UART_Transmit+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	f103 020c 	add.w	r2, r3, #12
 8005224:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	f103 000c 	add.w	r0, r3, #12
 8005230:	e840 2100 	strex	r1, r2, [r0]
 8005234:	2900      	cmp	r1, #0
 8005236:	d1f3      	bne.n	8005220 <HAL_UART_Transmit+0x98>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f103 0214 	add.w	r2, r3, #20
 800523c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	f103 0014 	add.w	r0, r3, #20
 8005248:	e840 2100 	strex	r1, r2, [r0]
 800524c:	2900      	cmp	r1, #0
 800524e:	d1f3      	bne.n	8005238 <HAL_UART_Transmit+0xb0>
        huart->gState  = HAL_UART_STATE_READY;
 8005250:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8005252:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        huart->gState  = HAL_UART_STATE_READY;
 8005256:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800525a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 800525e:	2003      	movs	r0, #3
}
 8005260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005264:	f839 2b02 	ldrh.w	r2, [r9], #2
 8005268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800526c:	e7ba      	b.n	80051e4 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 800526e:	2002      	movs	r0, #2
}
 8005270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1a5      	bne.n	80051c6 <HAL_UART_Transmit+0x3e>
 800527a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800527c:	4698      	mov	r8, r3
 800527e:	e7a2      	b.n	80051c6 <HAL_UART_Transmit+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	0652      	lsls	r2, r2, #25
 8005284:	d4bc      	bmi.n	8005200 <HAL_UART_Transmit+0x78>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005286:	b12d      	cbz	r5, 8005294 <HAL_UART_Transmit+0x10c>
 8005288:	f7fe fcf2 	bl	8003c70 <HAL_GetTick>
 800528c:	1b83      	subs	r3, r0, r6
 800528e:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005290:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005292:	d2b0      	bcs.n	80051f6 <HAL_UART_Transmit+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f103 020c 	add.w	r2, r3, #12
 8005298:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800529c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	f103 000c 	add.w	r0, r3, #12
 80052a4:	e840 2100 	strex	r1, r2, [r0]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d1f3      	bne.n	8005294 <HAL_UART_Transmit+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	f103 0214 	add.w	r2, r3, #20
 80052b0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	f103 0014 	add.w	r0, r3, #20
 80052bc:	e840 2100 	strex	r1, r2, [r0]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d1f3      	bne.n	80052ac <HAL_UART_Transmit+0x124>
 80052c4:	e7c4      	b.n	8005250 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	e795      	b.n	80051f6 <HAL_UART_Transmit+0x6e>
 80052ca:	bf00      	nop

080052cc <HAL_UART_Receive>:
{
 80052cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d176      	bne.n	80053c8 <HAL_UART_Receive+0xfc>
    if ((pData == NULL) || (Size == 0U))
 80052da:	4688      	mov	r8, r1
 80052dc:	b109      	cbz	r1, 80052e2 <HAL_UART_Receive+0x16>
 80052de:	4616      	mov	r6, r2
 80052e0:	b912      	cbnz	r2, 80052e8 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 80052e2:	2001      	movs	r0, #1
}
 80052e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	f04f 0900 	mov.w	r9, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80052fc:	f7fe fcb8 	bl	8003c70 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005300:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8005302:	4605      	mov	r5, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8005308:	85a6      	strh	r6, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800530a:	85e6      	strh	r6, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	d05f      	beq.n	80053ce <HAL_UART_Receive+0x102>
    while (huart->RxXferCount > 0U)
 800530e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005310:	b29b      	uxth	r3, r3
 8005312:	b1eb      	cbz	r3, 8005350 <HAL_UART_Receive+0x84>
 8005314:	1c78      	adds	r0, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	d120      	bne.n	800535c <HAL_UART_Receive+0x90>
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	0691      	lsls	r1, r2, #26
 800531e:	d5fc      	bpl.n	800531a <HAL_UART_Receive+0x4e>
      if (pdata8bits == NULL)
 8005320:	f1b8 0f00 	cmp.w	r8, #0
 8005324:	d04a      	beq.n	80053bc <HAL_UART_Receive+0xf0>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005326:	68a2      	ldr	r2, [r4, #8]
 8005328:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800532c:	d004      	beq.n	8005338 <HAL_UART_Receive+0x6c>
 800532e:	2a00      	cmp	r2, #0
 8005330:	d140      	bne.n	80053b4 <HAL_UART_Receive+0xe8>
 8005332:	6922      	ldr	r2, [r4, #16]
 8005334:	2a00      	cmp	r2, #0
 8005336:	d13d      	bne.n	80053b4 <HAL_UART_Receive+0xe8>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 8005340:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8005342:	3a01      	subs	r2, #1
 8005344:	b292      	uxth	r2, r2
 8005346:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005348:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e1      	bne.n	8005314 <HAL_UART_Receive+0x48>
    huart->RxState = HAL_UART_STATE_READY;
 8005350:	2320      	movs	r3, #32
 8005352:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 8005356:	2000      	movs	r0, #0
}
 8005358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	0692      	lsls	r2, r2, #26
 8005360:	d4de      	bmi.n	8005320 <HAL_UART_Receive+0x54>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005362:	b12f      	cbz	r7, 8005370 <HAL_UART_Receive+0xa4>
 8005364:	f7fe fc84 	bl	8003c70 <HAL_GetTick>
 8005368:	1b40      	subs	r0, r0, r5
 800536a:	4287      	cmp	r7, r0
 800536c:	d2d2      	bcs.n	8005314 <HAL_UART_Receive+0x48>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	f103 020c 	add.w	r2, r3, #12
 8005374:	e852 2f00 	ldrex	r2, [r2]
 8005378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	f103 000c 	add.w	r0, r3, #12
 8005380:	e840 2100 	strex	r1, r2, [r0]
 8005384:	2900      	cmp	r1, #0
 8005386:	d1f3      	bne.n	8005370 <HAL_UART_Receive+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	f103 0214 	add.w	r2, r3, #20
 800538c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	f103 0014 	add.w	r0, r3, #20
 8005398:	e840 2100 	strex	r1, r2, [r0]
 800539c:	2900      	cmp	r1, #0
 800539e:	d1f3      	bne.n	8005388 <HAL_UART_Receive+0xbc>
        huart->gState  = HAL_UART_STATE_READY;
 80053a0:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80053a2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        huart->gState  = HAL_UART_STATE_READY;
 80053a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        return HAL_TIMEOUT;
 80053ae:	2003      	movs	r0, #3
}
 80053b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ba:	e7bf      	b.n	800533c <HAL_UART_Receive+0x70>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 80053c6:	e7bb      	b.n	8005340 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80053c8:	2002      	movs	r0, #2
}
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d19c      	bne.n	800530e <HAL_UART_Receive+0x42>
 80053d4:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80053d6:	4698      	mov	r8, r3
 80053d8:	e799      	b.n	800530e <HAL_UART_Receive+0x42>
 80053da:	bf00      	nop

080053dc <memset>:
 80053dc:	4603      	mov	r3, r0
 80053de:	4402      	add	r2, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <__libc_init_array>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	2600      	movs	r6, #0
 80053f0:	4d0c      	ldr	r5, [pc, #48]	; (8005424 <__libc_init_array+0x38>)
 80053f2:	4c0d      	ldr	r4, [pc, #52]	; (8005428 <__libc_init_array+0x3c>)
 80053f4:	1b64      	subs	r4, r4, r5
 80053f6:	10a4      	asrs	r4, r4, #2
 80053f8:	42a6      	cmp	r6, r4
 80053fa:	d109      	bne.n	8005410 <__libc_init_array+0x24>
 80053fc:	f000 f828 	bl	8005450 <_init>
 8005400:	2600      	movs	r6, #0
 8005402:	4d0a      	ldr	r5, [pc, #40]	; (800542c <__libc_init_array+0x40>)
 8005404:	4c0a      	ldr	r4, [pc, #40]	; (8005430 <__libc_init_array+0x44>)
 8005406:	1b64      	subs	r4, r4, r5
 8005408:	10a4      	asrs	r4, r4, #2
 800540a:	42a6      	cmp	r6, r4
 800540c:	d105      	bne.n	800541a <__libc_init_array+0x2e>
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	f855 3b04 	ldr.w	r3, [r5], #4
 8005414:	4798      	blx	r3
 8005416:	3601      	adds	r6, #1
 8005418:	e7ee      	b.n	80053f8 <__libc_init_array+0xc>
 800541a:	f855 3b04 	ldr.w	r3, [r5], #4
 800541e:	4798      	blx	r3
 8005420:	3601      	adds	r6, #1
 8005422:	e7f2      	b.n	800540a <__libc_init_array+0x1e>
 8005424:	080058a8 	.word	0x080058a8
 8005428:	080058a8 	.word	0x080058a8
 800542c:	080058a8 	.word	0x080058a8
 8005430:	080058ac 	.word	0x080058ac

08005434 <memcpy>:
 8005434:	440a      	add	r2, r1
 8005436:	4291      	cmp	r1, r2
 8005438:	f100 33ff 	add.w	r3, r0, #4294967295
 800543c:	d100      	bne.n	8005440 <memcpy+0xc>
 800543e:	4770      	bx	lr
 8005440:	b510      	push	{r4, lr}
 8005442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005446:	4291      	cmp	r1, r2
 8005448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800544c:	d1f9      	bne.n	8005442 <memcpy+0xe>
 800544e:	bd10      	pop	{r4, pc}

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
