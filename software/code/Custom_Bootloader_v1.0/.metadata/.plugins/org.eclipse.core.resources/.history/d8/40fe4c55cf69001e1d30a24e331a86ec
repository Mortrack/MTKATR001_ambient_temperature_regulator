/* USER CODE BEGIN Header */
/** @file
 *
 * @defgroup main Main module
 * @{
 *
 * @brief	This is the Main Module, which is where the main part of the application of the whole code is executed.
 *
 * @details	The purpose of this module's application is to ...
 *
 * @author 	Cesar Miranda Meza (cmirandameza3@hotmail.com)
 * @date	October DAY, 2023.
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>	// Library from which "printf" is located at.
#include <stdint.h> // This library contains the aliases: uint8_t, uint16_t, uint32_t, etc.
#include "firmware_update.h" // This custom Mortrack's library contains the functions, definitions and variables required so that the Main module can receive and apply Firmware Update Images to our MCU/MPU and to also get data via the ETX OTA Protocol.
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define APLICATION_FIRMWARE_ADDRESS     (ETX_APP_FLASH_ADDR)	/**< @brief Designated Memory Location address for the Application Firmware. */
#define MAJOR                           (0)                     /**< @brief Major version number of our MCU/MPU's Bootloader Firmware. */
#define MINOR                           (3)					    /**< @brief Minor version number of our MCU/MPU's Bootloader Firmware. */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// NOTE: "huart1" is used for debugging messages via printf() from stdio.h library.
// NOTE: "huart2" is used for communicating with the host that will be sending firmware images to our MCU/MPU.
const uint8_t APP_version[2] = {MAJOR, MINOR};		/**< @brief Global array variable used to hold the Major and Minor version number of our MCU/MPU's Application Firmware in the 1st and 2nd byte respectively. */
firmware_update_config_data_t p_fw_config;			/**< @brief Global struct used to either pass to it the data that we want to write into the designated Flash Memory pages of the @ref firmware_update_config sub-module or, in the case of a read request, where that sub-module will write the latest data contained in the sub-module. */
uint8_t is_our_MCU_in_DFU = 0;						/**< @brief Flag for informing whether our MCU/MPU is in DFU mode with a 1, or otherwise with a 0. */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/**@brief	Initializes the @ref firmware_update_config sub-module and then loads the latest data that has been written
 *          into it, if there is any.
 *
 * @details	In case that all the processes conclude successfully, the latest data of the @ref firmware_update_config
 *          sub-module will be copied into the global struct \c p_fw_config .
 *
 * @details	A maximum of three attempts to initialize this module will be made, with a delay of 0.5 seconds each.
 *
 * @retval				FIRM_UPDT_CONF_EC_OK
 * @retval				FIRM_UPDT_CONF_EC_ERR
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @date	October 02, 2023
 */
static FirmUpdConf_Status custom_firmware_update_config_init();

/**@brief	Validates the CRC of our MCU/MPU's current Application Firmware.
 *
 * @details	This function reads the data stored in the @ref firmware_update_config sub-module to get the recorded CRC of
 *          the Application Firmware and it calculates the CRC of the actual Application Firmware currently installed in
 *          our MCU/MPU. After this, both CRCs are used for validating our MCU/MPU's current Application Firmware.
 *
 * @retval	FIRM_UPDT_CONF_EC_OK	if both the Calculated and Recorded CRCs of our MCU/MPU's Application Firmware match.
 * @retval	FIRM_UPDT_CONF_EC_ERR	otherwise.
 *
 * @author	César Miranda Meza
 * @date	October 09, 2023
 */
static ETX_OTA_Status validate_application_firmware();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status function or a @ref ETX_OTA_Status function type. */
  uint8_t ret;

  /* We initialize the Firmware Update Configurations sub-module to be able to write and read data from it. */
  printf("Initializing the Firmware Update Configurations sub-module...\r\n");
  ret = custom_firmware_update_config_init();
  if ((ret!=FIRM_UPDT_CONF_EC_OK) || (p_fw_config.App_fw_rec_crc==DATA_BLOCK_32BIT_ERASED_VALUE))
  {
      printf("ERROR: The Firmware Update Configurations sub-module could not be initialized. Our MCU/MPU will halt!.\r\n");
      while (1);
  }
  printf("DONE: Firmware Update Configurations sub-module has been successfully initialized.\r\n");

  /////////////////////
  p_fw_config.App_fw_rec_crc = 0x20202020;
  p_fw_config.App_fw_size = 0x10101010;

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
	EraseInitStruct.Banks        = FLASH_BANK_1;
	EraseInitStruct.PageAddress  = 0x0801D800;
	EraseInitStruct.NbPages      = 1U;

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
	if (ret != HAL_OK)
	{
	printf("ERROR: \r\n");
	return ret;
	}
	/*
    for (int i=0; i<48; i++)
    {
    	//firmware_update_configurations_read(&p_fw_config);
    	ret = firmware_update_configurations_write(&p_fw_config);
    	if (ret != FIRM_UPDT_CONF_EC_OK)
    	{
    		printf("DEBUG - FLASH ERROR CODE: %d\r\n", ret);
    		while(1);
    	}
    }
	*/

    /////////////////////


  /* We validate the currently installed Application Firmware in our MCU/MPU. */
  printf("Validating currently installed Application Firmware in our MCU/MPU...\r\n");
  ret = validate_application_firmware();
  if (ret != ETX_OTA_EC_OK)
  {
      printf("ERROR: The Application Firmware currently installed in our MCU/MPU is corrupted. Our MCU/MPU will halt!.\r\n");
      while (1);
  }
  printf("DONE: The currently installed Application Firmware in our MCU/MPU has been successfully validated.\r\n");

  /* Send a message from the Application Firmware showing the current Application version there. */
  printf("Starting the Application Firmware v%d.%d\r\n", APP_version[0], APP_version[1]);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("Waiting to start a ETX OTA Process...\r\n");
    ret = app_firmware_image_download_and_install(&p_fw_config);
    switch (ret)
    {
        case ETX_OTA_EC_OK:
            printf("DONE: Bootloader Firmware Update has successfully concluded!.\r\n");
            break;
        case ETX_OTA_EC_STOP:
            printf("DONE: Firmware Update process has been stopped. Try again...\r\n");
            break;
        case ETX_OTA_EC_NR:
            // No response was received from host. Therefore, try hearing for a response from the host again in case our MCU/MPU is still in DFU mode.
            break;
        case ETX_OTA_EC_NA:
            printf("WARNING: Bootloader Firmware Image was expected, but request for Application Firmware Image install was received instead.\r\n");
            printf("Resetting our MCU/MPU to jump into its Bootloader Firmware to an receive Application Firmware Image there and then try again...\r\n");
            HAL_NVIC_SystemReset();
            break;
        case ETX_OTA_EC_ERR:
            printf("ERROR: Firmware Update has failed. Our MCU/MPU will halt!.\r\n");
            while (1);
            break;
        default:
            printf("ERROR: Exception Code received %d is not recognized. Our MCU/MPU will halt!.\r\n", ret);
            while (1);
    }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/**@brief	Compiler definition to be able to use the @ref printf function from stdio.h
 * 			library in order to print characters via the UART but by using that
 * 			@ref printf function.
 *
 * @return	The \p ch param.
 *
 * author	César Miranda Meza
 * @date	July 07, 2023
 */
#ifdef __GNUC__
/* With GCC, small printf (option LD Linker->Libraries->Small printf set to 'Yes') calls __io_putchar(). */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
	/* Place your implementation of fputc here. */
	/* NOTE: The characters written into the UART will be looped until the end of transmission. */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

static FirmUpdConf_Status custom_firmware_update_config_init()
{
    /** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
    int16_t ret;
    /** <b>Local static variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
    static uint8_t attempts = 0;
    /** <b>Local variable end_tick:</b> Defines the HAL Tick that our MCU/MPU needs to reach so that 0.5 seconds have passed with respect to the moment that this function is called. */
    uint32_t end_tick = HAL_GetTick() + 500;
    /** <b>Local variable current_tick:</b> Current HAL Tick in our MCU/MPU. */
    uint32_t current_tick;

    if (attempts > 3)
    {
        printf("ERROR: Three attempts have already been made to initialize the Firmware Update Configurations sub-module and they all have failed.\r\n");
        return FIRM_UPDT_CONF_EC_ERR;
    }

    /* Delay of 500 milliseconds. */
    while (current_tick < end_tick)
    {
        current_tick = HAL_GetTick();
    }

    /* We initialize the Firmware Update Configurations sub-module. */
    ret = firmware_update_configurations_init();
    if (ret != FIRM_UPDT_CONF_EC_OK)
    {
        printf("ERROR CODE %d: The Firmware Update Configurations sub-module could not be initialized in attempt %d...\r\n", ret, attempts);
        custom_firmware_update_config_init();
    }

    /* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
    firmware_update_configurations_read(&p_fw_config);

    return FIRM_UPDT_CONF_EC_OK;
}

static ETX_OTA_Status validate_application_firmware()
{
    /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Application Firmware. */
	uint32_t cal_crc = CRC32((uint8_t *) APLICATION_FIRMWARE_ADDRESS, p_fw_config.App_fw_size);

    printf("Validating the Application Firmware of our MCU/MPU...\r\n");
    if (cal_crc != p_fw_config.App_fw_rec_crc)
    {
        printf("The recorded 32-bit CRC of the installed Application Firmware Image mismatches with the calculated one: [Calculated CRC = 0x%08lX] [Recorded CRC = 0x%08lX]\r\n",
               cal_crc, p_fw_config.App_fw_rec_crc);
        return ETX_OTA_EC_ERR;
    }
    printf("DONE: Application Firmware of our MCU/MPU has been successfully validated.\r\n");

    return ETX_OTA_EC_OK;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/** @} */

